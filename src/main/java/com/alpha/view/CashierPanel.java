/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.alpha.view;

import com.alpha.config.Context;
import com.alpha.dto.BatchDTO;
import com.alpha.dto.OrderDTO;
import com.alpha.model.Batch;
import com.alpha.model.Item;
import com.alpha.model.OrderDetails;
import com.alpha.service.custom.BatchService;
import com.alpha.service.custom.ItemService;
import com.alpha.service.custom.OrderService;
import com.alpha.utils.BillPrintable;
import com.alpha.utils.Validation;
import java.awt.Color;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.HashPrintServiceAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.PrintServiceAttributeSet;
import javax.print.attribute.standard.PrinterName;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.joda.time.LocalDate;
import org.springframework.context.support.AbstractApplicationContext;

/**
 *
 * @author Harindu.sul
 */
public class CashierPanel extends javax.swing.JFrame {

    private Timer simpleTimer;
    private AbstractApplicationContext context;
    private DefaultTableCellRenderer renderer;
    private DefaultComboBoxModel searchCombModel;
    private DefaultTableCellRenderer centerRenderer;

    public CashierPanel() {
        initComponents();
        this.context = Context.getInstance();
        simpleTimer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                DateFormat dateFormat = new SimpleDateFormat("HH-mm-ss");
                Date date = new Date();
                String newTimeIs = dateFormat.format(date);
                timeLabel.setText(newTimeIs);
            }
        });
        simpleTimer.start();

        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        DateLable.setText(dateFormat.format(date));
        cashierIdLable.hide();
        this.renderer = (DefaultTableCellRenderer) orderDetailsTable.getTableHeader().getDefaultRenderer();
        renderer.setHorizontalAlignment(JLabel.CENTER);
        setListners();
        searchCombModel = new DefaultComboBoxModel();
        centerRenderer = new DefaultTableCellRenderer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        Close = new javax.swing.JLabel();
        Minimize = new javax.swing.JLabel();
        backGroundPanel = new javax.swing.JPanel();
        cashierQtyOnHandTxt = new javax.swing.JTextField();
        cashierDescriptionTxt = new javax.swing.JTextField();
        cashierBatchNametxt = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        cashierSearchResultCombo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cashierSearchByDescriptionTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cashierBarcodeTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cashierBatchExpDateTxt = new javax.swing.JTextField();
        casherPackSize = new javax.swing.JTextField();
        cashierBatchUnitPriceTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        batchIdTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cashierStoreDiscountTxt = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        cashierCompantyTxt = new javax.swing.JFormattedTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        cashierItemIDTxt = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        orderDetailsTable = new javax.swing.JTable();
        btn_put_To_Cart = new javax.swing.JButton();
        orderQtyTxt = new javax.swing.JFormattedTextField();
        btnPlaceOrder = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        subTotLable = new javax.swing.JLabel();
        disCountLable = new javax.swing.JLabel();
        grossTotalLable = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        givenMoneyTxt = new javax.swing.JFormattedTextField();
        balanceLable = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        btn_returnorder = new javax.swing.JButton();
        logOut = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        DateLable = new javax.swing.JLabel();
        cashierIdLable = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        MainPanel.setBackground(new java.awt.Color(255, 255, 255));
        MainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Close.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Close.setForeground(new java.awt.Color(51, 51, 51));
        Close.setText("X");
        Close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CloseMouseClicked(evt);
            }
        });
        MainPanel.add(Close, new org.netbeans.lib.awtextra.AbsoluteConstraints(1330, 10, 21, 40));

        Minimize.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Minimize.setForeground(new java.awt.Color(51, 51, 51));
        Minimize.setText("_");
        Minimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MinimizeMouseClicked(evt);
            }
        });
        MainPanel.add(Minimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(1290, 0, 19, 50));

        backGroundPanel.setBackground(new java.awt.Color(255, 255, 255));
        backGroundPanel.setForeground(new java.awt.Color(51, 51, 51));

        cashierQtyOnHandTxt.setEditable(false);
        cashierQtyOnHandTxt.setBackground(new java.awt.Color(255, 255, 255));
        cashierQtyOnHandTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cashierQtyOnHandTxt.setForeground(new java.awt.Color(51, 51, 51));
        cashierQtyOnHandTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashierQtyOnHandTxtKeyPressed(evt);
            }
        });

        cashierDescriptionTxt.setEditable(false);
        cashierDescriptionTxt.setBackground(new java.awt.Color(255, 255, 255));
        cashierDescriptionTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cashierDescriptionTxt.setForeground(new java.awt.Color(51, 51, 51));
        cashierDescriptionTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashierDescriptionTxtKeyPressed(evt);
            }
        });

        cashierBatchNametxt.setEditable(false);
        cashierBatchNametxt.setBackground(new java.awt.Color(255, 255, 255));
        cashierBatchNametxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cashierBatchNametxt.setForeground(new java.awt.Color(51, 51, 51));
        cashierBatchNametxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashierBatchNametxtKeyPressed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        cashierSearchResultCombo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cashierSearchResultCombo.setForeground(new java.awt.Color(51, 51, 51));
        cashierSearchResultCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashierSearchResultComboKeyPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Search Result");

        cashierSearchByDescriptionTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cashierSearchByDescriptionTxt.setForeground(new java.awt.Color(51, 51, 51));
        cashierSearchByDescriptionTxt.setRequestFocusEnabled(false);
        cashierSearchByDescriptionTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashierSearchByDescriptionTxtKeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Search By Description");

        cashierBarcodeTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cashierBarcodeTxt.setForeground(new java.awt.Color(51, 51, 51));
        cashierBarcodeTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashierBarcodeTxtKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Barcode");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addComponent(cashierBarcodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(12, 12, 12)
                .addComponent(cashierSearchByDescriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cashierSearchResultCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cashierSearchResultCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(cashierSearchByDescriptionTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cashierBarcodeTxt, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Description");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Qty On Hand");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setText("Unit Price");

        cashierBatchExpDateTxt.setEditable(false);
        cashierBatchExpDateTxt.setBackground(new java.awt.Color(255, 255, 255));
        cashierBatchExpDateTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cashierBatchExpDateTxt.setForeground(new java.awt.Color(51, 51, 51));
        cashierBatchExpDateTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashierBatchExpDateTxtKeyPressed(evt);
            }
        });

        casherPackSize.setEditable(false);
        casherPackSize.setBackground(new java.awt.Color(255, 255, 255));
        casherPackSize.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        casherPackSize.setForeground(new java.awt.Color(51, 51, 51));
        casherPackSize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                casherPackSizeKeyPressed(evt);
            }
        });

        cashierBatchUnitPriceTxt.setEditable(false);
        cashierBatchUnitPriceTxt.setBackground(new java.awt.Color(255, 255, 255));
        cashierBatchUnitPriceTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cashierBatchUnitPriceTxt.setForeground(new java.awt.Color(51, 51, 51));
        cashierBatchUnitPriceTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashierBatchUnitPriceTxtKeyPressed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Pack Size");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setText("EXP Date");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Batch");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setText("Batch ID");

        batchIdTxt.setEditable(false);
        batchIdTxt.setBackground(new java.awt.Color(255, 255, 255));
        batchIdTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        batchIdTxt.setForeground(new java.awt.Color(51, 51, 51));
        batchIdTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                batchIdTxtKeyPressed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(51, 51, 51));
        jLabel11.setText("Order Qty");

        cashierStoreDiscountTxt.setForeground(new java.awt.Color(51, 51, 51));
        cashierStoreDiscountTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0.00"))));
        cashierStoreDiscountTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cashierStoreDiscountTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cashierStoreDiscountTxtFocusGained(evt);
            }
        });
        cashierStoreDiscountTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashierStoreDiscountTxtKeyPressed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(51, 51, 51));
        jLabel12.setText("Store Discount");

        cashierCompantyTxt.setForeground(new java.awt.Color(51, 51, 51));
        cashierCompantyTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0.00"))));
        cashierCompantyTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cashierCompantyTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cashierCompantyTxtFocusGained(evt);
            }
        });
        cashierCompantyTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashierCompantyTxtKeyPressed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(51, 51, 51));
        jLabel13.setText("Company Discount");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(51, 51, 51));
        jLabel14.setText("Item ID");

        cashierItemIDTxt.setEditable(false);
        cashierItemIDTxt.setBackground(new java.awt.Color(255, 255, 255));
        cashierItemIDTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cashierItemIDTxt.setForeground(new java.awt.Color(51, 51, 51));
        cashierItemIDTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cashierItemIDTxtKeyPressed(evt);
            }
        });

        jScrollPane5.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        orderDetailsTable.setAutoCreateRowSorter(true);
        orderDetailsTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        orderDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Batch ID", "Batch", "Description", "Pack Size", "Company Discount", "Store Discount", "Unit Price", "Order Qty", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderDetailsTable.setFocusCycleRoot(true);
        orderDetailsTable.setGridColor(new java.awt.Color(255, 255, 255));
        orderDetailsTable.setRowHeight(28);
        orderDetailsTable.setSelectionBackground(new java.awt.Color(153, 153, 153));
        orderDetailsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                orderDetailsTableKeyPressed(evt);
            }
        });
        jScrollPane5.setViewportView(orderDetailsTable);

        btn_put_To_Cart.setBackground(new java.awt.Color(51, 51, 51));
        btn_put_To_Cart.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_put_To_Cart.setForeground(new java.awt.Color(255, 255, 255));
        btn_put_To_Cart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icomoon_e690(0)_32.png"))); // NOI18N
        btn_put_To_Cart.setText("Put to Cart");
        btn_put_To_Cart.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btn_put_To_CartFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btn_put_To_CartFocusLost(evt);
            }
        });
        btn_put_To_Cart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn_put_To_CartMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn_put_To_CartMouseExited(evt);
            }
        });
        btn_put_To_Cart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_put_To_CartActionPerformed(evt);
            }
        });

        orderQtyTxt.setForeground(new java.awt.Color(51, 51, 51));
        orderQtyTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        orderQtyTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        orderQtyTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                orderQtyTxtKeyPressed(evt);
            }
        });

        btnPlaceOrder.setBackground(new java.awt.Color(51, 51, 51));
        btnPlaceOrder.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnPlaceOrder.setForeground(new java.awt.Color(255, 255, 255));
        btnPlaceOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/FontAwesome_f046(0)_48.png"))); // NOI18N
        btnPlaceOrder.setText("Place order");
        btnPlaceOrder.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btnPlaceOrderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btnPlaceOrderFocusLost(evt);
            }
        });
        btnPlaceOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaceOrderActionPerformed(evt);
            }
        });
        btnPlaceOrder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnPlaceOrderKeyPressed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(51, 51, 51));
        jLabel15.setText("Gross Total    :");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(51, 51, 51));
        jLabel16.setText("Discounts                        :");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(51, 51, 51));
        jLabel17.setText("Sub Total                        :");

        subTotLable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        subTotLable.setForeground(new java.awt.Color(51, 51, 51));
        subTotLable.setText("0.00");

        disCountLable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        disCountLable.setForeground(new java.awt.Color(51, 51, 51));
        disCountLable.setText("0.00");

        grossTotalLable.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        grossTotalLable.setForeground(new java.awt.Color(204, 0, 0));
        grossTotalLable.setText("0.00");

        givenMoneyTxt.setForeground(new java.awt.Color(51, 51, 51));
        givenMoneyTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0.00"))));
        givenMoneyTxt.setText("0.00");
        givenMoneyTxt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        givenMoneyTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                givenMoneyTxtKeyPressed(evt);
            }
        });

        balanceLable.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        balanceLable.setForeground(new java.awt.Color(204, 0, 0));
        balanceLable.setText("0.00");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(51, 51, 51));
        jLabel20.setText("Balance        :");

        btn_returnorder.setBackground(new java.awt.Color(51, 51, 51));
        btn_returnorder.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_returnorder.setForeground(new java.awt.Color(255, 255, 255));
        btn_returnorder.setText("Return Order");
        btn_returnorder.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btn_returnorderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btn_returnorderFocusLost(evt);
            }
        });
        btn_returnorder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_returnorderActionPerformed(evt);
            }
        });
        btn_returnorder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btn_returnorderKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout backGroundPanelLayout = new javax.swing.GroupLayout(backGroundPanel);
        backGroundPanel.setLayout(backGroundPanelLayout);
        backGroundPanelLayout.setHorizontalGroup(
            backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(backGroundPanelLayout.createSequentialGroup()
                .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(backGroundPanelLayout.createSequentialGroup()
                        .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(backGroundPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel15))
                            .addGroup(backGroundPanelLayout.createSequentialGroup()
                                .addGap(107, 107, 107)
                                .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(disCountLable, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cashierQtyOnHandTxt)
                                            .addComponent(orderQtyTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                                            .addComponent(btn_put_To_Cart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(backGroundPanelLayout.createSequentialGroup()
                                            .addGap(102, 102, 102)
                                            .addComponent(subTotLable, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(backGroundPanelLayout.createSequentialGroup()
                                .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(backGroundPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(cashierBatchUnitPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cashierStoreDiscountTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(backGroundPanelLayout.createSequentialGroup()
                                            .addComponent(balanceLable, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnPlaceOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(backGroundPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(backGroundPanelLayout.createSequentialGroup()
                                                    .addComponent(cashierBatchNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(jLabel10)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(batchIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(backGroundPanelLayout.createSequentialGroup()
                                                    .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(cashierCompantyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(cashierBatchExpDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(jLabel14)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(cashierItemIDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                            .addComponent(jLabel12)
                            .addGroup(backGroundPanelLayout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(btn_returnorder, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(backGroundPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(backGroundPanelLayout.createSequentialGroup()
                                .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(18, 18, 18)
                                .addComponent(cashierDescriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(casherPackSize, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(jLabel9))
                            .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                                .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(givenMoneyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(backGroundPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(grossTotalLable, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, backGroundPanelLayout.createSequentialGroup()
                            .addGap(190, 190, 190)
                            .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1370, Short.MAX_VALUE))
            .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(backGroundPanelLayout.createSequentialGroup()
                    .addGap(189, 189, 189)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(1007, Short.MAX_VALUE)))
        );
        backGroundPanelLayout.setVerticalGroup(
            backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backGroundPanelLayout.createSequentialGroup()
                .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backGroundPanelLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cashierDescriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(cashierBatchNametxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(casherPackSize, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(batchIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cashierQtyOnHandTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(cashierBatchExpDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cashierBatchUnitPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel6)
                            .addComponent(jLabel14)
                            .addComponent(cashierItemIDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(orderQtyTxt)
                            .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel12)
                                .addComponent(cashierStoreDiscountTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel13)
                                .addComponent(cashierCompantyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn_returnorder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_put_To_Cart, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 348, Short.MAX_VALUE)
                        .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subTotLable, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(backGroundPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(backGroundPanelLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(givenMoneyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(backGroundPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(disCountLable, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(balanceLable, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnPlaceOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(grossTotalLable, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel20)))
                .addGap(0, 0, 0)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68))
            .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(backGroundPanelLayout.createSequentialGroup()
                    .addGap(228, 228, 228)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(217, Short.MAX_VALUE)))
            .addGroup(backGroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backGroundPanelLayout.createSequentialGroup()
                    .addContainerGap(710, Short.MAX_VALUE)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(58, 58, 58)))
        );

        MainPanel.add(backGroundPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 1370, 770));

        logOut.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        logOut.setForeground(new java.awt.Color(51, 51, 51));
        logOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/logOut_img.png"))); // NOI18N
        logOut.setText("LogOut");
        logOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                logOutMousePressed(evt);
            }
        });
        MainPanel.add(logOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 10, -1, 40));

        timeLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        timeLabel.setForeground(new java.awt.Color(51, 51, 51));
        MainPanel.add(timeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 20, 80, 20));

        DateLable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DateLable.setForeground(new java.awt.Color(51, 51, 51));
        MainPanel.add(DateLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 20, 120, 20));
        MainPanel.add(cashierIdLable, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 14, 50, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CloseMouseClicked
        System.exit(0);
    }//GEN-LAST:event_CloseMouseClicked

    private void MinimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MinimizeMouseClicked
        this.setState(Frame.ICONIFIED);
    }//GEN-LAST:event_MinimizeMouseClicked

    private void logOutMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logOutMousePressed
        new Welcome().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logOutMousePressed

    private void cashierStoreDiscountTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cashierStoreDiscountTxtFocusGained
        cashierStoreDiscountTxt.select(0, 1);
    }//GEN-LAST:event_cashierStoreDiscountTxtFocusGained

    private void cashierCompantyTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cashierCompantyTxtFocusGained
        cashierCompantyTxt.select(0, 1);
    }//GEN-LAST:event_cashierCompantyTxtFocusGained

    private void orderQtyTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orderQtyTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String val = orderQtyTxt.getText();
            String val2 = cashierQtyOnHandTxt.getText();
            if (!Validation.validateEmptyTextFeald(val2) && !Validation.validateEmptyTextFeald(val)) {
                boolean matches = val.matches("[0-9]+(\\.[0-9][0-9]?)?");
                if (matches) {
                    double orderQty = Double.parseDouble(val);
                    double availbleQty = Double.parseDouble(val2);
                    if (orderQty <= availbleQty) {
                        btn_put_To_Cart.doClick();
                    } else {
                        JOptionPane.showMessageDialog(this, "This Item Have Only '" + availbleQty + "' Qty In Stock...", "Warning No Such A Order Qty in Stock", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Accept only Numbers");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Search Item and Add buying Qty..");
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }

    }//GEN-LAST:event_orderQtyTxtKeyPressed

    private void btn_put_To_CartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_put_To_CartActionPerformed
        if (cashierBatchExpDateTxt.getBackground() == Color.RED) {
            JOptionPane.showMessageDialog(this, "This Item Expired...", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            String val = orderQtyTxt.getText();
            boolean v1 = Validation.validateEmptyTextFeald(val);
            if (!v1) {
                double orderQty = Double.parseDouble(val);
                if (orderQty > 0) {
                    putToCart();
                } else {
                    JOptionPane.showMessageDialog(this, "Please Enter Buying Quatity...");
                }
            }
        }
    }//GEN-LAST:event_btn_put_To_CartActionPerformed

    private void btn_put_To_CartFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btn_put_To_CartFocusGained
        setButtonStyle(btn_put_To_Cart);
    }//GEN-LAST:event_btn_put_To_CartFocusGained

    private void btn_put_To_CartFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btn_put_To_CartFocusLost
        reSetButtonStyle(btn_put_To_Cart);
    }//GEN-LAST:event_btn_put_To_CartFocusLost

    private void btn_put_To_CartMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_put_To_CartMouseEntered
        setButtonStyle(btn_put_To_Cart);
    }//GEN-LAST:event_btn_put_To_CartMouseEntered

    private void btn_put_To_CartMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_put_To_CartMouseExited
        reSetButtonStyle(btn_put_To_Cart);
    }//GEN-LAST:event_btn_put_To_CartMouseExited

    private void cashierSearchResultComboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashierSearchResultComboKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int index = cashierSearchResultCombo.getSelectedIndex();
            if (index >= 0) {
                Item i = (Item) searchCombModel.getElementAt(index);
                if (i != null) {
                    cashierBatchExpDateTxt.setBackground(Color.white);
                    cashierBatchExpDateTxt.setForeground(new Color(51, 51, 51));
                    ItemService itemService = (ItemService) context.getBean("ItemService");
                    cashierDescriptionTxt.setText(i.getDescription());
                    casherPackSize.setText(i.getPackSize());
                    cashierItemIDTxt.setText(i.getId() + "");
                    cashierStoreDiscountTxt.setText("0.00");
                    cashierCompantyTxt.setText("0.00");
                    try {
                        List<Batch> all = itemService.getItemsBatchesById(i.getId());
                        if (all != null) {
                            if (all.size() == 1) {
                                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                                Batch b = all.get(0);
                                cashierBatchUnitPriceTxt.setText(b.getUnitPrice() + "0");
                                cashierBatchNametxt.setText(b.getBatch());
                                cashierBatchExpDateTxt.setText(b.getEXPD() + "");
                                cashierQtyOnHandTxt.setText(b.getQtyOnHand() + "0");
                                batchIdTxt.setText(b.getId() + "");
                                orderQtyTxt.setEditable(true);
                                orderQtyTxt.setText("1.00");
                                orderQtyTxt.requestFocusInWindow();
                                orderQtyTxt.select(0, 1);
                                Date date2 = sdf.parse(b.getEXPD().toString());

                                Date date1 = sdf.parse(DateLable.getText());

                                if (date1.after(date2)) {
                                    cashierBatchExpDateTxt.setBackground(Color.RED);
                                    cashierBatchExpDateTxt.setForeground(Color.white);
                                } else if (date2.equals(date1)) {
                                    cashierBatchExpDateTxt.setBackground(Color.RED);
                                    cashierBatchExpDateTxt.setForeground(Color.white);
                                } else {
                                    cashierBatchExpDateTxt.setBackground(Color.white);
                                    cashierBatchExpDateTxt.setForeground(new Color(51, 51, 51));
                                }
                            }
                            if (all.size() > 1) {
                                AvailableBatchesFrame a = new AvailableBatchesFrame();
                                a.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                                a.setCashierPanelObject(this, all);
                                a.setVisible(true);
                            }
                        }

                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex);
                        Logger.getLogger(CashierPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }
    }//GEN-LAST:event_cashierSearchResultComboKeyPressed

    private void cashierStoreDiscountTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashierStoreDiscountTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String val = orderQtyTxt.getText();
            String val2 = cashierQtyOnHandTxt.getText();
            if (!Validation.validateEmptyTextFeald(val2) && !Validation.validateEmptyTextFeald(val)) {
                boolean matches = val.matches("[0-9]+(\\.[0-9][0-9]?)?");
                if (matches) {
                    double orderQty = Double.parseDouble(val);
                    double availbleQty = Double.parseDouble(val2);
                    if (orderQty <= availbleQty) {
                        btn_put_To_Cart.doClick();
                    } else {
                        JOptionPane.showMessageDialog(this, "This Item Have Only '" + availbleQty + "' Qty In Stock...", "Warning No Such A Order Qty in Stock", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Accept only Numbers");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Search Item and Add buying Qty..");
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }
    }//GEN-LAST:event_cashierStoreDiscountTxtKeyPressed

    private void cashierCompantyTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashierCompantyTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String val = orderQtyTxt.getText();
            String val2 = cashierQtyOnHandTxt.getText();
            if (!Validation.validateEmptyTextFeald(val2) && !Validation.validateEmptyTextFeald(val)) {
                boolean matches = val.matches("[0-9]+(\\.[0-9][0-9]?)?");
                if (matches) {
                    double orderQty = Double.parseDouble(val);
                    double availbleQty = Double.parseDouble(val2);
                    if (orderQty <= availbleQty) {
                        btn_put_To_Cart.doClick();
                    } else {
                        JOptionPane.showMessageDialog(this, "This Item Have Only '" + availbleQty + "' Qty In Stock...", "Warning No Such A Order Qty in Stock", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Accept only Numbers");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Search Item and Add buying Qty..");
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }
    }//GEN-LAST:event_cashierCompantyTxtKeyPressed

    private void orderDetailsTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orderDetailsTableKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            int row = orderDetailsTable.getSelectedRow();
            if (row != -1) {
                DefaultTableModel m = (DefaultTableModel) orderDetailsTable.getModel();
                m.removeRow(row);
                orderDetailsTable.setModel(m);
                setGrossTotal();
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }

    }//GEN-LAST:event_orderDetailsTableKeyPressed

    private void btnPlaceOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaceOrderActionPerformed
        placeOrder();
    }//GEN-LAST:event_btnPlaceOrderActionPerformed

    private void btnPlaceOrderKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnPlaceOrderKeyPressed
        DefaultTableModel m = (DefaultTableModel) orderDetailsTable.getModel();
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (m.getRowCount() != -1) {
                placeOrder();
            } else {
                JOptionPane.showMessageDialog(this, "No Such a Order Details Found..");
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }
        if (m.getRowCount() != -1) {
            placeOrder();
        } else {
            JOptionPane.showMessageDialog(this, "No Such a Order Details Found..");
        }
    }//GEN-LAST:event_btnPlaceOrderKeyPressed

    private void cashierBarcodeTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashierBarcodeTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
    }//GEN-LAST:event_cashierBarcodeTxtKeyPressed

    private void cashierSearchByDescriptionTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashierSearchByDescriptionTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }
    }//GEN-LAST:event_cashierSearchByDescriptionTxtKeyPressed

    private void cashierDescriptionTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashierDescriptionTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }
    }//GEN-LAST:event_cashierDescriptionTxtKeyPressed

    private void casherPackSizeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_casherPackSizeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }
    }//GEN-LAST:event_casherPackSizeKeyPressed

    private void cashierBatchNametxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashierBatchNametxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }
    }//GEN-LAST:event_cashierBatchNametxtKeyPressed

    private void batchIdTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_batchIdTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }
    }//GEN-LAST:event_batchIdTxtKeyPressed

    private void cashierItemIDTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashierItemIDTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }
    }//GEN-LAST:event_cashierItemIDTxtKeyPressed

    private void cashierBatchExpDateTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashierBatchExpDateTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }
    }//GEN-LAST:event_cashierBatchExpDateTxtKeyPressed

    private void cashierBatchUnitPriceTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashierBatchUnitPriceTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }
    }//GEN-LAST:event_cashierBatchUnitPriceTxtKeyPressed

    private void cashierQtyOnHandTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashierQtyOnHandTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }
    }//GEN-LAST:event_cashierQtyOnHandTxtKeyPressed

    private void btnPlaceOrderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnPlaceOrderFocusGained
        btnPlaceOrder.setBackground(new Color(30, 113, 69));
    }//GEN-LAST:event_btnPlaceOrderFocusGained

    private void btnPlaceOrderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btnPlaceOrderFocusLost
        btnPlaceOrder.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_btnPlaceOrderFocusLost

    private void givenMoneyTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_givenMoneyTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!grossTotalLable.getText().equalsIgnoreCase("0.00")) {
                btnPlaceOrder.doClick();
            } else {
                JOptionPane.showMessageDialog(this, "No Such Item In Cart..");
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
    }//GEN-LAST:event_givenMoneyTxtKeyPressed

    private void btn_returnorderKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btn_returnorderKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            ReturnOrderFrame r = new ReturnOrderFrame();
            r.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            r.setVisible(true);
        }
        if (evt.getKeyCode() == KeyEvent.VK_F12) {
            btn_returnorder.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            cashdrawerOpen();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            givenMoneyTxt.requestFocusInWindow();
            givenMoneyTxt.select(0, 1);
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            cashierBarcodeTxt.selectAll();
            cashierBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            orderDetailsTable.requestFocusInWindow();
        }
    }//GEN-LAST:event_btn_returnorderKeyPressed

    private void btn_returnorderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btn_returnorderFocusGained
        btn_returnorder.setBackground(Color.WHITE);
        btn_returnorder.setForeground(Color.BLACK);
    }//GEN-LAST:event_btn_returnorderFocusGained

    private void btn_returnorderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btn_returnorderFocusLost
        btn_returnorder.setBackground(new Color(51, 51, 51));
        btn_returnorder.setForeground(Color.white);
    }//GEN-LAST:event_btn_returnorderFocusLost

    private void btn_returnorderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_returnorderActionPerformed
        ReturnOrderFrame r = new ReturnOrderFrame();
        r.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        r.setVisible(true);
    }//GEN-LAST:event_btn_returnorderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CashierPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CashierPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CashierPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CashierPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CashierPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Close;
    private javax.swing.JLabel DateLable;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JLabel Minimize;
    private javax.swing.JPanel backGroundPanel;
    private javax.swing.JLabel balanceLable;
    private javax.swing.JTextField batchIdTxt;
    private javax.swing.JButton btnPlaceOrder;
    private javax.swing.JButton btn_put_To_Cart;
    private javax.swing.JButton btn_returnorder;
    private javax.swing.JTextField casherPackSize;
    private javax.swing.JTextField cashierBarcodeTxt;
    private javax.swing.JTextField cashierBatchExpDateTxt;
    private javax.swing.JTextField cashierBatchNametxt;
    private javax.swing.JTextField cashierBatchUnitPriceTxt;
    private javax.swing.JFormattedTextField cashierCompantyTxt;
    private javax.swing.JTextField cashierDescriptionTxt;
    private javax.swing.JLabel cashierIdLable;
    private javax.swing.JTextField cashierItemIDTxt;
    private javax.swing.JTextField cashierQtyOnHandTxt;
    private javax.swing.JTextField cashierSearchByDescriptionTxt;
    private javax.swing.JComboBox<String> cashierSearchResultCombo;
    private javax.swing.JFormattedTextField cashierStoreDiscountTxt;
    private javax.swing.JLabel disCountLable;
    private javax.swing.JFormattedTextField givenMoneyTxt;
    private javax.swing.JLabel grossTotalLable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel logOut;
    private javax.swing.JTable orderDetailsTable;
    private javax.swing.JFormattedTextField orderQtyTxt;
    private javax.swing.JLabel subTotLable;
    private javax.swing.JLabel timeLabel;
    // End of variables declaration//GEN-END:variables

    public void setCashierID(int cashierId) {
        cashierIdLable.setText(cashierId + "");

    }

    public void setSelectedBatchDetails(BatchDTO b) {
        cashierBatchUnitPriceTxt.setText(b.getUnitPrice() + "0");
        cashierBatchNametxt.setText(b.getBatch());
        cashierBatchExpDateTxt.setText(b.getEXPD() + "");
        cashierQtyOnHandTxt.setText(b.getQtyOnHand() + "0");
        batchIdTxt.setText(b.getId() + "");
        orderQtyTxt.setEditable(true);
        orderQtyTxt.setText("1.00");
        orderQtyTxt.requestFocusInWindow();
        orderQtyTxt.select(0, 1);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            Date date1 = sdf.parse(DateLable.getText());
            Date date2 = sdf.parse(b.getEXPD().toString());
            if (date1.after(date2)) {
                cashierBatchExpDateTxt.setBackground(Color.RED);
                cashierBatchExpDateTxt.setForeground(Color.white);
            } else if (date2.equals(date1)) {
                cashierBatchExpDateTxt.setBackground(Color.RED);
                cashierBatchExpDateTxt.setForeground(Color.white);
            } else {
                cashierBatchExpDateTxt.setBackground(Color.white);
                cashierBatchExpDateTxt.setForeground(new Color(51, 51, 51));
            }

        } catch (ParseException ex) {
            Logger.getLogger(CashierPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex);
        }

    }

    private void setListners() {
        givenMoneyTxt.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                setBalance();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                setBalance();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                setBalance();
            }
        });

        cashierSearchByDescriptionTxt.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                warn5();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                warn5();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                warn5();
            }
        });
        cashierBarcodeTxt.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                warn4();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                warn4();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                warn4();
            }
        });
    }

    private void warn5() {
        String description = cashierSearchByDescriptionTxt.getText();
        boolean v1 = Validation.validateEmptyTextFeald(description);
        if (!v1) {
            ItemService itemService = (ItemService) context.getBean("ItemService");
            try {
                List<Item> like = itemService.getItemsByDescriptionLike(description);
                if (like != null) {
                    cashierSearchResultCombo.removeAllItems();
                    searchCombModel.removeAllElements();
                    for (Item i : like) {
                        cashierSearchResultCombo.addItem(i.getDescription());
                        searchCombModel.addElement(i);
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(CashierPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex);
            }
        } else {
            cashierDescriptionTxt.setText("");
            casherPackSize.setText("");
            cashierItemIDTxt.setText("");
            cashierStoreDiscountTxt.setText("");
            cashierCompantyTxt.setText("");
            cashierBatchUnitPriceTxt.setText("");
            cashierBatchNametxt.setText("");
            cashierBatchExpDateTxt.setText("");
            cashierQtyOnHandTxt.setText("");
            batchIdTxt.setText("");
            orderQtyTxt.setEditable(false);
            orderQtyTxt.setText("");
            cashierBarcodeTxt.requestFocusInWindow();
        }

    }

    private void warn4() {
        String val = cashierBarcodeTxt.getText();
        cashierBatchExpDateTxt.setBackground(Color.white);
        cashierBatchExpDateTxt.setForeground(new Color(51, 51, 51));
        boolean v1 = Validation.validateEmptyTextFeald(val);
        if (!v1) {
            ItemService itemService = (ItemService) context.getBean("ItemService");
            try {
                Item itemByBarcode = itemService.getItemByBarcode(val);
                if (itemByBarcode != null) {
                    cashierDescriptionTxt.setText(itemByBarcode.getDescription());
                    casherPackSize.setText(itemByBarcode.getPackSize());
                    cashierItemIDTxt.setText(itemByBarcode.getId() + "");
                    cashierStoreDiscountTxt.setText("0.00");
                    cashierCompantyTxt.setText("0.00");
                    List<Batch> all = itemService.getItemsBatchesById(itemByBarcode.getId());
                    if (all != null) {
                        if (all.size() > 1) {
                            AvailableBatchesFrame a = new AvailableBatchesFrame();
                            a.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                            a.setCashierPanelObject(this, all);
                            a.setVisible(true);
                        }
                        if (all.size() == 1) {
                            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                            Batch b = all.get(0);
                            cashierBatchUnitPriceTxt.setText(b.getUnitPrice() + "0");
                            cashierBatchNametxt.setText(b.getBatch());
                            cashierBatchExpDateTxt.setText(b.getEXPD() + "");
                            cashierQtyOnHandTxt.setText(b.getQtyOnHand() + "0");
                            batchIdTxt.setText(b.getId() + "");
                            orderQtyTxt.setEditable(true);
                            orderQtyTxt.setText("1.00");
                            orderQtyTxt.requestFocusInWindow();
                            orderQtyTxt.select(0, 1);
                            Date date2 = sdf.parse(b.getEXPD().toString());

                            Date date1 = sdf.parse(DateLable.getText());

                            if (date1.after(date2)) {
                                cashierBatchExpDateTxt.setBackground(Color.RED);
                                cashierBatchExpDateTxt.setForeground(Color.white);
                            } else if (date2.equals(date1)) {
                                cashierBatchExpDateTxt.setBackground(Color.RED);
                                cashierBatchExpDateTxt.setForeground(Color.white);
                            } else {
                                cashierBatchExpDateTxt.setBackground(Color.white);
                                cashierBatchExpDateTxt.setForeground(new Color(51, 51, 51));
                            }
                        }
                    }
                } else {
                    cashierDescriptionTxt.setText("");
                    casherPackSize.setText("");
                    cashierItemIDTxt.setText("");
                    cashierStoreDiscountTxt.setText("");
                    cashierCompantyTxt.setText("");
                    cashierBatchUnitPriceTxt.setText("");
                    cashierBatchNametxt.setText("");
                    cashierBatchExpDateTxt.setText("");
                    cashierQtyOnHandTxt.setText("");
                    batchIdTxt.setText("");
                    orderQtyTxt.setEditable(false);
                    cashierBarcodeTxt.requestFocusInWindow();
                }
            } catch (Exception ex) {
                Logger.getLogger(CashierPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex);
            }
        } else {
            cashierDescriptionTxt.setText("");
            casherPackSize.setText("");
            cashierItemIDTxt.setText("");
            cashierStoreDiscountTxt.setText("");
            cashierCompantyTxt.setText("");
            cashierBatchUnitPriceTxt.setText("");
            cashierBatchNametxt.setText("");
            cashierBatchExpDateTxt.setText("");
            cashierQtyOnHandTxt.setText("");
            batchIdTxt.setText("");
            orderQtyTxt.setEditable(false);
            cashierBarcodeTxt.requestFocusInWindow();
        }
    }

    private void setButtonStyle(JButton b) {
        b.setBackground(new Color(102, 102, 102));
    }

    private void reSetButtonStyle(JButton b) {
        b.setBackground(new Color(51, 51, 51));
    }

    private void putToCart() {
        DefaultTableModel m = (DefaultTableModel) orderDetailsTable.getModel();
        String stringBatchId = batchIdTxt.getText();
        String stringBatchName = cashierBatchNametxt.getText();
        String stringDescription = cashierDescriptionTxt.getText();
        String stringPackSize = casherPackSize.getText();
        String stringCompanyDis = cashierCompantyTxt.getText();
        String stringStoreDis = cashierStoreDiscountTxt.getText();
        String stringUnitPrice = cashierBatchUnitPriceTxt.getText();
        String stringOrderQty = orderQtyTxt.getText();
        String stringQtyOnHand = cashierQtyOnHandTxt.getText();
        boolean v1 = Validation.validateEmptyTextFeald(stringBatchId);
        boolean v2 = Validation.validateEmptyTextFeald(stringBatchName);
        boolean v3 = Validation.validateEmptyTextFeald(stringDescription);
        boolean v4 = Validation.validateEmptyTextFeald(stringPackSize);
        boolean v5 = Validation.validateEmptyTextFeald(stringCompanyDis);
        boolean v6 = Validation.validateEmptyTextFeald(stringStoreDis);
        boolean v7 = Validation.validateEmptyTextFeald(stringUnitPrice);
        boolean v8 = Validation.validateEmptyTextFeald(stringOrderQty);
        if (!v1) {
            if (v5) {
                stringCompanyDis = "0.00";
            }
            if (v6) {
                stringStoreDis = "0.00";
            }
            int rowCount = m.getRowCount();
            boolean found = false;
            for (int i = rowCount - 1; i >= 0; i--) {
                Object value = m.getValueAt(i, 0);
                String valueOfBatchInCart = value.toString();
                if (valueOfBatchInCart.equalsIgnoreCase(stringBatchId)) {
                    found = true;
                    Object valueAt7Column = m.getValueAt(i, 7);
                    Object valueAt4Column = m.getValueAt(i, 4);
                    Object valueAt5Column = m.getValueAt(i, 5);
                    String stringOldCompanyDiscount = valueAt4Column.toString();
                    String stringOldStoreDiscont = valueAt5Column.toString();
                    String stringOrderedQty = valueAt7Column.toString();
                    double oldStoreDis = Double.parseDouble(stringOldStoreDiscont);
                    double oldComDis = Double.parseDouble(stringOldCompanyDiscount);
                    double orderedQty = Double.parseDouble(stringOrderedQty);
                    double orderQty = Double.parseDouble(stringOrderQty);
                    double result = orderedQty + orderQty;
                    if (result <= Double.parseDouble(stringQtyOnHand)) {
                        double unitPrice = Double.parseDouble(stringUnitPrice);
                        double newComDis = Double.parseDouble(stringCompanyDis);
                        double newStoreDis = Double.parseDouble(stringStoreDis);
                        double valueOFUpdated = unitPrice * result;
                        double updatedComDis = oldComDis + newComDis;
                        double updateStoreDis = oldStoreDis + newStoreDis;
                        double totDis = updateStoreDis + updatedComDis;
                        double subTot = valueOFUpdated - totDis;
                        m.setValueAt(subTot + "0", i, 8);
                        m.setValueAt(updateStoreDis + "0", i, 5);
                        m.setValueAt(updatedComDis + "0", i, 4);
                        m.setValueAt(result + "0", i, 7);
                    } else {
                        JOptionPane.showMessageDialog(this, "This Item Have Only '" + stringQtyOnHand + "' Qty In Stock...", "Warning No Such A Order Qty in Stock", JOptionPane.WARNING_MESSAGE);
                    }

                }
            }
            if (!found) {
                double companyDis = Double.parseDouble(stringCompanyDis);
                double storeDis = Double.parseDouble(stringStoreDis);
                double unitPrice = Double.parseDouble(stringUnitPrice);
                double oQty = Double.parseDouble(stringOrderQty);
                double totDis = companyDis + storeDis;
                double total = (unitPrice * oQty) - totDis;
                m.addRow(new Object[]{
                    stringBatchId,
                    stringBatchName,
                    stringDescription,
                    stringPackSize,
                    stringCompanyDis,
                    stringStoreDis,
                    stringUnitPrice,
                    stringOrderQty,
                    total + "0"
                });
            }

            centerRenderer.setHorizontalAlignment(JLabel.CENTER);
            orderDetailsTable.setDefaultRenderer(String.class, centerRenderer);
            orderDetailsTable.setModel(m);
            setGrossTotal();
            cashierDescriptionTxt.setText("");
            casherPackSize.setText("");
            cashierItemIDTxt.setText("");
            cashierStoreDiscountTxt.setText("");
            cashierCompantyTxt.setText("");
            cashierBatchUnitPriceTxt.setText("");
            cashierBatchNametxt.setText("");
            cashierBatchExpDateTxt.setText("");
            cashierQtyOnHandTxt.setText("");
            batchIdTxt.setText("");
            orderQtyTxt.setText("");
            cashierBarcodeTxt.setText("");
            cashierBarcodeTxt.requestFocusInWindow();
        } else {
            JOptionPane.showMessageDialog(this, "Please Search Item First..");
        }

    }

    public PageFormat getPageFormat(PrinterJob pj, double middle) {

        PageFormat pf = pj.defaultPage();
        Paper paper = pf.getPaper();

        double middleHeight = middle;
        double headerHeight = 1.0;
        double footerHeight = 3.0;
        double width = convert_CM_To_PPI(8);      //printer know only point per inch.default value is 72ppi
        double height = convert_CM_To_PPI(headerHeight + middleHeight + footerHeight);
        paper.setSize(width, height);
        paper.setImageableArea(
                0,
                10,
                width,
                height - convert_CM_To_PPI(1)
        );   //define boarder size    after that print area width is about 180 points

        pf.setOrientation(PageFormat.PORTRAIT);           //select orientation portrait or landscape but for this time portrait
        pf.setPaper(paper);

        return pf;
    }

    protected static double convert_CM_To_PPI(double cm) {
        return toPPI(cm * 0.393600787);
    }

    protected static double toPPI(double inch) {
        return inch * 72d;
    }

    public void printBill(double numOfItems, OrderDTO o) {
        double height = numOfItems * 6;
        PrinterJob pj = PrinterJob.getPrinterJob();
        pj.setPrintable(new BillPrintable(o), getPageFormat(pj, height));
        try {
            pj.print();

        } catch (PrinterException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex);
        }
    }

    private void setGrossTotal() {
        DefaultTableModel m = (DefaultTableModel) orderDetailsTable.getModel();
        int rowCount = m.getRowCount();
        if (rowCount == -1) {
            subTotLable.setText("0.00");
            disCountLable.setText("0.00");
            grossTotalLable.setText("0.00");
            balanceLable.setText("0.00");
        } else {
            double grossTot = 0.00;
            double subDis = 0.00;
            double subTot = 0.00;
            for (int i = rowCount - 1; i >= 0; i--) {
                Object valueAt6 = m.getValueAt(i, 6);
                Object valueAt7 = m.getValueAt(i, 7);
                Object valueAt4 = m.getValueAt(i, 4);
                Object valueAt5 = m.getValueAt(i, 5);
                Object valueAt8 = m.getValueAt(i, 8);
                String stringUnit = valueAt6.toString();
                String stringOqty = valueAt7.toString();
                String stringComDis = valueAt4.toString();
                String stringStoreDis = valueAt5.toString();
                String stringTot = valueAt8.toString();
                double unitPrice = Double.parseDouble(stringUnit);
                double orderQty = Double.parseDouble(stringOqty);
                double storeDis = Double.parseDouble(stringStoreDis);
                double comDis = Double.parseDouble(stringComDis);
                double totDis = storeDis + comDis;
                double result = unitPrice * orderQty;
                subTot = subTot + result;
                subDis = subDis + totDis;
                grossTot = grossTot + Double.parseDouble(stringTot);
            }
            subTotLable.setText(subTot + "0");
            disCountLable.setText(subDis + "0");
            grossTotalLable.setText(grossTot + "0");
        }
    }

    private void setBalance() {
        String gross = grossTotalLable.getText();
        if (gross.equalsIgnoreCase("0.00")) {

        } else {
            String v1 = givenMoneyTxt.getText();
            boolean matches = v1.matches("[0-9]+(\\.[0-9][0-9]?)?");
            if (matches) {
                boolean value = Validation.validateEmptyTextFeald(v1);
                if (!value) {
                    double grossTot = Double.parseDouble(gross);
                    double givenMoney = Double.parseDouble(v1);
                    double balance = givenMoney - grossTot;
                    balanceLable.setText(balance + "0");
                } else {
                    balanceLable.setText("0.00");
                }
            }
        }
    }

    private void placeOrder() {
        try {
            BatchService batchService = (BatchService) context.getBean("BatchService");
            OrderService orderService = (OrderService) context.getBean("OrderService");
            String c = cashierIdLable.getText();
            String d = DateLable.getText();
            String time = timeLabel.getText();
            double total = Double.parseDouble(subTotLable.getText());
            double subTotal = Double.parseDouble(grossTotalLable.getText());
            double discounts = Double.parseDouble(disCountLable.getText());
            LocalDate orderDate = new LocalDate(d);
            int cashierId = Integer.parseInt(c);
            OrderDTO orderDTO = new OrderDTO();
            orderDTO.setDate(orderDate);
            orderDTO.setTime(time);
            orderDTO.setTotal(total);
            orderDTO.setSubTot(subTotal);
            orderDTO.setDiscounts(discounts);
            orderDTO.setCashierId(cashierId);
            double numOfItems = 0.00;

            Set<OrderDetails> all = new HashSet<OrderDetails>();
            DefaultTableModel m = (DefaultTableModel) orderDetailsTable.getModel();
            int rowCount = m.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                numOfItems = numOfItems + 1.00;
                OrderDetails o = new OrderDetails();
                Object valueAt0 = m.getValueAt(i, 0);
                Object valueAt2 = m.getValueAt(i, 2);
                Object valueAt3 = m.getValueAt(i, 3);
                Object valueAt4 = m.getValueAt(i, 4);
                Object valueAt5 = m.getValueAt(i, 5);
                Object valueAt6 = m.getValueAt(i, 6);
                Object valueAt7 = m.getValueAt(i, 7);
                String stringOrderQty = valueAt7.toString();
                String stringBatchID = valueAt0.toString();
                String description = valueAt2.toString();
                String packSize = valueAt3.toString();
                String stringComDis = valueAt4.toString();
                String stringStoreDis = valueAt5.toString();
                String stringUnit = valueAt6.toString();
                double companyDiscount = Double.parseDouble(stringComDis);
                double discount = Double.parseDouble(stringStoreDis);
                double orderQty = Double.parseDouble(stringOrderQty);
                int batchId = Integer.parseInt(stringBatchID);
                try {
                    BatchDTO search = batchService.search(batchId);
                    Batch b = new Batch();
                    b.setBatch(search.getBatch());
                    b.setId(search.getId());
                    b.setEXPD(search.getEXPD());
                    b.setMFD(search.getMFD());
                    b.setQtyOnHand(search.getQtyOnHand());
                    b.setUnitPrice(search.getUnitPrice());
                    o.setComDiscount(companyDiscount);
                    o.setDescription(description);
                    o.setOrderOTY(orderQty);
                    o.setBatch(b);
                    o.setPackSize(packSize);
                    o.setUnitPrice(Double.parseDouble(stringUnit));
                    o.setDiscount(discount);
                    all.add(o);
                } catch (Exception ex) {
                    Logger.getLogger(CashierPanel.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, ex);
                }
            }
            orderDTO.setOrderDetails(all);
            int addOrder = orderService.addOrder(orderDTO);
            if (addOrder != -1) {
                orderDTO.setId(addOrder);
                printBill(numOfItems, orderDTO);
                JOptionPane.showMessageDialog(this, "Order Place Successfully.....\n Balance is = " + balanceLable.getText());
                cancelOrder();

            } else {
                JOptionPane.showMessageDialog(this, "Order Added Faild..");
            }
        } catch (Exception ex) {
            Logger.getLogger(CashierPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex);
        }

    }

    private void cancelOrder() {
        DefaultTableModel m = (DefaultTableModel) orderDetailsTable.getModel();
        int rowCount = m.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            m.removeRow(i);
        }
        setGrossTotal();
        balanceLable.setText("0.00");
        givenMoneyTxt.setText("0.00");
        cashierBarcodeTxt.setText("");
        cashierDescriptionTxt.setText("");
        casherPackSize.setText("");
        cashierItemIDTxt.setText("");
        cashierStoreDiscountTxt.setText("");
        cashierCompantyTxt.setText("");
        cashierBatchUnitPriceTxt.setText("");
        cashierBatchNametxt.setText("");
        cashierBatchExpDateTxt.setText("");
        cashierQtyOnHandTxt.setText("");
        batchIdTxt.setText("");
        cashierBarcodeTxt.requestFocusInWindow();
    }

    public void cashdrawerOpen() {

        byte[] open = {27, 112, 48, 55, 121};
        String printer = "EPSON TM-T82 Receipt";
        PrintServiceAttributeSet printserviceattributeset = new HashPrintServiceAttributeSet();
        printserviceattributeset.add(new PrinterName(printer, null));
        PrintService[] printservice = PrintServiceLookup.lookupPrintServices(null, printserviceattributeset);
        if (printservice.length != 1) {
            JOptionPane.showMessageDialog(this, "Please Check Your Printer ON And Also Check Control Panel Default Printer");
        }
        PrintService pservice = printservice[0];
        DocPrintJob job = pservice.createPrintJob();
        DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
        Doc doc = new SimpleDoc(open, flavor, null);
        PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();
        try {
            job.print(doc, aset);
        } catch (PrintException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }
    }
}
