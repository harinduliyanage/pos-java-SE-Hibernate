/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.alpha.view;

import com.alpha.config.Context;
import com.alpha.dto.BatchDTO;
import com.alpha.dto.GrnDTO;
import com.alpha.dto.GrnDetailsDTO;
import com.alpha.dto.ItemDTO;
import com.alpha.dto.ReOrderLevelItemDTO;
import com.alpha.dto.UserDTO;
import com.alpha.model.Batch;
import com.alpha.model.Item;
import com.alpha.model.Orders;
import com.alpha.service.custom.BatchService;
import com.alpha.service.custom.GrnService;
import com.alpha.service.custom.ItemService;
import com.alpha.service.custom.OrderService;
import com.alpha.service.custom.UserService;
import com.alpha.utils.DBBackUps;
import com.alpha.utils.Validation;
import java.awt.Color;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.joda.time.LocalDate;
import org.springframework.context.support.AbstractApplicationContext;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;

/**
 *
 * @author Harindu.sul
 */
public class AdminPanel extends javax.swing.JFrame {

    /**
     * Creates new form Sign_In_Form
     */
    @Autowired
    private Environment environment;
    Timer simpleTimer;
    private AbstractApplicationContext context;
    private DefaultListModel listModelForBatch;
    private DefaultListModel listModelForBatchObjects;
    private DefaultListModel listModel2;
    private DefaultListModel listModel3;
    private DefaultListModel listModel4;
    private DefaultComboBoxModel searchCombModel;
    private DefaultTableCellRenderer centerRenderer;
    private String path;

    public AdminPanel() {
        initComponents();
        this.context = Context.getInstance();
        this.listModelForBatch = new DefaultListModel();
        this.listModelForBatchObjects = new DefaultListModel();
        this.searchCombModel = new DefaultComboBoxModel();
        this.listModel2 = new DefaultListModel();
        this.listModel3 = new DefaultListModel();
        this.listModel4 = new DefaultListModel();
        this.centerRenderer = new DefaultTableCellRenderer();
        this.path = "";

        validDateFomatLable1.hide();
        validDateFormatLable2.hide();
        simpleTimer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                DateFormat dateFormat = new SimpleDateFormat("HH-mm-ss");
                Date date = new Date();
                String newTimeIs = dateFormat.format(date);
                timeLabel.setText(newTimeIs);
            }
        });
        simpleTimer.start();

        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        DateLable.setText(dateFormat.format(date));
        setDocumetListner();
        setTodayTranstction();
        setReOrderLevelItems();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    int xx, yy;
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        sidePanel = new javax.swing.JPanel();
        btn_Home = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btn_Accounts = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        btn_Item = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btn_Reports = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        btn_ReorderLevel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        btn_GRN = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        btn_Returns = new javax.swing.JPanel();
        jLabel92 = new javax.swing.JLabel();
        btn_BackUpPanel = new javax.swing.JPanel();
        jLabel109 = new javax.swing.JLabel();
        headerPanel = new javax.swing.JPanel();
        navigationLable = new javax.swing.JLabel();
        todayTransactioLable = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        timeLabel = new javax.swing.JLabel();
        DateLable = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        viewPanel = new javax.swing.JPanel();
        homeViewPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        toDayTransactionTable = new javax.swing.JTable();
        jLabel105 = new javax.swing.JLabel();
        jLabel106 = new javax.swing.JLabel();
        jLabel107 = new javax.swing.JLabel();
        totalLable = new javax.swing.JLabel();
        givenDiscountLable = new javax.swing.JLabel();
        todayIncomeLable = new javax.swing.JLabel();
        ItemViewPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        addItembarcodeTxt = new javax.swing.JTextField();
        addItemdescriptionTxt = new javax.swing.JTextField();
        addItempackSizeTxt = new javax.swing.JTextField();
        addItemreOrderLevelTxt = new javax.swing.JTextField();
        btnAddItemForDB = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        labelMFFDD = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        addItemBatchTxt = new javax.swing.JTextField();
        itemSubMenuPanel = new javax.swing.JPanel();
        btnDeleteItemonItem = new javax.swing.JPanel();
        jLabel53 = new javax.swing.JLabel();
        btnAddNewItem = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        addBatch = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        btnViewAllItems = new javax.swing.JPanel();
        jLabel52 = new javax.swing.JLabel();
        btnUpdateItem1 = new javax.swing.JPanel();
        jLabel54 = new javax.swing.JLabel();
        addItemEXPDateTxt = new javax.swing.JFormattedTextField();
        addItemMFDTxt = new javax.swing.JFormattedTextField();
        addItemQtyOnHandTxt = new javax.swing.JFormattedTextField();
        addItemUnitPriceTxt = new javax.swing.JFormattedTextField();
        validDateFomatLable1 = new javax.swing.JLabel();
        validDateFormatLable2 = new javax.swing.JLabel();
        BatchViewPanel = new javax.swing.JPanel();
        itemSubMenuPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel56 = new javax.swing.JLabel();
        btnAddNewItem1 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        btnAddNewBatchForItem1 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        btnBatchONViewAllItem = new javax.swing.JPanel();
        jLabel55 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel57 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        searchByBarcodeTxtForBatch = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        avalableBatchList = new javax.swing.JList<>();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jlabeljhjha = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel34 = new javax.swing.JLabel();
        searchByDescriptionForBatchCombo = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        onBatchItemIdTxt = new javax.swing.JTextField();
        onBatchBarcodeTxt = new javax.swing.JTextField();
        onbatchDescriptionTxt = new javax.swing.JTextField();
        onBatchPackSizeTxt = new javax.swing.JTextField();
        onBatchReOrderLevelTxt = new javax.swing.JTextField();
        onBatchBatchIdtxt = new javax.swing.JTextField();
        onBatchBatchItemIdtxt = new javax.swing.JTextField();
        onBatchBatchtxt = new javax.swing.JTextField();
        onBatchBatchEXPtxt = new javax.swing.JTextField();
        onBatchBatchQtyOnHandtxt = new javax.swing.JTextField();
        onBatchBatchUnitPricetxt = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        onBatchBatchMFDtxt = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        newBatchTxt = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        newBatchMFDtxt = new javax.swing.JFormattedTextField();
        newBatchEXPDatetxt = new javax.swing.JFormattedTextField();
        newBatchAddQtyTxt = new javax.swing.JFormattedTextField();
        newBatchUnitPriceTxt = new javax.swing.JFormattedTextField();
        AccountsViewPanel = new javax.swing.JPanel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        accountsNameTxt = new javax.swing.JTextField();
        accountsPassTxt = new javax.swing.JPasswordField();
        accountsTypeCombo = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel51 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        userAccountTable = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        accountsUserNameTxt = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        userAccountIdTxt = new javax.swing.JTextField();
        ViewAllItemPanel = new javax.swing.JPanel();
        itemSubMenuPanel2 = new javax.swing.JPanel();
        btnUpdateItem2 = new javax.swing.JPanel();
        jLabel66 = new javax.swing.JLabel();
        btnAddNewItem2 = new javax.swing.JPanel();
        jLabel67 = new javax.swing.JLabel();
        addBatch1 = new javax.swing.JPanel();
        jLabel68 = new javax.swing.JLabel();
        btnViewAllItems1 = new javax.swing.JPanel();
        jLabel69 = new javax.swing.JLabel();
        btnUpdateItem3 = new javax.swing.JPanel();
        jLabel70 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        ViewAllItemTable = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        viewAllBatchtable = new javax.swing.JTable();
        jButton10 = new javax.swing.JButton();
        UpdateItemPanel = new javax.swing.JPanel();
        itemSubMenuPanel3 = new javax.swing.JPanel();
        btnUpdateItem4 = new javax.swing.JPanel();
        jLabel71 = new javax.swing.JLabel();
        btnAddNewItem3 = new javax.swing.JPanel();
        jLabel72 = new javax.swing.JLabel();
        addBatch2 = new javax.swing.JPanel();
        jLabel73 = new javax.swing.JLabel();
        btnViewAllItems2 = new javax.swing.JPanel();
        jLabel74 = new javax.swing.JLabel();
        btnUpdateItem5 = new javax.swing.JPanel();
        jLabel75 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        onUpdateSearchByDescTxt = new javax.swing.JTextField();
        onUpdateItemPanelSearchItemBarcodeTxt = new javax.swing.JTextField();
        SearchedItemsOnUpdateCombo = new javax.swing.JComboBox<>();
        jLabel63 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jLabel81 = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        jLabel83 = new javax.swing.JLabel();
        onUpdateItemIdTxt = new javax.swing.JTextField();
        onUpdateBarcodeTxt = new javax.swing.JTextField();
        onUpdateDescriptionTxt = new javax.swing.JTextField();
        onUpdatePackSizeTxt = new javax.swing.JTextField();
        onUpdateReOrderLevelTxt = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        listOnBatchUpdate = new javax.swing.JList<>();
        jLabel84 = new javax.swing.JLabel();
        jLabel85 = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        jLabel87 = new javax.swing.JLabel();
        jLabel88 = new javax.swing.JLabel();
        jLabel89 = new javax.swing.JLabel();
        onUpdateBatchIdtxt = new javax.swing.JTextField();
        onUpdateBatchItemIdtxt = new javax.swing.JTextField();
        onUpdateBatchtxt = new javax.swing.JTextField();
        onUpdateBatchEXPtxt = new javax.swing.JFormattedTextField();
        onUpdateBatchMFDtxt = new javax.swing.JFormattedTextField();
        onUpdateBatchQtyOnHandtxt = new javax.swing.JFormattedTextField();
        onUpdateBatchUnitPricetxt = new javax.swing.JFormattedTextField();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        DeleteItemPanel = new javax.swing.JPanel();
        itemSubMenuPanel4 = new javax.swing.JPanel();
        btnUpdateItem6 = new javax.swing.JPanel();
        jLabel76 = new javax.swing.JLabel();
        btnAddNewItem4 = new javax.swing.JPanel();
        jLabel77 = new javax.swing.JLabel();
        addBatch3 = new javax.swing.JPanel();
        jLabel78 = new javax.swing.JLabel();
        btnViewAllItems3 = new javax.swing.JPanel();
        jLabel79 = new javax.swing.JLabel();
        btnUpdateItem7 = new javax.swing.JPanel();
        jLabel80 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        searchForDeleteItemByDescriptionTxt = new javax.swing.JTextField();
        searchByBarcodeForDeleteItemOrBatchTxt = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        avaibleBatchTableForDeleteItemOrBatch = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableItemOrBatchDelete = new javax.swing.JTable();
        jLabel60 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        ViewReportsPane = new javax.swing.JPanel();
        jButton18 = new javax.swing.JButton();
        viewReOrderLevelPanel = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        reOrderLevelTable = new javax.swing.JTable();
        viewGRNPanel = new javax.swing.JPanel();
        jLabel90 = new javax.swing.JLabel();
        jLabel91 = new javax.swing.JLabel();
        onGrnSearchResultCombo = new javax.swing.JComboBox<>();
        grnSearchByBarcodeTxt = new javax.swing.JTextField();
        onGRNSearchByDescriptionTxt = new javax.swing.JTextField();
        jScrollPane9 = new javax.swing.JScrollPane();
        tableGRN = new javax.swing.JTable();
        jLabel94 = new javax.swing.JLabel();
        jLabel95 = new javax.swing.JLabel();
        onGRNBarcodetxt = new javax.swing.JTextField();
        onGRNPackSizeTxt = new javax.swing.JTextField();
        onGRNDescriptionTxt = new javax.swing.JTextField();
        jLabel96 = new javax.swing.JLabel();
        jLabel97 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        onGRNLISTBatch = new javax.swing.JList<>();
        jLabel98 = new javax.swing.JLabel();
        jLabel99 = new javax.swing.JLabel();
        jLabel101 = new javax.swing.JLabel();
        jLabel102 = new javax.swing.JLabel();
        jLabel103 = new javax.swing.JLabel();
        jLabel104 = new javax.swing.JLabel();
        onGRNBatchEXPDateTxt = new javax.swing.JTextField();
        onGRNMFDateTxt = new javax.swing.JTextField();
        onGRNBatchTxt = new javax.swing.JTextField();
        onGRNUnitPriceTxt = new javax.swing.JTextField();
        onGrnBatchIDtxt = new javax.swing.JTextField();
        OnGRNBatchItemIDtxt = new javax.swing.JTextField();
        jLabel100 = new javax.swing.JLabel();
        onGRNbatchQtyOnHandTxt = new javax.swing.JTextField();
        putToGrnTableButton = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jLabel93 = new javax.swing.JLabel();
        suplierNameTxt = new javax.swing.JTextField();
        onGRNAddingQtyTxt = new javax.swing.JFormattedTextField();
        ViewReturnPanel = new javax.swing.JPanel();
        jLabel108 = new javax.swing.JLabel();
        returnBarcode = new javax.swing.JTextField();
        onReturnsSearchDesTxt = new javax.swing.JTextField();
        jLabel114 = new javax.swing.JLabel();
        onReturnsCombo = new javax.swing.JComboBox<>();
        jLabel115 = new javax.swing.JLabel();
        jLabel116 = new javax.swing.JLabel();
        jLabel117 = new javax.swing.JLabel();
        onReturnDescriptionTxt = new javax.swing.JTextField();
        onReturnPackSizeTxt = new javax.swing.JTextField();
        returnQtyTxt = new javax.swing.JTextField();
        jScrollPane12 = new javax.swing.JScrollPane();
        onReturnLISTBatch = new javax.swing.JList<>();
        btnReturnCart = new javax.swing.JButton();
        jLabel118 = new javax.swing.JLabel();
        jLabel119 = new javax.swing.JLabel();
        jLabel120 = new javax.swing.JLabel();
        jLabel121 = new javax.swing.JLabel();
        jLabel122 = new javax.swing.JLabel();
        jLabel123 = new javax.swing.JLabel();
        jLabel124 = new javax.swing.JLabel();
        onReturnBatchEXPDateTxt = new javax.swing.JTextField();
        onReturnMFDateTxt = new javax.swing.JTextField();
        onReturnUnitPriceTxt = new javax.swing.JTextField();
        onReturnBatchTxt = new javax.swing.JTextField();
        onReturnBatchIDtxt = new javax.swing.JTextField();
        OnReturnBatchItemIDtxt = new javax.swing.JTextField();
        onReturnbatchQtyOnHandTxt = new javax.swing.JTextField();
        jScrollPane13 = new javax.swing.JScrollPane();
        tableReturns = new javax.swing.JTable();
        jButton19 = new javax.swing.JButton();
        BackUpsPanel = new javax.swing.JPanel();
        jPanel11112 = new javax.swing.JPanel();
        pathTxt = new javax.swing.JTextField();
        jLabel110 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel111 = new javax.swing.JLabel();
        jLabel112 = new javax.swing.JLabel();
        selectedBackUpFilePathTxt = new javax.swing.JTextField();
        jLabel113 = new javax.swing.JLabel();
        btn_restore = new javax.swing.JButton();
        btnBrows2 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        background.setBackground(new java.awt.Color(255, 255, 255));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sidePanel.setBackground(new java.awt.Color(51, 51, 51));
        sidePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_Home.setBackground(new java.awt.Color(102, 102, 102));
        btn_Home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_HomeMousePressed(evt);
            }
        });
        btn_Home.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/home_icon.png"))); // NOI18N
        jLabel1.setText("        Home");
        jLabel1.setAlignmentY(0.0F);
        btn_Home.add(jLabel1, java.awt.BorderLayout.CENTER);

        sidePanel.add(btn_Home, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 240, 50));

        btn_Accounts.setBackground(new java.awt.Color(51, 51, 51));
        btn_Accounts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_AccountsMousePressed(evt);
            }
        });
        btn_Accounts.setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Accounts.png"))); // NOI18N
        jLabel3.setText("      Accounts");
        btn_Accounts.add(jLabel3, java.awt.BorderLayout.CENTER);

        sidePanel.add(btn_Accounts, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 420, 240, 50));

        btn_Item.setBackground(new java.awt.Color(51, 51, 51));
        btn_Item.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_ItemMousePressed(evt);
            }
        });
        btn_Item.setLayout(new java.awt.BorderLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/pluse_Icon.png"))); // NOI18N
        jLabel2.setText("         Item");
        btn_Item.add(jLabel2, java.awt.BorderLayout.CENTER);

        sidePanel.add(btn_Item, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 260, 240, 50));

        btn_Reports.setBackground(new java.awt.Color(51, 51, 51));
        btn_Reports.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_ReportsMousePressed(evt);
            }
        });
        btn_Reports.setLayout(new java.awt.BorderLayout());

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/report_icon.png"))); // NOI18N
        jLabel4.setText("       Reports");
        btn_Reports.add(jLabel4, java.awt.BorderLayout.CENTER);

        sidePanel.add(btn_Reports, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 240, 50));

        btn_ReorderLevel.setBackground(new java.awt.Color(51, 51, 51));
        btn_ReorderLevel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_ReorderLevelMousePressed(evt);
            }
        });
        btn_ReorderLevel.setLayout(new java.awt.BorderLayout());

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/reOrderLevel-icon.png"))); // NOI18N
        jLabel5.setText("   Re-order level");
        btn_ReorderLevel.add(jLabel5, java.awt.BorderLayout.CENTER);

        sidePanel.add(btn_ReorderLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 370, 240, 50));

        jSeparator1.setForeground(new java.awt.Color(153, 153, 153));
        sidePanel.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 150, 10));

        jLabel6.setBackground(new java.awt.Color(51, 51, 51));
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 153, 153));
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Accounts.png"))); // NOI18N
        jLabel6.setText("Admin");
        sidePanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        btn_GRN.setBackground(new java.awt.Color(51, 51, 51));
        btn_GRN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_GRNMousePressed(evt);
            }
        });
        btn_GRN.setLayout(new java.awt.BorderLayout());

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(255, 255, 255));
        jLabel32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Entypo_d83d(0)_48.png"))); // NOI18N
        jLabel32.setText("         GRN");
        btn_GRN.add(jLabel32, java.awt.BorderLayout.CENTER);

        sidePanel.add(btn_GRN, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 470, 240, 50));

        btn_Returns.setBackground(new java.awt.Color(51, 51, 51));
        btn_Returns.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_ReturnsMousePressed(evt);
            }
        });
        btn_Returns.setLayout(new java.awt.BorderLayout());

        jLabel92.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel92.setForeground(new java.awt.Color(255, 255, 255));
        jLabel92.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/FontAwesome_f112(0)_48.png"))); // NOI18N
        jLabel92.setText("      Returns");
        btn_Returns.add(jLabel92, java.awt.BorderLayout.CENTER);

        sidePanel.add(btn_Returns, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 520, 240, 50));

        btn_BackUpPanel.setBackground(new java.awt.Color(51, 51, 51));
        btn_BackUpPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_BackUpPanelMousePressed(evt);
            }
        });
        btn_BackUpPanel.setLayout(new java.awt.BorderLayout());

        jLabel109.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel109.setForeground(new java.awt.Color(255, 255, 255));
        jLabel109.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Entypo_e754(0)_48.png"))); // NOI18N
        jLabel109.setText("   Data Back Up");
        btn_BackUpPanel.add(jLabel109, java.awt.BorderLayout.CENTER);

        sidePanel.add(btn_BackUpPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 570, 240, 50));

        background.add(sidePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 240, 770));

        headerPanel.setBackground(new java.awt.Color(102, 102, 102));

        navigationLable.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        navigationLable.setForeground(new java.awt.Color(204, 204, 204));
        navigationLable.setText("Admin/Home");

        todayTransactioLable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        todayTransactioLable.setForeground(new java.awt.Color(255, 255, 255));
        todayTransactioLable.setText("Today transaction");

        timeLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        timeLabel.setForeground(new java.awt.Color(255, 255, 255));

        DateLable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DateLable.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(headerPanelLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(todayTransactioLable))
                    .addComponent(navigationLable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 695, Short.MAX_VALUE)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DateLable, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(headerPanelLayout.createSequentialGroup()
                        .addComponent(navigationLable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(headerPanelLayout.createSequentialGroup()
                        .addComponent(DateLable, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(todayTransactioLable)
                .addGap(21, 21, 21))
        );

        background.add(headerPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 60, 1130, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setText("X");
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });
        background.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(1330, 10, 30, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/logOut_img.png"))); // NOI18N
        jLabel11.setText("LogOut");
        jLabel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel11MousePressed(evt);
            }
        });
        background.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 10, -1, -1));

        viewPanel.setBackground(new java.awt.Color(255, 255, 255));
        viewPanel.setLayout(new java.awt.CardLayout());

        homeViewPanel.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        toDayTransactionTable.setAutoCreateRowSorter(true);
        toDayTransactionTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        toDayTransactionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Time", "Order ID", "Discount", "Total", "Sub Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        toDayTransactionTable.setGridColor(new java.awt.Color(255, 255, 255));
        toDayTransactionTable.setIntercellSpacing(new java.awt.Dimension(5, 5));
        toDayTransactionTable.setRowHeight(28);
        toDayTransactionTable.setSelectionBackground(new java.awt.Color(153, 153, 153));
        jScrollPane1.setViewportView(toDayTransactionTable);
        if (toDayTransactionTable.getColumnModel().getColumnCount() > 0) {
            toDayTransactionTable.getColumnModel().getColumn(0).setResizable(false);
            toDayTransactionTable.getColumnModel().getColumn(1).setResizable(false);
            toDayTransactionTable.getColumnModel().getColumn(2).setResizable(false);
            toDayTransactionTable.getColumnModel().getColumn(3).setResizable(false);
            toDayTransactionTable.getColumnModel().getColumn(4).setResizable(false);
            toDayTransactionTable.getColumnModel().getColumn(5).setResizable(false);
        }

        jLabel105.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel105.setForeground(new java.awt.Color(51, 51, 51));
        jLabel105.setText("Given Discouns        :");

        jLabel106.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel106.setForeground(new java.awt.Color(51, 51, 51));
        jLabel106.setText("Total                           :");

        jLabel107.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel107.setForeground(new java.awt.Color(51, 51, 51));
        jLabel107.setText("Today Income   :");

        totalLable.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totalLable.setForeground(new java.awt.Color(51, 51, 51));

        givenDiscountLable.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        givenDiscountLable.setForeground(new java.awt.Color(51, 51, 51));

        todayIncomeLable.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        todayIncomeLable.setForeground(new java.awt.Color(204, 0, 0));

        javax.swing.GroupLayout homeViewPanelLayout = new javax.swing.GroupLayout(homeViewPanel);
        homeViewPanel.setLayout(homeViewPanelLayout);
        homeViewPanelLayout.setHorizontalGroup(
            homeViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1130, Short.MAX_VALUE)
            .addGroup(homeViewPanelLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(homeViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel106, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel105, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(homeViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homeViewPanelLayout.createSequentialGroup()
                        .addComponent(totalLable, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(125, 125, 125)
                        .addComponent(jLabel107)
                        .addGap(18, 18, 18)
                        .addComponent(todayIncomeLable, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(givenDiscountLable, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        homeViewPanelLayout.setVerticalGroup(
            homeViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homeViewPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(homeViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalLable, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel106, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(homeViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel107, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(todayIncomeLable, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(homeViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel105, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(givenDiscountLable, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 20, Short.MAX_VALUE))
        );

        viewPanel.add(homeViewPanel, "card2");

        ItemViewPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("        Add New Item");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(51, 51, 51));
        jLabel12.setText("Barcode");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(51, 51, 51));
        jLabel13.setText("Description");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(51, 51, 51));
        jLabel14.setText("Pack Size");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(51, 51, 51));
        jLabel15.setText("Re-Order Level");

        btnAddItemForDB.setBackground(new java.awt.Color(51, 51, 51));
        btnAddItemForDB.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAddItemForDB.setForeground(new java.awt.Color(255, 255, 255));
        btnAddItemForDB.setText("Add Item");
        btnAddItemForDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemForDBActionPerformed(evt);
            }
        });
        btnAddItemForDB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnAddItemForDBKeyPressed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 51));
        jLabel9.setText("Exp Date");

        labelMFFDD.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelMFFDD.setForeground(new java.awt.Color(51, 51, 51));
        labelMFFDD.setText("Manufacture Date");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(51, 51, 51));
        jLabel17.setText("Quantity");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(51, 51, 51));
        jLabel18.setText("Batch");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(51, 51, 51));
        jLabel19.setText("Unit Price");

        itemSubMenuPanel.setBackground(new java.awt.Color(51, 51, 51));
        itemSubMenuPanel.setForeground(new java.awt.Color(255, 255, 255));
        itemSubMenuPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnDeleteItemonItem.setBackground(new java.awt.Color(51, 51, 51));
        btnDeleteItemonItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnDeleteItemonItemMousePressed(evt);
            }
        });
        btnDeleteItemonItem.setLayout(new java.awt.BorderLayout());

        jLabel53.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel53.setForeground(new java.awt.Color(255, 255, 255));
        jLabel53.setText("             Delete Item");
        btnDeleteItemonItem.add(jLabel53, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel.add(btnDeleteItemonItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 190, 50));

        btnAddNewItem.setBackground(new java.awt.Color(102, 102, 102));
        btnAddNewItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnAddNewItemMousePressed(evt);
            }
        });
        btnAddNewItem.setLayout(new java.awt.BorderLayout());

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("            Add New Item");
        btnAddNewItem.add(jLabel20, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel.add(btnAddNewItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 50));

        addBatch.setBackground(new java.awt.Color(51, 51, 51));
        addBatch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                addBatchMousePressed(evt);
            }
        });
        addBatch.setLayout(new java.awt.BorderLayout());

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("           Add New Batch ");
        addBatch.add(jLabel21, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel.add(addBatch, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 190, 50));

        btnViewAllItems.setBackground(new java.awt.Color(51, 51, 51));
        btnViewAllItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnViewAllItemsMousePressed(evt);
            }
        });
        btnViewAllItems.setLayout(new java.awt.BorderLayout());

        jLabel52.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel52.setForeground(new java.awt.Color(255, 255, 255));
        jLabel52.setText("           View All Items");
        btnViewAllItems.add(jLabel52, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel.add(btnViewAllItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 190, 50));

        btnUpdateItem1.setBackground(new java.awt.Color(51, 51, 51));
        btnUpdateItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnUpdateItem1MousePressed(evt);
            }
        });
        btnUpdateItem1.setLayout(new java.awt.BorderLayout());

        jLabel54.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel54.setForeground(new java.awt.Color(255, 255, 255));
        jLabel54.setText("            Update Item");
        btnUpdateItem1.add(jLabel54, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel.add(btnUpdateItem1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 190, 50));

        addItemEXPDateTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        addItemEXPDateTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addItemEXPDateTxtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addItemEXPDateTxtFocusLost(evt);
            }
        });

        addItemMFDTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        addItemMFDTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addItemMFDTxtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addItemMFDTxtFocusLost(evt);
            }
        });

        addItemQtyOnHandTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0.00"))));

        addItemUnitPriceTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0.00"))));

        validDateFomatLable1.setForeground(new java.awt.Color(204, 0, 0));
        validDateFomatLable1.setText("Valid Date Format is \" YYYY-MM-DD \"");

        validDateFormatLable2.setForeground(new java.awt.Color(204, 0, 0));
        validDateFormatLable2.setText("Valid Date Format is \" YYYY-MM-DD \"");

        javax.swing.GroupLayout ItemViewPanelLayout = new javax.swing.GroupLayout(ItemViewPanel);
        ItemViewPanel.setLayout(ItemViewPanelLayout);
        ItemViewPanelLayout.setHorizontalGroup(
            ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ItemViewPanelLayout.createSequentialGroup()
                .addComponent(itemSubMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(152, 152, 152)
                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(ItemViewPanelLayout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(jLabel7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ItemViewPanelLayout.createSequentialGroup()
                            .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel15)
                                .addComponent(jLabel14)
                                .addComponent(jLabel13)
                                .addComponent(jLabel12))
                            .addGap(46, 46, 46)
                            .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(addItembarcodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(addItemdescriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(addItempackSizeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(addItemreOrderLevelTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ItemViewPanelLayout.createSequentialGroup()
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addItemBatchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ItemViewPanelLayout.createSequentialGroup()
                            .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel9)
                                .addComponent(labelMFFDD)
                                .addComponent(jLabel19)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(24, 24, 24)
                            .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addItemEXPDateTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                                    .addComponent(addItemMFDTxt)
                                    .addComponent(addItemQtyOnHandTxt))
                                .addComponent(addItemUnitPriceTxt)))
                        .addComponent(btnAddItemForDB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(validDateFomatLable1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(validDateFormatLable2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(89, Short.MAX_VALUE))
        );
        ItemViewPanelLayout.setVerticalGroup(
            ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ItemViewPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel7)
                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ItemViewPanelLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(itemSubMenuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ItemViewPanelLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(addItembarcodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(addItemdescriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(addItempackSizeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(addItemreOrderLevelTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addItemBatchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addGap(18, 18, 18)
                        .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(addItemEXPDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(validDateFomatLable1)))))
                .addGap(18, 18, 18)
                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMFFDD)
                    .addComponent(addItemMFDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(validDateFormatLable2))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addItemQtyOnHandTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(addItemUnitPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAddItemForDB, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );

        viewPanel.add(ItemViewPanel, "card2");

        BatchViewPanel.setBackground(new java.awt.Color(255, 255, 255));

        itemSubMenuPanel1.setBackground(new java.awt.Color(51, 51, 51));
        itemSubMenuPanel1.setForeground(new java.awt.Color(255, 255, 255));
        itemSubMenuPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel3MousePressed(evt);
            }
        });
        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel56.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel56.setForeground(new java.awt.Color(255, 255, 255));
        jLabel56.setText("            Update Item");
        jPanel3.add(jLabel56, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 190, 50));

        btnAddNewItem1.setBackground(new java.awt.Color(51, 51, 51));
        btnAddNewItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnAddNewItem1MousePressed(evt);
            }
        });
        btnAddNewItem1.setLayout(new java.awt.BorderLayout());

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("            Add New Item");
        btnAddNewItem1.add(jLabel22, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel1.add(btnAddNewItem1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 50));

        btnAddNewBatchForItem1.setBackground(new java.awt.Color(102, 102, 102));
        btnAddNewBatchForItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnAddNewBatchForItem1MousePressed(evt);
            }
        });
        btnAddNewBatchForItem1.setLayout(new java.awt.BorderLayout());

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setText("           Add New Batch");
        btnAddNewBatchForItem1.add(jLabel23, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel1.add(btnAddNewBatchForItem1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 190, 50));

        btnBatchONViewAllItem.setBackground(new java.awt.Color(51, 51, 51));
        btnBatchONViewAllItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnBatchONViewAllItemMousePressed(evt);
            }
        });
        btnBatchONViewAllItem.setLayout(new java.awt.BorderLayout());

        jLabel55.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel55.setForeground(new java.awt.Color(255, 255, 255));
        jLabel55.setText("           View All Items");
        btnBatchONViewAllItem.add(jLabel55, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel1.add(btnBatchONViewAllItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 190, 50));

        jPanel4.setBackground(new java.awt.Color(51, 51, 51));
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel4MousePressed(evt);
            }
        });
        jPanel4.setLayout(new java.awt.BorderLayout());

        jLabel57.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel57.setForeground(new java.awt.Color(255, 255, 255));
        jLabel57.setText("             Delete Item");
        jPanel4.add(jLabel57, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 190, 50));

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(51, 51, 51));
        jLabel25.setText("Search The Item First...");

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(51, 51, 51));
        jLabel24.setText("Search By Barcode");

        searchByBarcodeTxtForBatch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchByBarcodeTxtForBatchKeyPressed(evt);
            }
        });

        avalableBatchList.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        avalableBatchList.setSelectionBackground(new java.awt.Color(204, 204, 204));
        avalableBatchList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                avalableBatchListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(avalableBatchList);

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(51, 51, 51));
        jLabel26.setText("Available Batches");

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(51, 51, 51));
        jLabel27.setText("Details Of Seleted Batch");

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(51, 51, 51));
        jLabel28.setText("Batch ID");

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(51, 51, 51));
        jLabel29.setText("Item ID");

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(51, 51, 51));
        jLabel30.setText("Batch");

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(51, 51, 51));
        jLabel31.setText("EXP Date");

        jlabeljhjha.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlabeljhjha.setForeground(new java.awt.Color(51, 51, 51));
        jlabeljhjha.setText("Qty On Hand");

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(51, 51, 51));
        jLabel33.setText("Unit Price");

        jSeparator3.setForeground(new java.awt.Color(51, 51, 51));

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(51, 51, 51));
        jLabel34.setText("Search By Description");

        searchByDescriptionForBatchCombo.setEditable(true);
        searchByDescriptionForBatchCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                searchByDescriptionForBatchComboItemStateChanged(evt);
            }
        });
        searchByDescriptionForBatchCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByDescriptionForBatchComboActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setText("Item ID");

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(51, 51, 51));
        jLabel35.setText("Description");

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(51, 51, 51));
        jLabel36.setText("Barcode");

        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(51, 51, 51));
        jLabel37.setText("Pack Size");

        jLabel38.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(51, 51, 51));
        jLabel38.setText("Re-Order Level");

        onBatchItemIdTxt.setEditable(false);

        onBatchBarcodeTxt.setEditable(false);

        onbatchDescriptionTxt.setEditable(false);

        onBatchPackSizeTxt.setEditable(false);

        onBatchReOrderLevelTxt.setEditable(false);

        onBatchBatchIdtxt.setEditable(false);

        onBatchBatchItemIdtxt.setEditable(false);

        onBatchBatchtxt.setEditable(false);

        onBatchBatchEXPtxt.setEditable(false);

        onBatchBatchQtyOnHandtxt.setEditable(false);

        onBatchBatchUnitPricetxt.setEditable(false);

        jSeparator4.setForeground(new java.awt.Color(51, 51, 51));

        jLabel39.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(51, 51, 51));
        jLabel39.setText("2nd Step Add New Batch For searched  Item");

        jLabel40.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(51, 51, 51));
        jLabel40.setText("New Batch");

        jLabel41.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(51, 51, 51));
        jLabel41.setText("EXP Date");

        jLabel42.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(51, 51, 51));
        jLabel42.setText("MFD");

        onBatchBatchMFDtxt.setEditable(false);

        jLabel43.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(51, 51, 51));
        jLabel43.setText("MFD");

        jLabel44.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(51, 51, 51));
        jLabel44.setText("Add Qty");

        jLabel45.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(51, 51, 51));
        jLabel45.setText("Unit Price");

        jButton2.setBackground(new java.awt.Color(51, 51, 51));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Add New Batch");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
        });

        newBatchMFDtxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));

        newBatchEXPDatetxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));

        newBatchAddQtyTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0.00"))));

        newBatchUnitPriceTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0.00"))));

        javax.swing.GroupLayout BatchViewPanelLayout = new javax.swing.GroupLayout(BatchViewPanel);
        BatchViewPanel.setLayout(BatchViewPanelLayout);
        BatchViewPanelLayout.setHorizontalGroup(
            BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BatchViewPanelLayout.createSequentialGroup()
                .addComponent(itemSubMenuPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BatchViewPanelLayout.createSequentialGroup()
                        .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BatchViewPanelLayout.createSequentialGroup()
                                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSeparator3)
                                    .addGroup(BatchViewPanelLayout.createSequentialGroup()
                                        .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel34)
                                            .addComponent(jLabel24))
                                        .addGap(18, 18, 18)
                                        .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(searchByBarcodeTxtForBatch, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(searchByDescriptionForBatchCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(BatchViewPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(onBatchItemIdTxt))
                                    .addGroup(BatchViewPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(onbatchDescriptionTxt))
                                    .addGroup(BatchViewPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(onBatchBarcodeTxt))
                                    .addGroup(BatchViewPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(onBatchPackSizeTxt))
                                    .addGroup(BatchViewPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(onBatchReOrderLevelTxt)))
                                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(BatchViewPanelLayout.createSequentialGroup()
                                        .addGap(54, 54, 54)
                                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(49, 49, 49))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BatchViewPanelLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(67, 67, 67)))
                                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(BatchViewPanelLayout.createSequentialGroup()
                                        .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jlabeljhjha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel42, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(onBatchBatchIdtxt)
                                            .addComponent(onBatchBatchItemIdtxt)
                                            .addComponent(onBatchBatchtxt)
                                            .addComponent(onBatchBatchEXPtxt)
                                            .addComponent(onBatchBatchQtyOnHandtxt)
                                            .addComponent(onBatchBatchUnitPricetxt, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(onBatchBatchMFDtxt)))
                                    .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jSeparator4))
                        .addGap(44, 44, 44))
                    .addGroup(BatchViewPanelLayout.createSequentialGroup()
                        .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(BatchViewPanelLayout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel45, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel40, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel44))
                                .addGap(37, 37, 37)
                                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(newBatchTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                                    .addComponent(newBatchMFDtxt)
                                    .addComponent(newBatchEXPDatetxt)
                                    .addComponent(newBatchAddQtyTxt))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(BatchViewPanelLayout.createSequentialGroup()
                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(BatchViewPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(newBatchUnitPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, BatchViewPanelLayout.createSequentialGroup()
                        .addGap(473, 473, 473)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        BatchViewPanelLayout.setVerticalGroup(
            BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BatchViewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                        .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BatchViewPanelLayout.createSequentialGroup()
                        .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BatchViewPanelLayout.createSequentialGroup()
                                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(onBatchBatchIdtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(onBatchBatchItemIdtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(onBatchBatchtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(onBatchBatchEXPtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(searchByBarcodeTxtForBatch, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(BatchViewPanelLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(BatchViewPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(searchByDescriptionForBatchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(onBatchItemIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(onBatchBarcodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(onbatchDescriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(onBatchPackSizeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(onBatchReOrderLevelTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BatchViewPanelLayout.createSequentialGroup()
                                        .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(onBatchBatchMFDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jlabeljhjha, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(onBatchBatchQtyOnHandtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(onBatchBatchUnitPricetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(55, 55, 55)))
                                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                                .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BatchViewPanelLayout.createSequentialGroup()
                        .addGap(0, 31, Short.MAX_VALUE)
                        .addComponent(itemSubMenuPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)))
                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newBatchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(newBatchEXPDatetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(newBatchMFDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel44)
                    .addComponent(newBatchAddQtyTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(BatchViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(newBatchUnitPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        viewPanel.add(BatchViewPanel, "card2");

        AccountsViewPanel.setBackground(new java.awt.Color(255, 255, 255));
        AccountsViewPanel.setPreferredSize(new java.awt.Dimension(1130, 585));

        jLabel46.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel46.setForeground(new java.awt.Color(51, 51, 51));
        jLabel46.setText("Create New Account");

        jLabel47.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel47.setForeground(new java.awt.Color(51, 51, 51));
        jLabel47.setText("Type");

        jLabel48.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel48.setForeground(new java.awt.Color(51, 51, 51));
        jLabel48.setText("Name");

        jLabel49.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel49.setForeground(new java.awt.Color(51, 51, 51));
        jLabel49.setText("User Name");

        jLabel50.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel50.setForeground(new java.awt.Color(51, 51, 51));
        jLabel50.setText("Password");

        accountsTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cashier", "Admin" }));

        jButton1.setBackground(new java.awt.Color(51, 51, 51));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Create Account");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        jSeparator5.setForeground(new java.awt.Color(51, 51, 51));

        jLabel51.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel51.setForeground(new java.awt.Color(51, 51, 51));
        jLabel51.setText("Available Accounts");

        jScrollPane4.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        userAccountTable.setAutoCreateRowSorter(true);
        userAccountTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        userAccountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Type", "Name", "User Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        userAccountTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        userAccountTable.setGridColor(new java.awt.Color(255, 255, 255));
        userAccountTable.setRowHeight(28);
        userAccountTable.setSelectionBackground(new java.awt.Color(153, 153, 153));
        userAccountTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                userAccountTableMousePressed(evt);
            }
        });
        jScrollPane4.setViewportView(userAccountTable);
        if (userAccountTable.getColumnModel().getColumnCount() > 0) {
            userAccountTable.getColumnModel().getColumn(0).setResizable(false);
            userAccountTable.getColumnModel().getColumn(1).setResizable(false);
            userAccountTable.getColumnModel().getColumn(2).setResizable(false);
        }

        jButton3.setBackground(new java.awt.Color(51, 51, 51));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Refresh");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jButton3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton3KeyPressed(evt);
            }
        });

        accountsUserNameTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                accountsUserNameTxtKeyPressed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(51, 51, 51));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Update Account");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton4KeyPressed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(255, 0, 0));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Delete Account");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jButton5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton5KeyPressed(evt);
            }
        });

        userAccountIdTxt.setEditable(false);

        javax.swing.GroupLayout AccountsViewPanelLayout = new javax.swing.GroupLayout(AccountsViewPanel);
        AccountsViewPanel.setLayout(AccountsViewPanelLayout);
        AccountsViewPanelLayout.setHorizontalGroup(
            AccountsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator5)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AccountsViewPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(450, 450, 450))
            .addGroup(AccountsViewPanelLayout.createSequentialGroup()
                .addGroup(AccountsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AccountsViewPanelLayout.createSequentialGroup()
                        .addGap(269, 269, 269)
                        .addGroup(AccountsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(AccountsViewPanelLayout.createSequentialGroup()
                                .addGroup(AccountsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(AccountsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel48, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel49, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel47, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel50))
                                .addGap(42, 42, 42)
                                .addGroup(AccountsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(userAccountIdTxt, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(accountsNameTxt)
                                    .addComponent(accountsPassTxt)
                                    .addComponent(accountsTypeCombo, 0, 283, Short.MAX_VALUE)
                                    .addComponent(accountsUserNameTxt))))
                        .addGap(43, 43, 43)
                        .addGroup(AccountsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(AccountsViewPanelLayout.createSequentialGroup()
                        .addGap(434, 434, 434)
                        .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(279, Short.MAX_VALUE))
            .addGroup(AccountsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1130, Short.MAX_VALUE))
        );
        AccountsViewPanelLayout.setVerticalGroup(
            AccountsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AccountsViewPanelLayout.createSequentialGroup()
                .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(AccountsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accountsTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel47)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(AccountsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AccountsViewPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(AccountsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(accountsNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel48))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(AccountsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(accountsUserNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel49))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(AccountsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel50)
                            .addComponent(accountsPassTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(AccountsViewPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)))
                .addGap(5, 5, 5)
                .addComponent(userAccountIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel51)
                .addGap(262, 262, 262)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
            .addGroup(AccountsViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(AccountsViewPanelLayout.createSequentialGroup()
                    .addGap(315, 315, 315)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(85, Short.MAX_VALUE)))
        );

        viewPanel.add(AccountsViewPanel, "card2");

        ViewAllItemPanel.setBackground(new java.awt.Color(255, 255, 255));

        itemSubMenuPanel2.setBackground(new java.awt.Color(51, 51, 51));
        itemSubMenuPanel2.setForeground(new java.awt.Color(255, 255, 255));
        itemSubMenuPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnUpdateItem2.setBackground(new java.awt.Color(51, 51, 51));
        btnUpdateItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnUpdateItem2MousePressed(evt);
            }
        });
        btnUpdateItem2.setLayout(new java.awt.BorderLayout());

        jLabel66.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel66.setForeground(new java.awt.Color(255, 255, 255));
        jLabel66.setText("             Delete Item");
        btnUpdateItem2.add(jLabel66, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel2.add(btnUpdateItem2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 190, 50));

        btnAddNewItem2.setBackground(new java.awt.Color(51, 51, 51));
        btnAddNewItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnAddNewItem2MousePressed(evt);
            }
        });
        btnAddNewItem2.setLayout(new java.awt.BorderLayout());

        jLabel67.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel67.setForeground(new java.awt.Color(255, 255, 255));
        jLabel67.setText("            Add New Item");
        btnAddNewItem2.add(jLabel67, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel2.add(btnAddNewItem2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 50));

        addBatch1.setBackground(new java.awt.Color(51, 51, 51));
        addBatch1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                addBatch1MousePressed(evt);
            }
        });
        addBatch1.setLayout(new java.awt.BorderLayout());

        jLabel68.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel68.setForeground(new java.awt.Color(255, 255, 255));
        jLabel68.setText("           Add New Batch ");
        addBatch1.add(jLabel68, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel2.add(addBatch1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 190, 50));

        btnViewAllItems1.setBackground(new java.awt.Color(102, 102, 102));
        btnViewAllItems1.setLayout(new java.awt.BorderLayout());

        jLabel69.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel69.setForeground(new java.awt.Color(255, 255, 255));
        jLabel69.setText("           View All Items");
        jLabel69.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel69MousePressed(evt);
            }
        });
        btnViewAllItems1.add(jLabel69, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel2.add(btnViewAllItems1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 190, 50));

        btnUpdateItem3.setBackground(new java.awt.Color(51, 51, 51));
        btnUpdateItem3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnUpdateItem3MousePressed(evt);
            }
        });
        btnUpdateItem3.setLayout(new java.awt.BorderLayout());

        jLabel70.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel70.setForeground(new java.awt.Color(255, 255, 255));
        jLabel70.setText("            Update Item");
        btnUpdateItem3.add(jLabel70, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel2.add(btnUpdateItem3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 190, 50));

        jScrollPane7.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        ViewAllItemTable.setAutoCreateRowSorter(true);
        ViewAllItemTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ViewAllItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Barcode", "Description", "Pack Size", "Re Order Level"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ViewAllItemTable.setGridColor(new java.awt.Color(255, 255, 255));
        ViewAllItemTable.setRowHeight(28);
        ViewAllItemTable.setSelectionBackground(new java.awt.Color(153, 153, 153));
        ViewAllItemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ViewAllItemTableMousePressed(evt);
            }
        });
        jScrollPane7.setViewportView(ViewAllItemTable);
        if (ViewAllItemTable.getColumnModel().getColumnCount() > 0) {
            ViewAllItemTable.getColumnModel().getColumn(0).setResizable(false);
            ViewAllItemTable.getColumnModel().getColumn(1).setResizable(false);
            ViewAllItemTable.getColumnModel().getColumn(2).setResizable(false);
            ViewAllItemTable.getColumnModel().getColumn(3).setResizable(false);
            ViewAllItemTable.getColumnModel().getColumn(4).setResizable(false);
        }

        jScrollPane8.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        viewAllBatchtable.setAutoCreateRowSorter(true);
        viewAllBatchtable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        viewAllBatchtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Batch ID", "Batch", "EXP Date", "MFDate", "Qty On Hand", "Unit Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        viewAllBatchtable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        viewAllBatchtable.setGridColor(new java.awt.Color(255, 255, 255));
        viewAllBatchtable.setRowHeight(28);
        viewAllBatchtable.setSelectionBackground(new java.awt.Color(153, 153, 153));
        jScrollPane8.setViewportView(viewAllBatchtable);
        if (viewAllBatchtable.getColumnModel().getColumnCount() > 0) {
            viewAllBatchtable.getColumnModel().getColumn(0).setResizable(false);
            viewAllBatchtable.getColumnModel().getColumn(1).setResizable(false);
            viewAllBatchtable.getColumnModel().getColumn(2).setResizable(false);
            viewAllBatchtable.getColumnModel().getColumn(3).setResizable(false);
            viewAllBatchtable.getColumnModel().getColumn(4).setResizable(false);
            viewAllBatchtable.getColumnModel().getColumn(5).setResizable(false);
        }

        jButton10.setBackground(new java.awt.Color(51, 51, 51));
        jButton10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton10.setForeground(new java.awt.Color(255, 255, 255));
        jButton10.setText("Load Items");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ViewAllItemPanelLayout = new javax.swing.GroupLayout(ViewAllItemPanel);
        ViewAllItemPanel.setLayout(ViewAllItemPanelLayout);
        ViewAllItemPanelLayout.setHorizontalGroup(
            ViewAllItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewAllItemPanelLayout.createSequentialGroup()
                .addComponent(itemSubMenuPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ViewAllItemPanelLayout.createSequentialGroup()
                .addContainerGap(238, Short.MAX_VALUE)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        ViewAllItemPanelLayout.setVerticalGroup(
            ViewAllItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewAllItemPanelLayout.createSequentialGroup()
                .addGroup(ViewAllItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ViewAllItemPanelLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(itemSubMenuPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE))
                .addGroup(ViewAllItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ViewAllItemPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        viewPanel.add(ViewAllItemPanel, "card2");

        UpdateItemPanel.setBackground(new java.awt.Color(255, 255, 255));

        itemSubMenuPanel3.setBackground(new java.awt.Color(51, 51, 51));
        itemSubMenuPanel3.setForeground(new java.awt.Color(255, 255, 255));
        itemSubMenuPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnUpdateItem4.setBackground(new java.awt.Color(51, 51, 51));
        btnUpdateItem4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnUpdateItem4MousePressed(evt);
            }
        });
        btnUpdateItem4.setLayout(new java.awt.BorderLayout());

        jLabel71.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel71.setForeground(new java.awt.Color(255, 255, 255));
        jLabel71.setText("             Delete Item");
        btnUpdateItem4.add(jLabel71, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel3.add(btnUpdateItem4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 190, 50));

        btnAddNewItem3.setBackground(new java.awt.Color(51, 51, 51));
        btnAddNewItem3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnAddNewItem3MousePressed(evt);
            }
        });
        btnAddNewItem3.setLayout(new java.awt.BorderLayout());

        jLabel72.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel72.setForeground(new java.awt.Color(255, 255, 255));
        jLabel72.setText("            Add New Item");
        jLabel72.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel72MousePressed(evt);
            }
        });
        btnAddNewItem3.add(jLabel72, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel3.add(btnAddNewItem3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 50));

        addBatch2.setBackground(new java.awt.Color(51, 51, 51));
        addBatch2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                addBatch2MousePressed(evt);
            }
        });
        addBatch2.setLayout(new java.awt.BorderLayout());

        jLabel73.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel73.setForeground(new java.awt.Color(255, 255, 255));
        jLabel73.setText("           Add New Batch ");
        addBatch2.add(jLabel73, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel3.add(addBatch2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 190, 50));

        btnViewAllItems2.setBackground(new java.awt.Color(51, 51, 51));
        btnViewAllItems2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnViewAllItems2MousePressed(evt);
            }
        });
        btnViewAllItems2.setLayout(new java.awt.BorderLayout());

        jLabel74.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel74.setForeground(new java.awt.Color(255, 255, 255));
        jLabel74.setText("           View All Items");
        btnViewAllItems2.add(jLabel74, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel3.add(btnViewAllItems2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 190, 50));

        btnUpdateItem5.setBackground(new java.awt.Color(102, 102, 102));
        btnUpdateItem5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnUpdateItem5MousePressed(evt);
            }
        });
        btnUpdateItem5.setLayout(new java.awt.BorderLayout());

        jLabel75.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel75.setForeground(new java.awt.Color(255, 255, 255));
        jLabel75.setText("            Update Item");
        btnUpdateItem5.add(jLabel75, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel3.add(btnUpdateItem5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 190, 50));

        jLabel61.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel61.setForeground(new java.awt.Color(51, 51, 51));
        jLabel61.setText("Search By Description");

        jLabel62.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel62.setForeground(new java.awt.Color(51, 51, 51));
        jLabel62.setText("Search Item By Barcode");

        onUpdateItemPanelSearchItemBarcodeTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                onUpdateItemPanelSearchItemBarcodeTxtKeyPressed(evt);
            }
        });

        SearchedItemsOnUpdateCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SearchedItemsOnUpdateComboItemStateChanged(evt);
            }
        });

        jLabel63.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel63.setForeground(new java.awt.Color(51, 51, 51));
        jLabel63.setText("Item ID");

        jLabel64.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel64.setForeground(new java.awt.Color(51, 51, 51));
        jLabel64.setText("Barcode");

        jLabel65.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel65.setForeground(new java.awt.Color(51, 51, 51));
        jLabel65.setText("Description");

        jLabel81.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel81.setForeground(new java.awt.Color(51, 51, 51));
        jLabel81.setText("Pack Size");

        jLabel82.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel82.setForeground(new java.awt.Color(51, 51, 51));
        jLabel82.setText("Re-Order Level");

        jLabel83.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel83.setForeground(new java.awt.Color(51, 51, 51));
        jLabel83.setText("Batch ID");

        onUpdateItemIdTxt.setEditable(false);

        onUpdateBarcodeTxt.setEditable(false);

        listOnBatchUpdate.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listOnBatchUpdateValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(listOnBatchUpdate);

        jLabel84.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel84.setForeground(new java.awt.Color(51, 51, 51));
        jLabel84.setText("Item ID");

        jLabel85.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel85.setForeground(new java.awt.Color(51, 51, 51));
        jLabel85.setText("Batch");

        jLabel86.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel86.setForeground(new java.awt.Color(51, 51, 51));
        jLabel86.setText("Exp Date");

        jLabel87.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel87.setForeground(new java.awt.Color(51, 51, 51));
        jLabel87.setText("MFDate");

        jLabel88.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel88.setForeground(new java.awt.Color(51, 51, 51));
        jLabel88.setText("Qty On Hand");

        jLabel89.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel89.setForeground(new java.awt.Color(51, 51, 51));
        jLabel89.setText("Unit Price");

        onUpdateBatchIdtxt.setEditable(false);

        onUpdateBatchItemIdtxt.setEditable(false);

        onUpdateBatchtxt.setEditable(false);

        onUpdateBatchEXPtxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat(""))));

        onUpdateBatchMFDtxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat(""))));

        onUpdateBatchQtyOnHandtxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0.00"))));

        onUpdateBatchUnitPricetxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0.00"))));

        jButton8.setBackground(new java.awt.Color(51, 51, 51));
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("Update Batch");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jButton8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton8KeyPressed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(51, 51, 51));
        jButton9.setForeground(new java.awt.Color(255, 255, 255));
        jButton9.setText("Update Item");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jButton9.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton9KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout UpdateItemPanelLayout = new javax.swing.GroupLayout(UpdateItemPanel);
        UpdateItemPanel.setLayout(UpdateItemPanelLayout);
        UpdateItemPanelLayout.setHorizontalGroup(
            UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateItemPanelLayout.createSequentialGroup()
                .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel62, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemSubMenuPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UpdateItemPanelLayout.createSequentialGroup()
                        .addComponent(jLabel64, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(onUpdateBarcodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(UpdateItemPanelLayout.createSequentialGroup()
                        .addComponent(jLabel65, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(onUpdateDescriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(UpdateItemPanelLayout.createSequentialGroup()
                        .addComponent(jLabel81, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(onUpdatePackSizeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(UpdateItemPanelLayout.createSequentialGroup()
                        .addComponent(jLabel63, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(onUpdateItemIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(UpdateItemPanelLayout.createSequentialGroup()
                        .addComponent(jLabel82, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(onUpdateReOrderLevelTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)))
                    .addGroup(UpdateItemPanelLayout.createSequentialGroup()
                        .addComponent(onUpdateItemPanelSearchItemBarcodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel61)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UpdateItemPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel89, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel83, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel84, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel85, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel86, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel87, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel88, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)))
                    .addComponent(onUpdateSearchByDescTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(onUpdateBatchUnitPricetxt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(onUpdateBatchQtyOnHandtxt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(onUpdateBatchMFDtxt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(onUpdateBatchEXPtxt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(onUpdateBatchtxt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(onUpdateBatchItemIdtxt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(onUpdateBatchIdtxt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SearchedItemsOnUpdateCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        UpdateItemPanelLayout.setVerticalGroup(
            UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UpdateItemPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel61, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel62, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(onUpdateSearchByDescTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(onUpdateItemPanelSearchItemBarcodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchedItemsOnUpdateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(itemSubMenuPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(UpdateItemPanelLayout.createSequentialGroup()
                        .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel63, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(onUpdateItemIdTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel64, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                            .addComponent(onUpdateBarcodeTxt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel65, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                            .addComponent(onUpdateDescriptionTxt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel81, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                            .addComponent(onUpdatePackSizeTxt))
                        .addGap(15, 15, 15)
                        .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel82, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                            .addComponent(onUpdateReOrderLevelTxt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(UpdateItemPanelLayout.createSequentialGroup()
                        .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(UpdateItemPanelLayout.createSequentialGroup()
                                .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel83, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(onUpdateBatchIdtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel84, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(onUpdateBatchItemIdtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel85, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(onUpdateBatchtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel86, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                            .addComponent(onUpdateBatchEXPtxt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel87, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                            .addComponent(onUpdateBatchMFDtxt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel88, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                            .addComponent(onUpdateBatchQtyOnHandtxt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(UpdateItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel89, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                            .addComponent(onUpdateBatchUnitPricetxt))
                        .addGap(18, 18, 18)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(236, Short.MAX_VALUE))
        );

        viewPanel.add(UpdateItemPanel, "card2");

        DeleteItemPanel.setBackground(new java.awt.Color(255, 255, 255));

        itemSubMenuPanel4.setBackground(new java.awt.Color(51, 51, 51));
        itemSubMenuPanel4.setForeground(new java.awt.Color(255, 255, 255));
        itemSubMenuPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnUpdateItem6.setBackground(new java.awt.Color(102, 102, 102));
        btnUpdateItem6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnUpdateItem6MousePressed(evt);
            }
        });
        btnUpdateItem6.setLayout(new java.awt.BorderLayout());

        jLabel76.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel76.setForeground(new java.awt.Color(255, 255, 255));
        jLabel76.setText("             Delete Item");
        btnUpdateItem6.add(jLabel76, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel4.add(btnUpdateItem6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 190, 50));

        btnAddNewItem4.setBackground(new java.awt.Color(51, 51, 51));
        btnAddNewItem4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnAddNewItem4MousePressed(evt);
            }
        });
        btnAddNewItem4.setLayout(new java.awt.BorderLayout());

        jLabel77.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel77.setForeground(new java.awt.Color(255, 255, 255));
        jLabel77.setText("            Add New Item");
        btnAddNewItem4.add(jLabel77, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel4.add(btnAddNewItem4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 50));

        addBatch3.setBackground(new java.awt.Color(51, 51, 51));
        addBatch3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                addBatch3MousePressed(evt);
            }
        });
        addBatch3.setLayout(new java.awt.BorderLayout());

        jLabel78.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel78.setForeground(new java.awt.Color(255, 255, 255));
        jLabel78.setText("           Add New Batch ");
        addBatch3.add(jLabel78, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel4.add(addBatch3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 190, 50));

        btnViewAllItems3.setBackground(new java.awt.Color(51, 51, 51));
        btnViewAllItems3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnViewAllItems3MousePressed(evt);
            }
        });
        btnViewAllItems3.setLayout(new java.awt.BorderLayout());

        jLabel79.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel79.setForeground(new java.awt.Color(255, 255, 255));
        jLabel79.setText("           View All Items");
        btnViewAllItems3.add(jLabel79, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel4.add(btnViewAllItems3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 190, 50));

        btnUpdateItem7.setBackground(new java.awt.Color(51, 51, 51));
        btnUpdateItem7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnUpdateItem7MousePressed(evt);
            }
        });
        btnUpdateItem7.setLayout(new java.awt.BorderLayout());

        jLabel80.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel80.setForeground(new java.awt.Color(255, 255, 255));
        jLabel80.setText("            Update Item");
        btnUpdateItem7.add(jLabel80, java.awt.BorderLayout.CENTER);

        itemSubMenuPanel4.add(btnUpdateItem7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 190, 50));

        jLabel58.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel58.setForeground(new java.awt.Color(51, 51, 51));
        jLabel58.setText("Search By Barcode");

        jLabel59.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel59.setForeground(new java.awt.Color(51, 51, 51));
        jLabel59.setText("Search By Name");

        searchForDeleteItemByDescriptionTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchForDeleteItemByDescriptionTxtKeyPressed(evt);
            }
        });

        searchByBarcodeForDeleteItemOrBatchTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchByBarcodeForDeleteItemOrBatchTxtKeyPressed(evt);
            }
        });

        jScrollPane3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        avaibleBatchTableForDeleteItemOrBatch.setAutoCreateRowSorter(true);
        avaibleBatchTableForDeleteItemOrBatch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        avaibleBatchTableForDeleteItemOrBatch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Batch ID", "Batch", "EXP Date", "MFDate", "Qty On Hand", "Unit Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        avaibleBatchTableForDeleteItemOrBatch.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        avaibleBatchTableForDeleteItemOrBatch.setGridColor(new java.awt.Color(255, 255, 255));
        avaibleBatchTableForDeleteItemOrBatch.setRowHeight(28);
        avaibleBatchTableForDeleteItemOrBatch.setSelectionBackground(new java.awt.Color(153, 153, 153));
        jScrollPane3.setViewportView(avaibleBatchTableForDeleteItemOrBatch);
        if (avaibleBatchTableForDeleteItemOrBatch.getColumnModel().getColumnCount() > 0) {
            avaibleBatchTableForDeleteItemOrBatch.getColumnModel().getColumn(0).setResizable(false);
            avaibleBatchTableForDeleteItemOrBatch.getColumnModel().getColumn(1).setResizable(false);
            avaibleBatchTableForDeleteItemOrBatch.getColumnModel().getColumn(2).setResizable(false);
            avaibleBatchTableForDeleteItemOrBatch.getColumnModel().getColumn(3).setResizable(false);
            avaibleBatchTableForDeleteItemOrBatch.getColumnModel().getColumn(4).setResizable(false);
            avaibleBatchTableForDeleteItemOrBatch.getColumnModel().getColumn(5).setResizable(false);
        }

        jScrollPane5.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        tableItemOrBatchDelete.setAutoCreateRowSorter(true);
        tableItemOrBatchDelete.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tableItemOrBatchDelete.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Barcode", "Description", "Pack Size", "Re Order Level"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableItemOrBatchDelete.setGridColor(new java.awt.Color(255, 255, 255));
        tableItemOrBatchDelete.setRowHeight(28);
        tableItemOrBatchDelete.setSelectionBackground(new java.awt.Color(153, 153, 153));
        tableItemOrBatchDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableItemOrBatchDeleteMousePressed(evt);
            }
        });
        jScrollPane5.setViewportView(tableItemOrBatchDelete);
        if (tableItemOrBatchDelete.getColumnModel().getColumnCount() > 0) {
            tableItemOrBatchDelete.getColumnModel().getColumn(0).setResizable(false);
            tableItemOrBatchDelete.getColumnModel().getColumn(1).setResizable(false);
            tableItemOrBatchDelete.getColumnModel().getColumn(2).setResizable(false);
            tableItemOrBatchDelete.getColumnModel().getColumn(3).setResizable(false);
            tableItemOrBatchDelete.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel60.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel60.setForeground(new java.awt.Color(51, 51, 51));
        jLabel60.setText("Selected Item Available Batches");

        jButton6.setBackground(new java.awt.Color(204, 0, 0));
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Delete Selected  Batch");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(204, 0, 0));
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("Delete Selected Item ");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jButton7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton7KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout DeleteItemPanelLayout = new javax.swing.GroupLayout(DeleteItemPanel);
        DeleteItemPanel.setLayout(DeleteItemPanelLayout);
        DeleteItemPanelLayout.setHorizontalGroup(
            DeleteItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DeleteItemPanelLayout.createSequentialGroup()
                .addGap(211, 211, 211)
                .addComponent(jLabel58)
                .addGap(18, 18, 18)
                .addComponent(searchByBarcodeForDeleteItemOrBatchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel59)
                .addGap(18, 18, 18)
                .addComponent(searchForDeleteItemByDescriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(127, Short.MAX_VALUE))
            .addGroup(DeleteItemPanelLayout.createSequentialGroup()
                .addComponent(itemSubMenuPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(DeleteItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DeleteItemPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel60, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76))
                    .addGroup(DeleteItemPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(DeleteItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(DeleteItemPanelLayout.createSequentialGroup()
                                .addGroup(DeleteItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane5))
                        .addContainerGap())))
        );
        DeleteItemPanelLayout.setVerticalGroup(
            DeleteItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DeleteItemPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(DeleteItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel58)
                    .addComponent(jLabel59)
                    .addComponent(searchForDeleteItemByDescriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchByBarcodeForDeleteItemOrBatchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(DeleteItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(DeleteItemPanelLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(itemSubMenuPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(DeleteItemPanelLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel60, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(DeleteItemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DeleteItemPanelLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        viewPanel.add(DeleteItemPanel, "card2");

        ViewReportsPane.setBackground(new java.awt.Color(255, 255, 255));

        jButton18.setBackground(new java.awt.Color(51, 51, 51));
        jButton18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton18.setForeground(new java.awt.Color(255, 255, 255));
        jButton18.setText("Get Income between two days");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });
        jButton18.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton18KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout ViewReportsPaneLayout = new javax.swing.GroupLayout(ViewReportsPane);
        ViewReportsPane.setLayout(ViewReportsPaneLayout);
        ViewReportsPaneLayout.setHorizontalGroup(
            ViewReportsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewReportsPaneLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(734, Short.MAX_VALUE))
        );
        ViewReportsPaneLayout.setVerticalGroup(
            ViewReportsPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewReportsPaneLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(537, Short.MAX_VALUE))
        );

        viewPanel.add(ViewReportsPane, "card2");

        viewReOrderLevelPanel.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane11.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        reOrderLevelTable.setAutoCreateRowSorter(true);
        reOrderLevelTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        reOrderLevelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Item ID", "Description", "Pack Size", "Available Batch Count", "Re-Order Level", "Available Qty In Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reOrderLevelTable.setGridColor(new java.awt.Color(255, 255, 255));
        reOrderLevelTable.setIntercellSpacing(new java.awt.Dimension(5, 5));
        reOrderLevelTable.setRowHeight(28);
        reOrderLevelTable.setSelectionBackground(new java.awt.Color(153, 153, 153));
        jScrollPane11.setViewportView(reOrderLevelTable);
        if (reOrderLevelTable.getColumnModel().getColumnCount() > 0) {
            reOrderLevelTable.getColumnModel().getColumn(0).setResizable(false);
            reOrderLevelTable.getColumnModel().getColumn(1).setResizable(false);
            reOrderLevelTable.getColumnModel().getColumn(2).setResizable(false);
            reOrderLevelTable.getColumnModel().getColumn(3).setResizable(false);
            reOrderLevelTable.getColumnModel().getColumn(4).setResizable(false);
            reOrderLevelTable.getColumnModel().getColumn(5).setResizable(false);
        }

        javax.swing.GroupLayout viewReOrderLevelPanelLayout = new javax.swing.GroupLayout(viewReOrderLevelPanel);
        viewReOrderLevelPanel.setLayout(viewReOrderLevelPanelLayout);
        viewReOrderLevelPanelLayout.setHorizontalGroup(
            viewReOrderLevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewReOrderLevelPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 1138, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        viewReOrderLevelPanelLayout.setVerticalGroup(
            viewReOrderLevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewReOrderLevelPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                .addContainerGap())
        );

        viewPanel.add(viewReOrderLevelPanel, "card2");

        viewGRNPanel.setBackground(new java.awt.Color(255, 255, 255));
        viewGRNPanel.setForeground(new java.awt.Color(51, 51, 51));

        jLabel90.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel90.setForeground(new java.awt.Color(51, 51, 51));
        jLabel90.setText("Search Item By Barcode");

        jLabel91.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel91.setForeground(new java.awt.Color(51, 51, 51));
        jLabel91.setText("Search By Description");

        onGrnSearchResultCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                onGrnSearchResultComboItemStateChanged(evt);
            }
        });

        grnSearchByBarcodeTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                grnSearchByBarcodeTxtKeyPressed(evt);
            }
        });

        jScrollPane9.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        tableGRN.setAutoCreateRowSorter(true);
        tableGRN.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tableGRN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Batch ID", "Description", "Pack Size", "Unit Price", "Adding Qty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableGRN.setGridColor(new java.awt.Color(255, 255, 255));
        tableGRN.setRowHeight(28);
        tableGRN.setSelectionBackground(new java.awt.Color(153, 153, 153));
        tableGRN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableGRNMousePressed(evt);
            }
        });
        tableGRN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableGRNKeyPressed(evt);
            }
        });
        jScrollPane9.setViewportView(tableGRN);
        if (tableGRN.getColumnModel().getColumnCount() > 0) {
            tableGRN.getColumnModel().getColumn(0).setResizable(false);
            tableGRN.getColumnModel().getColumn(1).setResizable(false);
            tableGRN.getColumnModel().getColumn(2).setResizable(false);
            tableGRN.getColumnModel().getColumn(3).setResizable(false);
            tableGRN.getColumnModel().getColumn(4).setResizable(false);
            tableGRN.getColumnModel().getColumn(5).setResizable(false);
        }

        jLabel94.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel94.setForeground(new java.awt.Color(51, 51, 51));
        jLabel94.setText("Barcode");

        jLabel95.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel95.setForeground(new java.awt.Color(51, 51, 51));
        jLabel95.setText("Description");

        onGRNBarcodetxt.setEditable(false);

        onGRNPackSizeTxt.setEditable(false);

        onGRNDescriptionTxt.setEditable(false);

        jLabel96.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel96.setForeground(new java.awt.Color(51, 51, 51));
        jLabel96.setText("Adding Quantity");

        jLabel97.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel97.setForeground(new java.awt.Color(51, 51, 51));
        jLabel97.setText("Pack Size");

        onGRNLISTBatch.setSelectionBackground(new java.awt.Color(204, 204, 204));
        onGRNLISTBatch.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                onGRNLISTBatchValueChanged(evt);
            }
        });
        jScrollPane10.setViewportView(onGRNLISTBatch);

        jLabel98.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel98.setForeground(new java.awt.Color(51, 51, 51));
        jLabel98.setText("EXP Date");

        jLabel99.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel99.setForeground(new java.awt.Color(51, 51, 51));
        jLabel99.setText("MF Date");

        jLabel101.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel101.setForeground(new java.awt.Color(51, 51, 51));
        jLabel101.setText("Qty On Hand");

        jLabel102.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel102.setForeground(new java.awt.Color(51, 51, 51));
        jLabel102.setText("Item ID");

        jLabel103.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel103.setForeground(new java.awt.Color(51, 51, 51));
        jLabel103.setText("Unit Price");

        jLabel104.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel104.setForeground(new java.awt.Color(51, 51, 51));
        jLabel104.setText("Batch ID");

        onGRNBatchEXPDateTxt.setEditable(false);

        onGRNMFDateTxt.setEditable(false);

        onGRNBatchTxt.setEditable(false);

        onGRNUnitPriceTxt.setEditable(false);

        onGrnBatchIDtxt.setEditable(false);

        OnGRNBatchItemIDtxt.setEditable(false);

        jLabel100.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel100.setForeground(new java.awt.Color(51, 51, 51));
        jLabel100.setText("Batch");

        onGRNbatchQtyOnHandTxt.setEditable(false);

        putToGrnTableButton.setBackground(new java.awt.Color(51, 51, 51));
        putToGrnTableButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        putToGrnTableButton.setForeground(new java.awt.Color(255, 255, 255));
        putToGrnTableButton.setText("Put To Table");
        putToGrnTableButton.setToolTipText("Please Select Batch Before Click This Button");
        putToGrnTableButton.setEnabled(false);
        putToGrnTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                putToGrnTableButtonActionPerformed(evt);
            }
        });
        putToGrnTableButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                putToGrnTableButtonKeyPressed(evt);
            }
        });

        jButton12.setBackground(new java.awt.Color(51, 51, 51));
        jButton12.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton12.setForeground(new java.awt.Color(255, 255, 255));
        jButton12.setText("Place GRN");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jButton12.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton12KeyPressed(evt);
            }
        });

        jButton13.setBackground(new java.awt.Color(51, 51, 51));
        jButton13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton13.setForeground(new java.awt.Color(255, 255, 255));
        jButton13.setText("Add New Item");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setBackground(new java.awt.Color(51, 51, 51));
        jButton14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton14.setForeground(new java.awt.Color(255, 255, 255));
        jButton14.setText("Add New Batch");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setBackground(new java.awt.Color(204, 0, 0));
        jButton15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton15.setForeground(new java.awt.Color(255, 255, 255));
        jButton15.setText("Remove Item From Table");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jLabel93.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel93.setForeground(new java.awt.Color(51, 51, 51));
        jLabel93.setText("Suplier Name");

        suplierNameTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                suplierNameTxtKeyPressed(evt);
            }
        });

        onGRNAddingQtyTxt.setEditable(false);
        onGRNAddingQtyTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0.00"))));
        onGRNAddingQtyTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                onGRNAddingQtyTxtKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout viewGRNPanelLayout = new javax.swing.GroupLayout(viewGRNPanel);
        viewGRNPanel.setLayout(viewGRNPanelLayout);
        viewGRNPanelLayout.setHorizontalGroup(
            viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewGRNPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel93)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(suplierNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewGRNPanelLayout.createSequentialGroup()
                .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, viewGRNPanelLayout.createSequentialGroup()
                        .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(viewGRNPanelLayout.createSequentialGroup()
                                .addGap(252, 252, 252)
                                .addComponent(putToGrnTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewGRNPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewGRNPanelLayout.createSequentialGroup()
                                        .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel97, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel95, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel96, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(onGRNPackSizeTxt)
                                            .addComponent(onGRNDescriptionTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                                            .addComponent(onGRNAddingQtyTxt)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewGRNPanelLayout.createSequentialGroup()
                                        .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel94, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel90))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(grnSearchByBarcodeTxt)
                                            .addComponent(onGRNBarcodetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(viewGRNPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel100, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel103, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                                    .addComponent(jLabel99, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel98, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(onGRNMFDateTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(onGRNBatchTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(onGRNUnitPriceTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(onGRNBatchEXPDateTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(38, 38, 38)
                                .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel101, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel104, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel102, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(onGRNbatchQtyOnHandTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(OnGRNBatchItemIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(onGrnBatchIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, viewGRNPanelLayout.createSequentialGroup()
                                .addComponent(jLabel91)
                                .addGap(6, 6, 6)
                                .addComponent(onGRNSearchByDescriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(onGrnSearchResultCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(17, 17, 17))
        );
        viewGRNPanelLayout.setVerticalGroup(
            viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewGRNPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(viewGRNPanelLayout.createSequentialGroup()
                        .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel90)
                            .addComponent(grnSearchByBarcodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel94, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(onGRNBarcodetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(viewGRNPanelLayout.createSequentialGroup()
                                .addComponent(jLabel95, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(13, 13, 13))
                            .addGroup(viewGRNPanelLayout.createSequentialGroup()
                                .addComponent(onGRNDescriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel97, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(onGRNPackSizeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel96, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(onGRNAddingQtyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(putToGrnTableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(viewGRNPanelLayout.createSequentialGroup()
                        .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel91)
                            .addComponent(onGrnSearchResultCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(onGRNSearchByDescriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(viewGRNPanelLayout.createSequentialGroup()
                                .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel98)
                                    .addComponent(onGRNBatchEXPDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(onGRNMFDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel99)
                                    .addComponent(jLabel104)
                                    .addComponent(onGrnBatchIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel102)
                                    .addComponent(OnGRNBatchItemIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(onGRNBatchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel100))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(onGRNUnitPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(onGRNbatchQtyOnHandTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel101)
                                    .addComponent(jLabel103)))
                            .addComponent(jScrollPane10))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(viewGRNPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel93, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(suplierNameTxt))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        viewPanel.add(viewGRNPanel, "card2");

        ViewReturnPanel.setBackground(new java.awt.Color(255, 255, 255));
        ViewReturnPanel.setForeground(new java.awt.Color(51, 51, 51));

        jLabel108.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel108.setText("Search By Barcode");

        jLabel114.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel114.setText("Description");

        onReturnsCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                onReturnsComboItemStateChanged(evt);
            }
        });

        jLabel115.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel115.setText("Description");

        jLabel116.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel116.setText("Pack Size");

        jLabel117.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel117.setText("Return Qty");

        onReturnDescriptionTxt.setEditable(false);
        onReturnDescriptionTxt.setBackground(new java.awt.Color(255, 255, 255));

        onReturnPackSizeTxt.setEditable(false);
        onReturnPackSizeTxt.setBackground(new java.awt.Color(255, 255, 255));

        returnQtyTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                returnQtyTxtKeyPressed(evt);
            }
        });

        onReturnLISTBatch.setSelectionBackground(new java.awt.Color(204, 204, 204));
        onReturnLISTBatch.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                onReturnLISTBatchValueChanged(evt);
            }
        });
        jScrollPane12.setViewportView(onReturnLISTBatch);

        btnReturnCart.setBackground(new java.awt.Color(51, 51, 51));
        btnReturnCart.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnReturnCart.setForeground(new java.awt.Color(255, 255, 255));
        btnReturnCart.setText("Put To Return Items Cart");
        btnReturnCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnCartActionPerformed(evt);
            }
        });

        jLabel118.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel118.setForeground(new java.awt.Color(51, 51, 51));
        jLabel118.setText("EXP Date");

        jLabel119.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel119.setForeground(new java.awt.Color(51, 51, 51));
        jLabel119.setText("MF Date");

        jLabel120.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel120.setForeground(new java.awt.Color(51, 51, 51));
        jLabel120.setText("Batch");

        jLabel121.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel121.setForeground(new java.awt.Color(51, 51, 51));
        jLabel121.setText("Unit Price");

        jLabel122.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel122.setForeground(new java.awt.Color(51, 51, 51));
        jLabel122.setText("Qty On Hand");

        jLabel123.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel123.setForeground(new java.awt.Color(51, 51, 51));
        jLabel123.setText("Item ID");

        jLabel124.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel124.setForeground(new java.awt.Color(51, 51, 51));
        jLabel124.setText("Batch ID");

        onReturnBatchEXPDateTxt.setEditable(false);
        onReturnBatchEXPDateTxt.setBackground(new java.awt.Color(255, 255, 255));

        onReturnMFDateTxt.setEditable(false);
        onReturnMFDateTxt.setBackground(new java.awt.Color(255, 255, 255));

        onReturnUnitPriceTxt.setEditable(false);
        onReturnUnitPriceTxt.setBackground(new java.awt.Color(255, 255, 255));

        onReturnBatchTxt.setEditable(false);
        onReturnBatchTxt.setBackground(new java.awt.Color(255, 255, 255));

        onReturnBatchIDtxt.setEditable(false);
        onReturnBatchIDtxt.setBackground(new java.awt.Color(255, 255, 255));

        OnReturnBatchItemIDtxt.setEditable(false);
        OnReturnBatchItemIDtxt.setBackground(new java.awt.Color(255, 255, 255));

        onReturnbatchQtyOnHandTxt.setEditable(false);
        onReturnbatchQtyOnHandTxt.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane13.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        tableReturns.setAutoCreateRowSorter(true);
        tableReturns.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tableReturns.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Batch ID", "Description", "Pack Size", "Unit Price", "Return Qty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableReturns.setGridColor(new java.awt.Color(255, 255, 255));
        tableReturns.setRowHeight(28);
        tableReturns.setSelectionBackground(new java.awt.Color(153, 153, 153));
        tableReturns.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableReturnsMousePressed(evt);
            }
        });
        tableReturns.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableReturnsKeyPressed(evt);
            }
        });
        jScrollPane13.setViewportView(tableReturns);
        if (tableReturns.getColumnModel().getColumnCount() > 0) {
            tableReturns.getColumnModel().getColumn(0).setResizable(false);
            tableReturns.getColumnModel().getColumn(1).setResizable(false);
            tableReturns.getColumnModel().getColumn(2).setResizable(false);
            tableReturns.getColumnModel().getColumn(3).setResizable(false);
            tableReturns.getColumnModel().getColumn(4).setResizable(false);
            tableReturns.getColumnModel().getColumn(5).setResizable(false);
        }

        jButton19.setBackground(new java.awt.Color(204, 0, 0));
        jButton19.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton19.setForeground(new java.awt.Color(255, 255, 255));
        jButton19.setText("Return Items");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ViewReturnPanelLayout = new javax.swing.GroupLayout(ViewReturnPanel);
        ViewReturnPanel.setLayout(ViewReturnPanelLayout);
        ViewReturnPanelLayout.setHorizontalGroup(
            ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewReturnPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ViewReturnPanelLayout.createSequentialGroup()
                        .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel117, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel116, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel115, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel108, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(returnBarcode)
                            .addComponent(onReturnDescriptionTxt)
                            .addComponent(onReturnPackSizeTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                            .addComponent(returnQtyTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)))
                    .addComponent(btnReturnCart, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ViewReturnPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel120, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel121, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                            .addComponent(jLabel119, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel118, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(onReturnUnitPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(onReturnBatchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(onReturnMFDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(onReturnBatchEXPDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel122, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel124, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel123, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(onReturnbatchQtyOnHandTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OnReturnBatchItemIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(onReturnBatchIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30))
                    .addGroup(ViewReturnPanelLayout.createSequentialGroup()
                        .addComponent(jLabel114)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(onReturnsSearchDesTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(onReturnsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addComponent(jScrollPane13)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ViewReturnPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(106, 106, 106))
        );
        ViewReturnPanelLayout.setVerticalGroup(
            ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewReturnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ViewReturnPanelLayout.createSequentialGroup()
                        .addComponent(returnBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2))
                    .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(onReturnsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel108, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(onReturnsSearchDesTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel114, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ViewReturnPanelLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel118)
                            .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(ViewReturnPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel124)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel123)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel122)
                                        .addComponent(onReturnUnitPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel121)))
                                .addGroup(ViewReturnPanelLayout.createSequentialGroup()
                                    .addComponent(onReturnBatchIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(OnReturnBatchItemIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(onReturnbatchQtyOnHandTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(ViewReturnPanelLayout.createSequentialGroup()
                                    .addComponent(onReturnBatchEXPDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(onReturnMFDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel119))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(onReturnBatchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel120))
                                    .addGap(26, 26, 26)))
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ViewReturnPanelLayout.createSequentialGroup()
                        .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel115, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(onReturnDescriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel116, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(onReturnPackSizeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ViewReturnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel117, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(returnQtyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addComponent(btnReturnCart, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        viewPanel.add(ViewReturnPanel, "card2");

        BackUpsPanel.setBackground(new java.awt.Color(255, 255, 255));

        jPanel11112.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11112.setForeground(new java.awt.Color(51, 51, 51));

        pathTxt.setEditable(false);
        pathTxt.setBackground(new java.awt.Color(255, 255, 255));

        jLabel110.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel110.setForeground(new java.awt.Color(51, 51, 51));
        jLabel110.setText("Path");

        jButton11.setBackground(new java.awt.Color(51, 51, 51));
        jButton11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton11.setForeground(new java.awt.Color(255, 255, 255));
        jButton11.setText("Brows");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton16.setBackground(new java.awt.Color(51, 51, 51));
        jButton16.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton16.setForeground(new java.awt.Color(255, 255, 255));
        jButton16.setText("Back Up Now");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setBackground(new java.awt.Color(51, 51, 51));
        jButton17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton17.setForeground(new java.awt.Color(255, 255, 255));
        jButton17.setText("Static Path");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jSeparator6.setForeground(new java.awt.Color(51, 51, 51));

        jLabel111.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel111.setForeground(new java.awt.Color(51, 51, 51));
        jLabel111.setText("Back Up");

        jLabel112.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel112.setForeground(new java.awt.Color(51, 51, 51));
        jLabel112.setText("Restore Back Up");

        selectedBackUpFilePathTxt.setEditable(false);
        selectedBackUpFilePathTxt.setBackground(new java.awt.Color(255, 255, 255));

        jLabel113.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel113.setForeground(new java.awt.Color(51, 51, 51));
        jLabel113.setText("Select Back up File");

        btn_restore.setBackground(new java.awt.Color(51, 51, 51));
        btn_restore.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_restore.setForeground(new java.awt.Color(255, 255, 255));
        btn_restore.setText("Restore");
        btn_restore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_restoreActionPerformed(evt);
            }
        });

        btnBrows2.setBackground(new java.awt.Color(51, 51, 51));
        btnBrows2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnBrows2.setForeground(new java.awt.Color(255, 255, 255));
        btnBrows2.setText("Brows");
        btnBrows2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrows2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11112Layout = new javax.swing.GroupLayout(jPanel11112);
        jPanel11112.setLayout(jPanel11112Layout);
        jPanel11112Layout.setHorizontalGroup(
            jPanel11112Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11112Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel110, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(jPanel11112Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pathTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel11112Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))
                .addGap(69, 69, 69))
            .addComponent(jSeparator6)
            .addGroup(jPanel11112Layout.createSequentialGroup()
                .addGroup(jPanel11112Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11112Layout.createSequentialGroup()
                        .addGap(513, 513, 513)
                        .addComponent(jLabel111, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11112Layout.createSequentialGroup()
                        .addGap(483, 483, 483)
                        .addComponent(jLabel112)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11112Layout.createSequentialGroup()
                .addContainerGap(126, Short.MAX_VALUE)
                .addComponent(jLabel113, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(jPanel11112Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11112Layout.createSequentialGroup()
                        .addComponent(selectedBackUpFilePathTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnBrows2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btn_restore, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(126, Short.MAX_VALUE))
        );
        jPanel11112Layout.setVerticalGroup(
            jPanel11112Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11112Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel111)
                .addGap(55, 55, 55)
                .addGroup(jPanel11112Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel110, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pathTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11112Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(51, 51, 51)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel112)
                .addGap(54, 54, 54)
                .addGroup(jPanel11112Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectedBackUpFilePathTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jLabel113)
                    .addComponent(btnBrows2, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btn_restore, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addGap(214, 214, 214))
        );

        javax.swing.GroupLayout BackUpsPanelLayout = new javax.swing.GroupLayout(BackUpsPanel);
        BackUpsPanel.setLayout(BackUpsPanelLayout);
        BackUpsPanelLayout.setHorizontalGroup(
            BackUpsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11112, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        BackUpsPanelLayout.setVerticalGroup(
            BackUpsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11112, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        viewPanel.add(BackUpsPanel, "card2");

        background.add(viewPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 160, 1130, 610));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(51, 51, 51));
        jLabel16.setText("_");
        jLabel16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel16MousePressed(evt);
            }
        });
        background.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 0, 20, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_HomeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_HomeMousePressed
        setColour(btn_Home);
        resetColour(btn_Accounts);
        resetColour(btn_Item);
        resetColour(btn_Returns);
        resetColour(btn_GRN);
        resetColour(btn_BackUpPanel);
        resetColour(btn_ReorderLevel);
        resetColour(btn_Reports);
        navigationLable.setText("Admin/Home");
        todayTransactioLable.setText("Today transaction");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Home Panel
        viewPanel.add(homeViewPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btn_HomeMousePressed

    private void btn_AccountsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_AccountsMousePressed
        setColour(btn_Accounts);
        resetColour(btn_Home);
        resetColour(btn_GRN);
        resetColour(btn_Returns);
        resetColour(btn_BackUpPanel);
        resetColour(btn_Item);
        resetColour(btn_ReorderLevel);
        resetColour(btn_Reports);
        navigationLable.setText("Admin/Accounts");
        todayTransactioLable.setText("");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Home Panel
        viewPanel.add(AccountsViewPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btn_AccountsMousePressed

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        simpleTimer.stop();
        simpleTimer = null;
        System.exit(0);
    }//GEN-LAST:event_jLabel10MouseClicked

    private void jLabel11MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MousePressed
        new Welcome().setVisible(true);
        simpleTimer.stop();
        simpleTimer = null;
        dispose();
    }//GEN-LAST:event_jLabel11MousePressed

    private void btn_ItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_ItemMousePressed
        setColour(btn_Item);
        resetColour(btn_Home);
        resetColour(btn_Returns);
        resetColour(btn_GRN);
        resetColour(btn_BackUpPanel);
        resetColour(btn_Accounts);
        resetColour(btn_ReorderLevel);
        resetColour(btn_Reports);
        navigationLable.setText("Admin/Item/New Item");
        todayTransactioLable.setText("");

        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(ItemViewPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
        addItembarcodeTxt.requestFocus(true);
    }//GEN-LAST:event_btn_ItemMousePressed

    private void btn_ReportsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_ReportsMousePressed
        setColour(btn_Reports);
        resetColour(btn_Returns);
        resetColour(btn_Home);
        resetColour(btn_GRN);
        resetColour(btn_BackUpPanel);
        resetColour(btn_Accounts);
        resetColour(btn_ReorderLevel);
        resetColour(btn_Item);
        navigationLable.setText("Admin/Report");
        todayTransactioLable.setText("");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(ViewReportsPane);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btn_ReportsMousePressed

    private void btn_ReorderLevelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_ReorderLevelMousePressed
        setColour(btn_ReorderLevel);
        resetColour(btn_Home);
        resetColour(btn_GRN);
        resetColour(btn_Returns);
        resetColour(btn_BackUpPanel);
        resetColour(btn_Accounts);
        resetColour(btn_Reports);
        resetColour(btn_Item);
        navigationLable.setText("Admin/Re-Order Level");
        todayTransactioLable.setText("");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(viewReOrderLevelPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btn_ReorderLevelMousePressed

    private void btnAddNewBatchForItem1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddNewBatchForItem1MousePressed
        navigationLable.setText("Admin/Item/New Batch");
        todayTransactioLable.setText("");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(BatchViewPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
        searchByBarcodeTxtForBatch.requestFocus(true);
    }//GEN-LAST:event_btnAddNewBatchForItem1MousePressed

    private void addBatchMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBatchMousePressed
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(BatchViewPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
        navigationLable.setText("Admin/Item/New Batch");
        todayTransactioLable.setText("");
        searchByBarcodeTxtForBatch.requestFocus(true);
    }//GEN-LAST:event_addBatchMousePressed

    private void btnAddNewItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddNewItemMousePressed
        navigationLable.setText("Admin/Item/New Item");
        todayTransactioLable.setText("");
        addItembarcodeTxt.requestFocus(true);
    }//GEN-LAST:event_btnAddNewItemMousePressed

    private void btnAddNewItem1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddNewItem1MousePressed
        navigationLable.setText("Admin/Item/New Item");
        todayTransactioLable.setText("");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(ItemViewPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
        addItembarcodeTxt.requestFocus(true);
    }//GEN-LAST:event_btnAddNewItem1MousePressed

    private void searchByBarcodeTxtForBatchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchByBarcodeTxtForBatchKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String barcode = searchByBarcodeTxtForBatch.getText();
            if (!Validation.validateEmptyTextFeald(barcode)) {
                ItemService itemService = (ItemService) context.getBean("ItemService");
                try {
                    Item itemByBarcode = itemService.getItemByBarcode(barcode);
                    if (itemByBarcode == null) {
                        onBatchItemIdTxt.setText("");
                        onBatchBarcodeTxt.setText("");
                        onBatchPackSizeTxt.setText("");
                        onBatchReOrderLevelTxt.setText("");
                        onbatchDescriptionTxt.setText("");
                        listModelForBatch.removeAllElements();
                        listModelForBatchObjects.removeAllElements();
                        avalableBatchList.setModel(listModelForBatch);
                        onBatchBatchIdtxt.setText("");
                        onBatchBatchMFDtxt.setText("");
                        onBatchBatchEXPtxt.setText("");
                        onBatchBatchQtyOnHandtxt.setText("");
                        onBatchBatchItemIdtxt.setText("");
                        onBatchBatchUnitPricetxt.setText("");
                        onBatchBatchtxt.setText("");
                        JOptionPane.showMessageDialog(this, "Can not Find Item... unregistered Barcode Value!");
                    } else {
                        List<Batch> allBatches = itemService.getItemsBatchesById(itemByBarcode.getId());
                        listModelForBatch.removeAllElements();
                        listModelForBatchObjects.removeAllElements();
                        if (allBatches != null) {
                            for (Batch b : allBatches) {
                                listModelForBatch.addElement(b.getBatch());
                                listModelForBatchObjects.addElement(b);
                            }
                            avalableBatchList.setModel(listModelForBatch);
                            onBatchItemIdTxt.setText(itemByBarcode.getId() + "");
                            onBatchBarcodeTxt.setText(itemByBarcode.getBarcode());
                            onBatchPackSizeTxt.setText(itemByBarcode.getPackSize());
                            onBatchReOrderLevelTxt.setText(itemByBarcode.getReOrderLevel() + "");
                            onbatchDescriptionTxt.setText(itemByBarcode.getDescription());
                            searchByDescriptionForBatchCombo.requestFocus();

                        }
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }
            }
        }
    }//GEN-LAST:event_searchByBarcodeTxtForBatchKeyPressed

    private void btnAddItemForDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemForDBActionPerformed

        //Get Values 
        String barcode = addItembarcodeTxt.getText();
        String description = addItemdescriptionTxt.getText();
        String packSize = addItempackSizeTxt.getText();
        String reOrderLevel = addItemreOrderLevelTxt.getText();
        String batch = addItemBatchTxt.getText();
        String EXPtxt = addItemEXPDateTxt.getText();
        String MFDtxt = addItemMFDTxt.getText();
        String qty = addItemQtyOnHandTxt.getText();
        String unitPrice = addItemUnitPriceTxt.getText();
        //Check every Feelds is not null

        boolean v2 = Validation.validateEmptyTextFeald(description);
        boolean v3 = Validation.validateEmptyTextFeald(packSize);
        boolean v4 = Validation.validateEmptyTextFeald(reOrderLevel);
        boolean v5 = Validation.validateEmptyTextFeald(batch);
        boolean v6 = Validation.validateEmptyTextFeald(EXPtxt);
        boolean v7 = Validation.validateEmptyTextFeald(MFDtxt);
        boolean v8 = Validation.validateEmptyTextFeald(qty);
        boolean v9 = Validation.validateEmptyTextFeald(unitPrice);

        if (description.trim().length() < 34) {
            if (!v2 && !v3 && !v4 && !v5 && !v6 && !v7 && !v8 && !v9) {
                ItemService itemService = (ItemService) context.getBean("ItemService");
                try {
                    Item searchItemIsAlreadyExits = itemService.getItemByDescription(description.trim());
                    Item searchItemAlreadyExitsByBarcode = itemService.getItemByBarcode(barcode.trim());
                    if (searchItemAlreadyExitsByBarcode == null) {
                        if (searchItemIsAlreadyExits == null) {
                            //Create ITEM
                            ItemDTO i = new ItemDTO();
                            i.setBarcode(barcode);
                            i.setDescription(description);
                            i.setPackSize(packSize);
                            i.setReOrderLevel(Integer.parseInt(reOrderLevel));
                            //Create Batch
                            LocalDate MFD = new LocalDate(MFDtxt);
                            LocalDate EXP = new LocalDate(EXPtxt);

                            Batch batchDto = new Batch();
                            batchDto.setBatch(batch);
                            batchDto.setEXPD(EXP);
                            batchDto.setMFD(MFD);
                            batchDto.setQtyOnHand(Double.parseDouble(qty));
                            batchDto.setUnitPrice(Double.parseDouble(unitPrice));

                            try {
                                boolean add = itemService.add(i);
                                if (add) {
                                    Item itemByDescription = itemService.getItemByDescription(description);
                                    int searchedId = itemByDescription.getId();
                                    List<Batch> allBatch = itemService.getItemsBatchesById(searchedId);
                                    if (allBatch == null) {
                                        allBatch = new ArrayList<>();
                                    }
                                    allBatch.add(batchDto);
                                    itemByDescription.setBatch(allBatch);
                                    //item for batch added then update item
                                    ItemDTO itemDTO1 = new ItemDTO();
                                    itemDTO1.setBarcode(itemByDescription.getBarcode());
                                    itemDTO1.setBatch(itemByDescription.getBatch());
                                    itemDTO1.setDescription(itemByDescription.getDescription());
                                    itemDTO1.setId(itemByDescription.getId());
                                    itemDTO1.setPackSize(itemByDescription.getPackSize());
                                    itemDTO1.setReOrderLevel(itemByDescription.getReOrderLevel());
                                    boolean update = itemService.update(itemDTO1);
                                    if (update) {
                                        JOptionPane.showMessageDialog(this, "Item Added Successfully..");
                                        addItembarcodeTxt.setText("");
                                        addItemdescriptionTxt.setText("");
                                        addItempackSizeTxt.setText("");
                                        addItemreOrderLevelTxt.setText("");
                                        addItemBatchTxt.setText("");
                                        addItemEXPDateTxt.setText("");
                                        addItemMFDTxt.setText("");
                                        addItemQtyOnHandTxt.setText("");
                                        addItemUnitPriceTxt.setText("");
                                        addItembarcodeTxt.requestFocusInWindow();
                                    } else {
                                        JOptionPane.showMessageDialog(this, "Item Added Faild..");
                                        addItembarcodeTxt.setText("");
                                        addItemdescriptionTxt.setText("");
                                        addItempackSizeTxt.setText("");
                                        addItemreOrderLevelTxt.setText("");
                                        addItemBatchTxt.setText("");
                                        addItemEXPDateTxt.setText("");
                                        addItemMFDTxt.setText("");
                                        addItemQtyOnHandTxt.setText("");
                                        addItemUnitPriceTxt.setText("");
                                        addItembarcodeTxt.requestFocusInWindow();
                                    }
                                }
                            } catch (Exception ex) {
                                JOptionPane.showMessageDialog(this, ex);
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "This Item Already Exits...");
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "This Barcode Already Refistered");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Please input data first..");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Enter only 34 characters description..");
        }

    }//GEN-LAST:event_btnAddItemForDBActionPerformed

    private void jLabel16MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel16MousePressed
        this.setState(Frame.ICONIFIED);
    }//GEN-LAST:event_jLabel16MousePressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String batchName = newBatchTxt.getText();
        String expDate = newBatchEXPDatetxt.getText();
        String mfDate = newBatchMFDtxt.getText();
        String qty = newBatchAddQtyTxt.getText();
        String unitPrice = newBatchUnitPriceTxt.getText();
        boolean v1 = Validation.validateEmptyTextFeald(batchName);
        boolean v2 = Validation.validateEmptyTextFeald(expDate);
        boolean v3 = Validation.validateEmptyTextFeald(mfDate);
        boolean v4 = Validation.validateEmptyTextFeald(qty);
        boolean v5 = Validation.validateEmptyTextFeald(unitPrice);
        if (!v1 && !v2 && !v3 && !v4 && !v5) {
            String itemId = onBatchItemIdTxt.getText();
            boolean v6 = Validation.validateEmptyTextFeald(itemId);
            if (!v6) {
                BatchService batchService = (BatchService) context.getBean("BatchService");
                ItemService itemService = (ItemService) context.getBean("ItemService");
                try {
                    //batch for MFD and EXP
                    LocalDate MFD = new LocalDate(mfDate);
                    LocalDate EXP = new LocalDate(expDate);

                    Batch batch = new Batch();
                    batch.setBatch(batchName);
                    batch.setEXPD(EXP);
                    batch.setMFD(MFD);
                    batch.setQtyOnHand(Double.parseDouble(qty));
                    batch.setUnitPrice(Double.parseDouble(unitPrice));
                    BatchDTO searched = batchService.getBatchByBatchNameAndItemId(batchName, Integer.parseInt(itemId));
                    if (searched == null) {
                        ItemDTO targetItem = itemService.search(Integer.parseInt(itemId));
                        List<Batch> allBatch = itemService.getItemsBatchesById(Integer.parseInt(itemId));
                        if (allBatch == null) {
                            allBatch = new ArrayList<>();
                        }
                        allBatch.add(batch);
                        targetItem.setBatch(allBatch);
                        boolean update = itemService.update(targetItem);
                        if (update) {
                            newBatchTxt.setText("");
                            newBatchEXPDatetxt.setText("");
                            newBatchMFDtxt.setText("");
                            newBatchAddQtyTxt.setText("");
                            newBatchUnitPriceTxt.setText("");
                            List<Batch> allBatches = itemService.getItemsBatchesById(targetItem.getId());
                            listModelForBatch.removeAllElements();
                            listModelForBatchObjects.removeAllElements();
                            for (Batch b : allBatches) {
                                listModelForBatch.addElement(b.getBatch());
                                listModelForBatchObjects.addElement(b);
                            }
                            JOptionPane.showMessageDialog(this, "New Batch Added Successfully..");
                        } else {
                            JOptionPane.showMessageDialog(this, "New Batch Added Faild..");
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "This batch alerady Exits.. cause of can not add this batch again.!");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Search Item By Barcode Or Item Description First..");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Input Data");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void avalableBatchListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_avalableBatchListValueChanged
        if (avalableBatchList.getSelectedIndex() == -1) {
        } else {
            Batch selectedBatch = (Batch) listModelForBatchObjects.get(avalableBatchList.getSelectedIndex());
            onBatchBatchIdtxt.setText(selectedBatch.getId() + "");
            onBatchBatchMFDtxt.setText(selectedBatch.getMFD() + "");
            onBatchBatchEXPtxt.setText(selectedBatch.getEXPD() + "");
            onBatchBatchQtyOnHandtxt.setText(selectedBatch.getQtyOnHand() + "");
            onBatchBatchItemIdtxt.setText(onBatchItemIdTxt.getText());
            onBatchBatchUnitPricetxt.setText(selectedBatch.getUnitPrice() + "");
            onBatchBatchtxt.setText(selectedBatch.getBatch());
        }
    }//GEN-LAST:event_avalableBatchListValueChanged

    private void btnAddItemForDBKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnAddItemForDBKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //Get Values 
            String barcode = addItembarcodeTxt.getText();
            String description = addItemdescriptionTxt.getText();
            String packSize = addItempackSizeTxt.getText();
            String reOrderLevel = addItemreOrderLevelTxt.getText();
            String batch = addItemBatchTxt.getText();
            String EXPtxt = addItemEXPDateTxt.getText();
            String MFDtxt = addItemMFDTxt.getText();
            String qty = addItemQtyOnHandTxt.getText();
            String unitPrice = addItemUnitPriceTxt.getText();
            //Check every Feelds is not null

            boolean v2 = Validation.validateEmptyTextFeald(description);
            boolean v3 = Validation.validateEmptyTextFeald(packSize);
            boolean v4 = Validation.validateEmptyTextFeald(reOrderLevel);
            boolean v5 = Validation.validateEmptyTextFeald(batch);
            boolean v6 = Validation.validateEmptyTextFeald(EXPtxt);
            boolean v7 = Validation.validateEmptyTextFeald(MFDtxt);
            boolean v8 = Validation.validateEmptyTextFeald(qty);
            boolean v9 = Validation.validateEmptyTextFeald(unitPrice);
            if (description.trim().length() < 34) {

                if (!v2 && !v3 && !v4 && !v5 && !v6 && !v7 && !v8 && !v9) {
                    ItemService itemService = (ItemService) context.getBean("ItemService");
                    try {
                        Item searchItemIsAlreadyExits = itemService.getItemByDescription(description.trim());
                        Item searchItemAlreadyExitsByBarcode = itemService.getItemByBarcode(barcode.trim());
                        if (searchItemAlreadyExitsByBarcode == null) {
                            if (searchItemIsAlreadyExits == null) {
                                //Create ITEM
                                ItemDTO i = new ItemDTO();
                                i.setBarcode(barcode);
                                i.setDescription(description);
                                i.setPackSize(packSize);
                                i.setReOrderLevel(Integer.parseInt(reOrderLevel));
                                //Create Batch
                                LocalDate MFD = new LocalDate(MFDtxt);
                                LocalDate EXP = new LocalDate(EXPtxt);

                                Batch batchDto = new Batch();
                                batchDto.setBatch(batch);
                                batchDto.setEXPD(EXP);
                                batchDto.setMFD(MFD);
                                batchDto.setQtyOnHand(Double.parseDouble(qty));
                                batchDto.setUnitPrice(Double.parseDouble(unitPrice));

                                try {
                                    boolean add = itemService.add(i);
                                    if (add) {
                                        Item itemByDescription = itemService.getItemByDescription(description);
                                        int searchedId = itemByDescription.getId();
                                        List<Batch> allBatch = itemService.getItemsBatchesById(searchedId);
                                        if (allBatch == null) {
                                            allBatch = new ArrayList<>();
                                        }
                                        allBatch.add(batchDto);
                                        itemByDescription.setBatch(allBatch);
                                        //item for batch added then update item
                                        ItemDTO itemDTO1 = new ItemDTO();
                                        itemDTO1.setBarcode(itemByDescription.getBarcode());
                                        itemDTO1.setBatch(itemByDescription.getBatch());
                                        itemDTO1.setDescription(itemByDescription.getDescription());
                                        itemDTO1.setId(itemByDescription.getId());
                                        itemDTO1.setPackSize(itemByDescription.getPackSize());
                                        itemDTO1.setReOrderLevel(itemByDescription.getReOrderLevel());
                                        boolean update = itemService.update(itemDTO1);
                                        if (update) {
                                            JOptionPane.showMessageDialog(this, "Item Added Successfully..");
                                            addItembarcodeTxt.setText("");
                                            addItemdescriptionTxt.setText("");
                                            addItempackSizeTxt.setText("");
                                            addItemreOrderLevelTxt.setText("");
                                            addItemBatchTxt.setText("");
                                            addItemEXPDateTxt.setText("");
                                            addItemMFDTxt.setText("");
                                            addItemQtyOnHandTxt.setText("");
                                            addItemUnitPriceTxt.setText("");
                                            addItembarcodeTxt.setRequestFocusEnabled(true);
                                        } else {
                                            JOptionPane.showMessageDialog(this, "Item Added Faild..");
                                            addItembarcodeTxt.setText("");
                                            addItemdescriptionTxt.setText("");
                                            addItempackSizeTxt.setText("");
                                            addItemreOrderLevelTxt.setText("");
                                            addItemBatchTxt.setText("");
                                            addItemEXPDateTxt.setText("");
                                            addItemMFDTxt.setText("");
                                            addItemQtyOnHandTxt.setText("");
                                            addItemUnitPriceTxt.setText("");
                                            addItembarcodeTxt.setRequestFocusEnabled(true);
                                        }
                                    }
                                } catch (Exception ex) {
                                    JOptionPane.showMessageDialog(this, ex);
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "This Item Already Exits...");
                            }

                        } else {
                            JOptionPane.showMessageDialog(this, "This Barcode Already Refistered");
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex);
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Please input data first..");
                }
            }
        }
    }//GEN-LAST:event_btnAddItemForDBKeyPressed

    private void addItemEXPDateTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addItemEXPDateTxtFocusGained
        validDateFomatLable1.show();
    }//GEN-LAST:event_addItemEXPDateTxtFocusGained

    private void addItemMFDTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addItemMFDTxtFocusGained
        validDateFormatLable2.show();
    }//GEN-LAST:event_addItemMFDTxtFocusGained

    private void addItemEXPDateTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addItemEXPDateTxtFocusLost
        validDateFomatLable1.hide();
    }//GEN-LAST:event_addItemEXPDateTxtFocusLost

    private void addItemMFDTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addItemMFDTxtFocusLost
        validDateFormatLable2.hide();
    }//GEN-LAST:event_addItemMFDTxtFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String name = accountsNameTxt.getText().trim();
        String userName = accountsUserNameTxt.getText().trim();
        String type = accountsTypeCombo.getSelectedItem().toString();
        String pass = accountsPassTxt.getText();
        boolean v1 = Validation.validateEmptyTextFeald(name);
        boolean v2 = Validation.validateEmptyTextFeald(userName);
        boolean v3 = Validation.validateEmptyTextFeald(pass);
        if (!v1 && !v2 && !v3) {
            UserService userService = (UserService) context.getBean("UserService");
            //Create User
            UserDTO userDTO = new UserDTO();
            userDTO.setType(type);
            userDTO.setPassword(pass);
            userDTO.setUserName(userName);
            userDTO.setName(name);

            boolean add = false;
            try {
                add = userService.add(userDTO);
            } catch (Exception ex) {
                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (add) {
                accountsNameTxt.setText("");
                accountsUserNameTxt.setText("");
                accountsPassTxt.setText("");
                userAccountIdTxt.setText("");
                JOptionPane.showMessageDialog(this, "User Account Created Successfully..!");

            } else {
                accountsNameTxt.setText("");
                accountsUserNameTxt.setText("");
                accountsPassTxt.setText("");
                userAccountIdTxt.setText("");
                JOptionPane.showMessageDialog(this, "User Account Created Faild..! Try Difference UserName");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Input Data..");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void accountsUserNameTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_accountsUserNameTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String name = accountsNameTxt.getText();
            if (!Validation.validateEmptyTextFeald(name)) {
                UserService userService = (UserService) context.getBean("UserService");
                try {
                    UserDTO searchByUserName = userService.searchByUserName(name);
                    if (searchByUserName != null) {
                        accountsNameTxt.setText(searchByUserName.getName());
                        accountsPassTxt.setText(searchByUserName.getPassword());
                    } else {
                        JOptionPane.showMessageDialog(this, "User Not Found");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }

            }

        }
    }//GEN-LAST:event_accountsUserNameTxtKeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        DefaultTableModel model = (DefaultTableModel) userAccountTable.getModel();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        userAccountTable.setDefaultRenderer(String.class, centerRenderer);
        UserService userService = (UserService) context.getBean("UserService");
        int rowCount = model.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        try {
            List<UserDTO> all = userService.getAll();
            for (UserDTO u : all) {
                String type = u.getType();
                String name = u.getName();
                String userName = u.getUserName();
                model.addRow(new Object[]{type, name, userName});
            }
            userAccountTable.setModel(model);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void userAccountTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userAccountTableMousePressed

        int row = userAccountTable.getSelectedRow();
        //int column = userAccountTable.getSelectedColumn();
        Object value = userAccountTable.getValueAt(row, 2);
        UserService userService = (UserService) context.getBean("UserService");
        try {
            UserDTO s = userService.searchByUserName(value.toString());
            if (s != null) {
                accountsNameTxt.setText(s.getName());
                accountsUserNameTxt.setText(s.getUserName());
                accountsPassTxt.setText(s.getPassword());
                userAccountIdTxt.setText(s.getId() + "");
                if (s.getType().trim().equalsIgnoreCase("Cashier")) {
                    accountsTypeCombo.setSelectedIndex(0);
                } else {
                    accountsTypeCombo.setSelectedIndex(1);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
        }
        System.out.println(value.toString());

    }//GEN-LAST:event_userAccountTableMousePressed

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String name = accountsNameTxt.getText().trim();
            String userName = accountsUserNameTxt.getText().trim();
            String type = accountsTypeCombo.getSelectedItem().toString();
            String pass = accountsPassTxt.getText();
            boolean v1 = Validation.validateEmptyTextFeald(name);
            boolean v2 = Validation.validateEmptyTextFeald(userName);
            boolean v3 = Validation.validateEmptyTextFeald(pass);
            if (!v1 && !v2 && !v3) {
                UserService userService = (UserService) context.getBean("UserService");
                //Create User
                UserDTO userDTO = new UserDTO();
                userDTO.setType(type);
                userDTO.setPassword(pass);
                userDTO.setUserName(userName);
                userDTO.setName(name);

                boolean add = false;
                try {
                    add = userService.add(userDTO);
                } catch (Exception ex) {
                    Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (add) {
                    accountsNameTxt.setText("");
                    accountsUserNameTxt.setText("");
                    accountsPassTxt.setText("");
                    userAccountIdTxt.setText("");
                    JOptionPane.showMessageDialog(this, "User Account Created Successfully..!");

                } else {
                    accountsNameTxt.setText("");
                    accountsUserNameTxt.setText("");
                    accountsPassTxt.setText("");
                    userAccountIdTxt.setText("");
                    JOptionPane.showMessageDialog(this, "User Account Created Faild..! Try Difference UserName");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Input Data..");
            }
        }
    }//GEN-LAST:event_jButton1KeyPressed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        String name = accountsNameTxt.getText().trim();
        String userName = accountsUserNameTxt.getText();
        String type = accountsTypeCombo.getSelectedItem().toString();
        String pass = accountsPassTxt.getText();
        String id = userAccountIdTxt.getText();
        boolean v1 = Validation.validateEmptyTextFeald(name);
        boolean v2 = Validation.validateEmptyTextFeald(userName);
        boolean v3 = Validation.validateEmptyTextFeald(pass);
        boolean v4 = Validation.validateEmptyTextFeald(id);
        if (!v1 && !v2 && !v3 && !v4) {
            UserService userService = (UserService) context.getBean("UserService");
            try {
                UserDTO u = userService.search(Integer.parseInt(userAccountIdTxt.getText()));
                if (u != null) {
                    u.setName(name);
                    u.setUserName(userName);
                    u.setPassword(pass);
                    u.setType(type);
                    boolean update = userService.update(u);
                    if (update) {
                        accountsNameTxt.setText("");
                        accountsUserNameTxt.setText("");
                        accountsPassTxt.setText("");
                        userAccountIdTxt.setText("");
                        JOptionPane.showMessageDialog(this, "User Updated Successfully..");
                    } else {
                        accountsNameTxt.setText("");
                        accountsUserNameTxt.setText("");
                        accountsPassTxt.setText("");
                        userAccountIdTxt.setText("");
                        JOptionPane.showMessageDialog(this, "User Updated Faild..");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Can not find user please check data you enterd again!");
                }
            } catch (Exception ex) {
                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Select First User in below table!");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton4KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String name = accountsNameTxt.getText().trim();
            String userName = accountsUserNameTxt.getText();
            String type = accountsTypeCombo.getSelectedItem().toString();
            String pass = accountsPassTxt.getText();
            String id = userAccountIdTxt.getText();
            boolean v1 = Validation.validateEmptyTextFeald(name);
            boolean v2 = Validation.validateEmptyTextFeald(userName);
            boolean v3 = Validation.validateEmptyTextFeald(pass);
            boolean v4 = Validation.validateEmptyTextFeald(id);
            if (!v1 && !v2 && !v3 && !v4) {
                UserService userService = (UserService) context.getBean("UserService");
                try {
                    UserDTO u = userService.search(Integer.parseInt(userAccountIdTxt.getText()));
                    if (u != null) {
                        u.setName(name);
                        u.setUserName(userName);
                        u.setPassword(pass);
                        u.setType(type);
                        boolean update = userService.update(u);
                        if (update) {
                            accountsNameTxt.setText("");
                            accountsUserNameTxt.setText("");
                            accountsPassTxt.setText("");
                            userAccountIdTxt.setText("");
                            JOptionPane.showMessageDialog(this, "User Updated Successfully..");
                        } else {
                            accountsNameTxt.setText("");
                            accountsUserNameTxt.setText("");
                            accountsPassTxt.setText("");
                            userAccountIdTxt.setText("");
                            JOptionPane.showMessageDialog(this, "User Updated Faild..");
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Can not find user please check data you enterd again!");
                    }
                } catch (Exception ex) {
                    Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Select First User in below table!");
            }
        }
    }//GEN-LAST:event_jButton4KeyPressed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String name = accountsNameTxt.getText().trim();
        String userName = accountsUserNameTxt.getText();
        String type = accountsTypeCombo.getSelectedItem().toString();
        String pass = accountsPassTxt.getText();
        String id = userAccountIdTxt.getText();
        boolean v1 = Validation.validateEmptyTextFeald(name);
        boolean v2 = Validation.validateEmptyTextFeald(userName);
        boolean v3 = Validation.validateEmptyTextFeald(pass);
        boolean v4 = Validation.validateEmptyTextFeald(id);
        if (!v1 && !v2 && !v3 && !v4) {
            UserService userService = (UserService) context.getBean("UserService");
            try {
                boolean delete = userService.delete(Integer.parseInt(id));
                if (delete) {
                    accountsNameTxt.setText("");
                    accountsUserNameTxt.setText("");
                    accountsPassTxt.setText("");
                    userAccountIdTxt.setText("");
                    JOptionPane.showMessageDialog(this, "User Deleted Successfully!");
                } else {
                    accountsNameTxt.setText("");
                    accountsUserNameTxt.setText("");
                    accountsPassTxt.setText("");
                    userAccountIdTxt.setText("");
                    JOptionPane.showMessageDialog(this, "User Deleted Faild!");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Select First User in below table!");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void btnAddNewItem2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddNewItem2MousePressed
        navigationLable.setText("Admin/Item/New Item");

        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(ItemViewPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
        addItembarcodeTxt.requestFocus(true);
    }//GEN-LAST:event_btnAddNewItem2MousePressed

    private void addBatch1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBatch1MousePressed
        navigationLable.setText("Admin/Item/New Batch");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(BatchViewPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_addBatch1MousePressed

    private void btnViewAllItemsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnViewAllItemsMousePressed
        navigationLable.setText("Admin/Item/All Items");

        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(ViewAllItemPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
        //addItembarcodeTxt.requestFocus(true);
    }//GEN-LAST:event_btnViewAllItemsMousePressed

    private void btnAddNewItem3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddNewItem3MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddNewItem3MousePressed

    private void addBatch2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBatch2MousePressed
        navigationLable.setText("Admin/Item/New Batch");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(BatchViewPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_addBatch2MousePressed

    private void btnAddNewItem4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddNewItem4MousePressed
        navigationLable.setText("Admin/Item/New Item");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(ItemViewPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btnAddNewItem4MousePressed

    private void addBatch3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addBatch3MousePressed
        navigationLable.setText("Admin/Item/New Batch");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(BatchViewPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_addBatch3MousePressed

    private void btnUpdateItem1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateItem1MousePressed
        navigationLable.setText("Admin/Item/Update Item");

        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(UpdateItemPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btnUpdateItem1MousePressed

    private void btnDeleteItemonItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteItemonItemMousePressed
        navigationLable.setText("Admin/Item/Delete Item");

        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(DeleteItemPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btnDeleteItemonItemMousePressed

    private void btnBatchONViewAllItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBatchONViewAllItemMousePressed
        navigationLable.setText("Admin/Item/All Items");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(ViewAllItemPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btnBatchONViewAllItemMousePressed

    private void jPanel3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MousePressed
        navigationLable.setText("Admin/Item/Update Item");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(UpdateItemPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_jPanel3MousePressed

    private void jPanel4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MousePressed
        navigationLable.setText("Admin/Item/Delete Item");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(DeleteItemPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_jPanel4MousePressed

    private void jLabel69MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel69MousePressed
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(ViewAllItemPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_jLabel69MousePressed

    private void btnUpdateItem3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateItem3MousePressed
        navigationLable.setText("Admin/Item/Update Item");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(UpdateItemPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btnUpdateItem3MousePressed

    private void btnUpdateItem2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateItem2MousePressed
        navigationLable.setText("Admin/Item/Delete Item");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(DeleteItemPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btnUpdateItem2MousePressed

    private void jLabel72MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel72MousePressed
        navigationLable.setText("Admin/Item/New Item");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(ItemViewPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_jLabel72MousePressed

    private void btnViewAllItems2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnViewAllItems2MousePressed
        navigationLable.setText("Admin/Item/All Items");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(ViewAllItemPanel);
        viewPanel.repaint();
        viewPanel.revalidate();    }//GEN-LAST:event_btnViewAllItems2MousePressed

    private void btnUpdateItem5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateItem5MousePressed
        navigationLable.setText("Admin/Item/Update Item");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(UpdateItemPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btnUpdateItem5MousePressed

    private void btnUpdateItem4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateItem4MousePressed
        navigationLable.setText("Admin/Item/Delete Item");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(DeleteItemPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btnUpdateItem4MousePressed

    private void btnViewAllItems3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnViewAllItems3MousePressed
        navigationLable.setText("Admin/Item/All Items");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(ViewAllItemPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btnViewAllItems3MousePressed

    private void btnUpdateItem7MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateItem7MousePressed
        navigationLable.setText("Admin/Item/Update Item");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(UpdateItemPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btnUpdateItem7MousePressed

    private void btnUpdateItem6MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateItem6MousePressed
        navigationLable.setText("Admin/Item/Delete Item");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Item Panel
        viewPanel.add(DeleteItemPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btnUpdateItem6MousePressed

    private void btn_GRNMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_GRNMousePressed
        setColour(btn_GRN);
        resetColour(btn_Home);
        resetColour(btn_Accounts);
        resetColour(btn_Item);
        resetColour(btn_BackUpPanel);
        resetColour(btn_ReorderLevel);
        resetColour(btn_Reports);
        resetColour(btn_Returns);
        navigationLable.setText("Admin/GRN");
        todayTransactioLable.setText("");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Home Panel
        viewPanel.add(viewGRNPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btn_GRNMousePressed

    private void searchByDescriptionForBatchComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByDescriptionForBatchComboActionPerformed
        String s = (String) searchByDescriptionForBatchCombo.getSelectedItem();
        boolean v1 = Validation.validateEmptyTextFeald(s);
        if (!v1) {
            searchByDescriptionForBatchCombo.removeAllItems();
            ItemService itemService = (ItemService) context.getBean("ItemService");
            try {
                List<Item> list = itemService.getItemsByDescriptionLike(s);
                if (list != null) {
                    searchByDescriptionForBatchCombo.addItem(s);
                    for (Item item : list) {
                        searchByDescriptionForBatchCombo.addItem(item.getDescription());
                    }
                    searchByDescriptionForBatchCombo.firePopupMenuWillBecomeVisible();
                } else {
                    JOptionPane.showMessageDialog(this, "No Match Found.!");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Input Data For Searching!");
        }


    }//GEN-LAST:event_searchByDescriptionForBatchComboActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int row = avaibleBatchTableForDeleteItemOrBatch.getSelectedRow();
        if (row != -1) {
            Object ob = avaibleBatchTableForDeleteItemOrBatch.getValueAt(row, 0);
            if (ob != null) {
                String value = ob.toString();
                int batchId = Integer.parseInt(value);
                BatchService batchService = (BatchService) context.getBean("BatchService");
                try {
                    boolean delete = batchService.delete(batchId);
                    if (delete) {
                        DefaultTableModel model = (DefaultTableModel) avaibleBatchTableForDeleteItemOrBatch.getModel();
                        int rowCount = model.getRowCount();
                        for (int i = rowCount - 1; i >= 0; i--) {
                            model.removeRow(i);
                        }
                        int row2 = tableItemOrBatchDelete.getSelectedRow();
                        if (row != -1) {
                            Object value2 = tableItemOrBatchDelete.getValueAt(row, 0);
                            if (value2 != null) {
                                String itemId = value2.toString();
                                ItemService itemService = (ItemService) context.getBean("ItemService");
                                List<Batch> all = itemService.getItemsBatchesById(Integer.parseInt(itemId));
                                if (all != null) {
                                    for (Batch b : all) {
                                        model.addRow(new Object[]{b.getId(),
                                            b.getBatch(),
                                            b.getEXPD(),
                                            b.getMFD(),
                                            b.getQtyOnHand(),
                                            b.getUnitPrice()});
                                    }
                                    avaibleBatchTableForDeleteItemOrBatch.setModel(model);
                                    JOptionPane.showMessageDialog(this, "Batch Delete Successfully!");
                                }
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Batch Delete Faild!");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Select removing batch on available bathc table!");
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        int row = tableItemOrBatchDelete.getSelectedRow();
        if (row != -1) {
            Object value = tableItemOrBatchDelete.getValueAt(row, 0);
            if (value != null) {
                String stringValue = value.toString();
                ItemService itemService = (ItemService) context.getBean("ItemService");
                try {
                    boolean delete = itemService.delete(Integer.parseInt(stringValue));
                    if (delete) {
                        DefaultTableModel model1 = (DefaultTableModel) tableItemOrBatchDelete.getModel();
                        DefaultTableModel model = (DefaultTableModel) avaibleBatchTableForDeleteItemOrBatch.getModel();
                        int rowCount = model.getRowCount();
                        int rowCount1 = model1.getRowCount();
                        for (int i = rowCount - 1; i >= 0; i--) {
                            model.removeRow(i);
                        }
                        for (int i = rowCount1 - 1; i >= 0; i--) {
                            model1.removeRow(i);
                        }
                        JOptionPane.showMessageDialog(this, "Item Deleted Successfully.!");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }

            }
        } else {
            JOptionPane.showMessageDialog(this, "Select Item First");
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void searchByBarcodeForDeleteItemOrBatchTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchByBarcodeForDeleteItemOrBatchTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String barcode = searchByBarcodeForDeleteItemOrBatchTxt.getText();
            if (!Validation.validateEmptyTextFeald(barcode)) {
                DefaultTableModel model1 = (DefaultTableModel) tableItemOrBatchDelete.getModel();
                DefaultTableModel model = (DefaultTableModel) avaibleBatchTableForDeleteItemOrBatch.getModel();
                ItemService itemService = (ItemService) context.getBean("ItemService");
                try {
                    Item itemByBarcode = itemService.getItemByBarcode(barcode);
                    if (itemByBarcode == null) {
                        int rowCount = model.getRowCount();
                        int rowCount1 = model1.getRowCount();
                        for (int i = rowCount - 1; i >= 0; i--) {
                            model.removeRow(i);
                        }
                        for (int i = rowCount1 - 1; i >= 0; i--) {
                            model1.removeRow(i);
                        }
                        JOptionPane.showMessageDialog(this, "Can not Find Item... unregistered Barcode Value!");
                    } else {

                        int rowCount1 = model1.getRowCount();
                        //Remove rows one by one from the end of the table
                        for (int i = rowCount1 - 1; i >= 0; i--) {
                            model1.removeRow(i);
                        }
                        model1.addRow(new Object[]{itemByBarcode.getId(),
                            itemByBarcode.getBarcode(),
                            itemByBarcode.getDescription(),
                            itemByBarcode.getPackSize(),
                            itemByBarcode.getReOrderLevel()});
                        tableItemOrBatchDelete.setModel(model1);
                        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                        tableItemOrBatchDelete.setDefaultRenderer(String.class, centerRenderer);
                        List<Batch> allBatches = itemService.getItemsBatchesById(itemByBarcode.getId());

                        if (allBatches != null) {
                            int rowCount = model.getRowCount();
                            //Remove rows one by one from the end of the table
                            for (int i = rowCount - 1; i >= 0; i--) {
                                model.removeRow(i);
                            }
                            for (Batch b : allBatches) {
                                model.addRow(new Object[]{b.getId(),
                                    b.getBatch(),
                                    b.getEXPD(),
                                    b.getMFD(),
                                    b.getQtyOnHand(),
                                    b.getUnitPrice()});
                            }
                        }

                        avaibleBatchTableForDeleteItemOrBatch.setModel(model);
                        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                        avaibleBatchTableForDeleteItemOrBatch.setDefaultRenderer(String.class, centerRenderer);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_searchByBarcodeForDeleteItemOrBatchTxtKeyPressed

    private void searchForDeleteItemByDescriptionTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchForDeleteItemByDescriptionTxtKeyPressed

    }//GEN-LAST:event_searchForDeleteItemByDescriptionTxtKeyPressed

    private void tableItemOrBatchDeleteMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableItemOrBatchDeleteMousePressed
        int row = tableItemOrBatchDelete.getSelectedRow();
        Object value = tableItemOrBatchDelete.getValueAt(row, 0);
        if (value != null) {
            String id = value.toString();
            int selectedId = Integer.parseInt(id);
            ItemService itemService = (ItemService) context.getBean("ItemService");
            try {
                List<Batch> all = itemService.getItemsBatchesById(selectedId);
                if (all != null) {
                    DefaultTableModel model = (DefaultTableModel) avaibleBatchTableForDeleteItemOrBatch.getModel();
                    int rowCount = model.getRowCount();
                    for (int i = rowCount - 1; i >= 0; i--) {
                        model.removeRow(i);
                    }
                    for (Batch b : all) {
                        model.addRow(new Object[]{b.getId(),
                            b.getBatch(),
                            b.getEXPD(),
                            b.getMFD(),
                            b.getQtyOnHand(),
                            b.getUnitPrice()});

                    }
                    avaibleBatchTableForDeleteItemOrBatch.setModel(model);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please search Item Before Select row");
        }
    }//GEN-LAST:event_tableItemOrBatchDeleteMousePressed

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String batchName = newBatchTxt.getText();
            String expDate = newBatchEXPDatetxt.getText();
            String mfDate = newBatchMFDtxt.getText();
            String qty = newBatchAddQtyTxt.getText();
            String unitPrice = newBatchUnitPriceTxt.getText();
            boolean v1 = Validation.validateEmptyTextFeald(batchName);
            boolean v2 = Validation.validateEmptyTextFeald(expDate);
            boolean v3 = Validation.validateEmptyTextFeald(mfDate);
            boolean v4 = Validation.validateEmptyTextFeald(qty);
            boolean v5 = Validation.validateEmptyTextFeald(unitPrice);
            if (!v1 && !v2 && !v3 && !v4 && !v5) {
                String itemId = onBatchItemIdTxt.getText();
                boolean v6 = Validation.validateEmptyTextFeald(itemId);
                if (!v6) {
                    BatchService batchService = (BatchService) context.getBean("BatchService");
                    ItemService itemService = (ItemService) context.getBean("ItemService");
                    try {
                        //batch for MFD and EXP
                        LocalDate MFD = new LocalDate(mfDate);
                        LocalDate EXP = new LocalDate(expDate);

                        Batch batch = new Batch();
                        batch.setBatch(batchName);
                        batch.setEXPD(EXP);
                        batch.setMFD(MFD);
                        batch.setQtyOnHand(Double.parseDouble(qty));
                        batch.setUnitPrice(Double.parseDouble(unitPrice));
                        BatchDTO searched = batchService.getBatchByBatchNameAndItemId(batchName, Integer.parseInt(itemId));
                        if (searched == null) {
                            ItemDTO targetItem = itemService.search(Integer.parseInt(itemId));
                            List<Batch> allBatch = itemService.getItemsBatchesById(Integer.parseInt(itemId));
                            if (allBatch == null) {
                                allBatch = new ArrayList<>();
                            }
                            allBatch.add(batch);
                            targetItem.setBatch(allBatch);
                            boolean update = itemService.update(targetItem);
                            if (update) {
                                newBatchTxt.setText("");
                                newBatchEXPDatetxt.setText("");
                                newBatchMFDtxt.setText("");
                                newBatchAddQtyTxt.setText("");
                                newBatchUnitPriceTxt.setText("");
                                List<Batch> allBatches = itemService.getItemsBatchesById(targetItem.getId());
                                listModelForBatch.removeAllElements();
                                listModelForBatchObjects.removeAllElements();
                                for (Batch b : allBatches) {
                                    listModelForBatch.addElement(b.getBatch());
                                    listModelForBatchObjects.addElement(b);
                                }
                                JOptionPane.showMessageDialog(this, "New Batch Added Successfully..");
                            } else {
                                JOptionPane.showMessageDialog(this, "New Batch Added Faild..");
                            }

                        } else {
                            JOptionPane.showMessageDialog(this, "This batch alerady Exits.. cause of can not add this batch again.!");
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please Search Item By Barcode Or Item Description First..");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Input Data");
            }
        }
    }//GEN-LAST:event_jButton2KeyPressed

    private void searchByDescriptionForBatchComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_searchByDescriptionForBatchComboItemStateChanged
        int index = searchByDescriptionForBatchCombo.getSelectedIndex();
        if (index != 0 && index != -1) {
            String description = searchByDescriptionForBatchCombo.getSelectedItem().toString();

            ItemService itemService = (ItemService) context.getBean("ItemService");
            try {
                Item itemByBarcode = itemService.getItemByDescription(description);
                if (itemByBarcode == null) {
                    onBatchItemIdTxt.setText("");
                    onBatchBarcodeTxt.setText("");
                    onBatchPackSizeTxt.setText("");
                    onBatchReOrderLevelTxt.setText("");
                    onbatchDescriptionTxt.setText("");
                    listModelForBatch.removeAllElements();
                    listModelForBatchObjects.removeAllElements();
                    avalableBatchList.setModel(listModelForBatch);
                    onBatchBatchIdtxt.setText("");
                    onBatchBatchMFDtxt.setText("");
                    onBatchBatchEXPtxt.setText("");
                    onBatchBatchQtyOnHandtxt.setText("");
                    onBatchBatchItemIdtxt.setText("");
                    onBatchBatchUnitPricetxt.setText("");
                    onBatchBatchtxt.setText("");
                    JOptionPane.showMessageDialog(this, "Can not Find Item... unregistered Barcode Value!");
                } else {
                    List<Batch> allBatches = itemService.getItemsBatchesById(itemByBarcode.getId());
                    listModelForBatch.removeAllElements();
                    listModelForBatchObjects.removeAllElements();
                    for (Batch b : allBatches) {
                        listModelForBatch.addElement(b.getBatch());
                        listModelForBatchObjects.addElement(b);
                    }
                    avalableBatchList.setModel(listModelForBatch);
                    onBatchItemIdTxt.setText(itemByBarcode.getId() + "");
                    onBatchBarcodeTxt.setText(itemByBarcode.getBarcode());
                    onBatchPackSizeTxt.setText(itemByBarcode.getPackSize());
                    onBatchReOrderLevelTxt.setText(itemByBarcode.getReOrderLevel() + "");
                    onbatchDescriptionTxt.setText(itemByBarcode.getDescription());
                    searchByDescriptionForBatchCombo.requestFocus();
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
            }

        }
    }//GEN-LAST:event_searchByDescriptionForBatchComboItemStateChanged

    private void jButton7KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton7KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int row = tableItemOrBatchDelete.getSelectedRow();
            if (row != -1) {
                Object value = tableItemOrBatchDelete.getValueAt(row, 0);
                if (value != null) {
                    String stringValue = value.toString();
                    ItemService itemService = (ItemService) context.getBean("ItemService");
                    try {
                        boolean delete = itemService.delete(Integer.parseInt(stringValue));
                        if (delete) {
                            DefaultTableModel model1 = (DefaultTableModel) tableItemOrBatchDelete.getModel();
                            DefaultTableModel model = (DefaultTableModel) avaibleBatchTableForDeleteItemOrBatch.getModel();
                            int rowCount = model.getRowCount();
                            int rowCount1 = model1.getRowCount();
                            for (int i = rowCount - 1; i >= 0; i--) {
                                model.removeRow(i);
                            }
                            for (int i = rowCount1 - 1; i >= 0; i--) {
                                model1.removeRow(i);
                            }
                            JOptionPane.showMessageDialog(this, "Item Deleted Successfully.!");
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex);
                    }

                }
            } else {
                JOptionPane.showMessageDialog(this, "Select Item First");
            }
        }
    }//GEN-LAST:event_jButton7KeyPressed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        String batchId = onUpdateBatchIdtxt.getText();
        boolean v1 = Validation.validateEmptyTextFeald(batchId);
        if (!v1) {
            String Exp = onUpdateBatchEXPtxt.getText();
            String MFD = onUpdateBatchMFDtxt.getText();
            String qty = onUpdateBatchQtyOnHandtxt.getText();
            String unitP = onUpdateBatchUnitPricetxt.getText();
            boolean v2 = Validation.validateEmptyTextFeald(Exp);
            boolean v3 = Validation.validateEmptyTextFeald(MFD);
            boolean v4 = Validation.validateEmptyTextFeald(unitP);
            if (!v2 && !v3 && !v4) {
                LocalDate MFDD = new LocalDate(MFD);
                LocalDate EXPD = new LocalDate(Exp);
                BatchService batchService = (BatchService) context.getBean("BatchService");
                try {
                    BatchDTO search = batchService.search(Integer.parseInt(batchId));
                    search.setEXPD(EXPD);
                    search.setMFD(MFDD);
                    search.setUnitPrice(Double.parseDouble(unitP));
                    search.setQtyOnHand(Double.parseDouble(qty));
                    boolean update = batchService.update(search);
                    if (update) {
                        onUpdateBatchIdtxt.setText("");
                        onUpdateBatchMFDtxt.setText("");
                        onUpdateBatchEXPtxt.setText("");
                        onUpdateBatchQtyOnHandtxt.setText("");
                        onUpdateBatchItemIdtxt.setText("");
                        onUpdateBatchUnitPricetxt.setText("");
                        onUpdateBatchtxt.setText("");
                        JOptionPane.showMessageDialog(this, "Batch Updated Succefully...");
                    } else {
                        JOptionPane.showMessageDialog(this, "Batch Update Faild");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Select batch on batch list");
        }

    }//GEN-LAST:event_jButton8ActionPerformed

    private void onUpdateItemPanelSearchItemBarcodeTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_onUpdateItemPanelSearchItemBarcodeTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String barcode = onUpdateItemPanelSearchItemBarcodeTxt.getText();
            if (!Validation.validateEmptyTextFeald(barcode)) {
                ItemService itemService = (ItemService) context.getBean("ItemService");
                try {
                    Item itemByBarcode = itemService.getItemByBarcode(barcode);
                    if (itemByBarcode == null) {
                        onUpdateItemIdTxt.setText("");
                        onUpdateBarcodeTxt.setText("");
                        onUpdatePackSizeTxt.setText("");
                        onUpdateReOrderLevelTxt.setText("");
                        onUpdateDescriptionTxt.setText("");
                        listModel2.removeAllElements();
                        listModelForBatchObjects.removeAllElements();
                        avalableBatchList.setModel(listModel2);
                        onUpdateBatchIdtxt.setText("");
                        onUpdateBatchMFDtxt.setText("");
                        onUpdateBatchEXPtxt.setText("");
                        onUpdateBatchQtyOnHandtxt.setText("");
                        onUpdateBatchItemIdtxt.setText("");
                        onUpdateBatchUnitPricetxt.setText("");
                        onUpdateBatchtxt.setText("");
                        JOptionPane.showMessageDialog(this, "Can not Find Item... unregistered Barcode Value!");
                    } else {
                        List<Batch> allBatches = itemService.getItemsBatchesById(itemByBarcode.getId());
                        listModel2.removeAllElements();
                        listModelForBatchObjects.removeAllElements();
                        if (allBatches != null) {
                            for (Batch b : allBatches) {
                                listModel2.addElement(b.getBatch());
                                listModelForBatchObjects.addElement(b);
                            }
                            listOnBatchUpdate.setModel(listModel2);
                            onUpdateItemIdTxt.setText(itemByBarcode.getId() + "");
                            onUpdateBarcodeTxt.setText(itemByBarcode.getBarcode());
                            onUpdatePackSizeTxt.setText(itemByBarcode.getPackSize());
                            onUpdateReOrderLevelTxt.setText(itemByBarcode.getReOrderLevel() + "");
                            onUpdateDescriptionTxt.setText(itemByBarcode.getDescription());
                        }
                        //searchByDescriptionForBatchCombo.requestFocus();
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }
            }
        }
    }//GEN-LAST:event_onUpdateItemPanelSearchItemBarcodeTxtKeyPressed

    private void SearchedItemsOnUpdateComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SearchedItemsOnUpdateComboItemStateChanged
        int index = SearchedItemsOnUpdateCombo.getSelectedIndex();
        if (index != -1) {
            Item i = (Item) searchCombModel.getElementAt(index);
            if (i != null) {
                ItemService itemService = (ItemService) context.getBean("ItemService");
                try {
                    List<Batch> allBatches = itemService.getItemsBatchesById(i.getId());
                    listModel2.removeAllElements();
                    listModelForBatchObjects.removeAllElements();
                    for (Batch b : allBatches) {
                        listModel2.addElement(b.getBatch());
                        listModelForBatchObjects.addElement(b);
                    }
                    listOnBatchUpdate.setModel(listModel2);
                    onUpdateItemIdTxt.setText(i.getId() + "");
                    onUpdateBarcodeTxt.setText(i.getBarcode());
                    onUpdatePackSizeTxt.setText(i.getPackSize());
                    onUpdateReOrderLevelTxt.setText(i.getReOrderLevel() + "");
                    onUpdateDescriptionTxt.setText(i.getDescription());
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }

            }
        }
    }//GEN-LAST:event_SearchedItemsOnUpdateComboItemStateChanged

    private void listOnBatchUpdateValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listOnBatchUpdateValueChanged
        if (listOnBatchUpdate.getSelectedIndex() == -1) {
        } else {
            Batch selectedBatch = (Batch) listModelForBatchObjects.get(listOnBatchUpdate.getSelectedIndex());
            onUpdateBatchIdtxt.setText(selectedBatch.getId() + "");
            onUpdateBatchMFDtxt.setText(selectedBatch.getMFD() + "");
            onUpdateBatchEXPtxt.setText(selectedBatch.getEXPD() + "");
            onUpdateBatchQtyOnHandtxt.setText(selectedBatch.getQtyOnHand() + "");
            onUpdateBatchItemIdtxt.setText(onUpdateItemIdTxt.getText());
            onUpdateBatchUnitPricetxt.setText(selectedBatch.getUnitPrice() + "");
            onUpdateBatchtxt.setText(selectedBatch.getBatch());
        }
    }//GEN-LAST:event_listOnBatchUpdateValueChanged

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        String itemId = onUpdateItemIdTxt.getText();
        String packSize = onUpdatePackSizeTxt.getText();
        String reOrderLevel = onUpdateReOrderLevelTxt.getText();
        String description = onUpdateDescriptionTxt.getText();
        boolean v1 = Validation.validateEmptyTextFeald(itemId);
        boolean v2 = Validation.validateEmptyTextFeald(packSize);
        boolean v3 = Validation.validateEmptyTextFeald(reOrderLevel);
        boolean v4 = Validation.validateEmptyTextFeald(description);
        if (!v1) {
            if (!v2 && !v3 && !v4) {
                ItemService itemService = (ItemService) context.getBean("ItemService");
                try {
                    ItemDTO search = itemService.search(Integer.parseInt(itemId));
                    search.setPackSize(packSize);
                    search.setDescription(description);
                    search.setReOrderLevel(Integer.parseInt(reOrderLevel));
                    boolean update = itemService.update(search);
                    if (update) {
                        onUpdateItemIdTxt.setText("");
                        onUpdatePackSizeTxt.setText("");
                        onUpdateReOrderLevelTxt.setText("");
                        onUpdateDescriptionTxt.setText("");
                        onUpdateBarcodeTxt.setText("");
                        listModel2.removeAllElements();
                        listModelForBatchObjects.removeAllElements();
                        listOnBatchUpdate.setModel(listModel2);
                        onUpdateBatchIdtxt.setText("");
                        onUpdateBatchMFDtxt.setText("");
                        onUpdateBatchEXPtxt.setText("");
                        onUpdateBatchQtyOnHandtxt.setText("");
                        onUpdateBatchItemIdtxt.setText("");
                        onUpdateBatchUnitPricetxt.setText("");
                        onUpdateBatchtxt.setText("");

                        JOptionPane.showMessageDialog(this, "Item Updated Successfully.!");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Search Item First");
        }

    }//GEN-LAST:event_jButton9ActionPerformed

    private void ViewAllItemTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ViewAllItemTableMousePressed
        int row = ViewAllItemTable.getSelectedRow();
        Object value = ViewAllItemTable.getValueAt(row, 0);
        if (value != null) {
            String id = value.toString();
            int selectedId = Integer.parseInt(id);
            ItemService itemService = (ItemService) context.getBean("ItemService");
            try {
                List<Batch> all = itemService.getItemsBatchesById(selectedId);
                if (all != null) {
                    DefaultTableModel model = (DefaultTableModel) viewAllBatchtable.getModel();
                    int rowCount = model.getRowCount();
                    for (int i = rowCount - 1; i >= 0; i--) {
                        model.removeRow(i);
                    }
                    for (Batch b : all) {
                        model.addRow(new Object[]{b.getId(),
                            b.getBatch(),
                            b.getEXPD(),
                            b.getMFD(),
                            b.getQtyOnHand(),
                            b.getUnitPrice()});

                    }
                    viewAllBatchtable.setModel(model);
                    centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                    viewAllBatchtable.setDefaultRenderer(String.class, centerRenderer);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please search Item Before Select row");
        }
    }//GEN-LAST:event_ViewAllItemTableMousePressed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        DefaultTableModel model = (DefaultTableModel) ViewAllItemTable.getModel();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        ViewAllItemTable.setDefaultRenderer(String.class, centerRenderer);
        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        ItemService itemService = (ItemService) context.getBean("ItemService");
        try {
            List<ItemDTO> all = itemService.getAll();
            for (ItemDTO i : all) {
                model.addRow(new Object[]{i.getId(),
                    i.getBarcode(),
                    i.getDescription(),
                    i.getPackSize(),
                    i.getReOrderLevel()});
            }
            ViewAllItemTable.setModel(model);
        } catch (Exception ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton10ActionPerformed


    private void tableGRNMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableGRNMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableGRNMousePressed

    private void btn_ReturnsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_ReturnsMousePressed
        setColour(btn_Returns);
        resetColour(btn_Home);
        resetColour(btn_Accounts);
        resetColour(btn_Item);
        resetColour(btn_BackUpPanel);
        resetColour(btn_ReorderLevel);
        resetColour(btn_Reports);
        resetColour(btn_GRN);
        navigationLable.setText("Admin/Returns");
        todayTransactioLable.setText("");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Home Panel
        viewPanel.add(ViewReturnPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btn_ReturnsMousePressed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        AddNewItemFrame frame = new AddNewItemFrame();
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setVisible(true);
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        AddNewBatchJFrame frame = new AddNewBatchJFrame();
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setVisible(true);
    }//GEN-LAST:event_jButton14ActionPerformed

    private void grnSearchByBarcodeTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_grnSearchByBarcodeTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String barcode = grnSearchByBarcodeTxt.getText();
            if (!Validation.validateEmptyTextFeald(barcode)) {
                ItemService itemService = (ItemService) context.getBean("ItemService");
                try {
                    Item itemByBarcode = itemService.getItemByBarcode(barcode);
                    if (itemByBarcode == null) {
                        onGRNPackSizeTxt.setText("");
                        onGRNDescriptionTxt.setText("");
                        listModel3.removeAllElements();
                        listModelForBatchObjects.removeAllElements();
                        onGRNLISTBatch.setModel(listModel2);
                        onGrnBatchIDtxt.setText("");
                        onGRNMFDateTxt.setText("");
                        onGRNBatchEXPDateTxt.setText("");
                        onGRNbatchQtyOnHandTxt.setText("");
                        OnGRNBatchItemIDtxt.setText("");
                        onGRNUnitPriceTxt.setText("");
                        onGRNBatchTxt.setText("");

                    } else {
                        List<Batch> allBatches = itemService.getItemsBatchesById(itemByBarcode.getId());
                        listModel3.removeAllElements();
                        listModelForBatchObjects.removeAllElements();
                        if (allBatches != null) {
                            for (Batch b : allBatches) {
                                listModel3.addElement(b.getBatch());
                                listModelForBatchObjects.addElement(b);
                            }
                            onGRNLISTBatch.setModel(listModel3);
                            onGRNBarcodetxt.setText(itemByBarcode.getBarcode());
                            onGRNPackSizeTxt.setText(itemByBarcode.getPackSize());
                            onGRNDescriptionTxt.setText(itemByBarcode.getDescription());
                            OnGRNBatchItemIDtxt.setText(itemByBarcode.getId() + "");
                        }

                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            suplierNameTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            grnSearchByBarcodeTxt.selectAll();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            tableGRN.requestFocusInWindow();
        }
    }//GEN-LAST:event_grnSearchByBarcodeTxtKeyPressed

    private void onGRNLISTBatchValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_onGRNLISTBatchValueChanged
        if (onGRNLISTBatch.getSelectedIndex() == -1) {
            onGrnBatchIDtxt.setText("");
            onGRNMFDateTxt.setText("");
            onGRNBatchEXPDateTxt.setText("");
            onGRNbatchQtyOnHandTxt.setText("");
            onUpdateBatchItemIdtxt.setText(OnGRNBatchItemIDtxt.getText());
            onGRNUnitPriceTxt.setText("");
            onGRNBatchTxt.setText("");
            putToGrnTableButton.setEnabled(false);
            onGRNAddingQtyTxt.setEditable(false);
            onGRNAddingQtyTxt.requestFocus(false);
        } else {
            Batch selectedBatch = (Batch) listModelForBatchObjects.get(onGRNLISTBatch.getSelectedIndex());
            onGrnBatchIDtxt.setText(selectedBatch.getId() + "");
            onGRNMFDateTxt.setText(selectedBatch.getMFD() + "");
            onGRNBatchEXPDateTxt.setText(selectedBatch.getEXPD() + "");
            onGRNbatchQtyOnHandTxt.setText(selectedBatch.getQtyOnHand() + "");
            onUpdateBatchItemIdtxt.setText(OnGRNBatchItemIDtxt.getText());
            onGRNUnitPriceTxt.setText(selectedBatch.getUnitPrice() + "");
            onGRNBatchTxt.setText(selectedBatch.getBatch());
            putToGrnTableButton.setEnabled(true);
            onGRNAddingQtyTxt.setEditable(true);
            onGRNAddingQtyTxt.requestFocus(true);
        }
    }//GEN-LAST:event_onGRNLISTBatchValueChanged

    private void putToGrnTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_putToGrnTableButtonActionPerformed
        String iId = OnGRNBatchItemIDtxt.getText();
        String bId = onGrnBatchIDtxt.getText();
        boolean v1 = Validation.validateEmptyTextFeald(bId);
        boolean v2 = Validation.validateEmptyTextFeald(iId);
        if (!v1 && !v2) {
            String a = onGRNAddingQtyTxt.getText();
            boolean matches = a.matches("\\d+(\\.\\d{1,2})?");
            if (matches) {
                boolean v3 = Validation.validateEmptyTextFeald(a);
                if (!v3) {
                    DefaultTableModel model = (DefaultTableModel) tableGRN.getModel();
                    int rowCount = model.getRowCount();
                    int found = -1;
                    for (int i = rowCount - 1; i >= 0; i--) {
                        Object val = model.getValueAt(i, 1);
                        String batchId = val.toString();
                        if (bId.equalsIgnoreCase(batchId)) {
                            found = i;
                        }
                    }
                    if (found != -1) {
                        Object qty = model.getValueAt(found, 5);
                        String qtyString = qty.toString();
                        Double addedQty = Double.parseDouble(qtyString);
                        Double addingQty = Double.parseDouble(a);
                        Double result = addedQty + addingQty;
                        model.setValueAt(result.toString(), found, 5);
                    } else {
                        model.addRow(new Object[]{
                            iId,
                            bId,
                            onGRNDescriptionTxt.getText(),
                            onGRNPackSizeTxt.getText(),
                            onGRNUnitPriceTxt.getText(),
                            a
                        });
                    }
                    centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                    tableGRN.setDefaultRenderer(String.class, centerRenderer);
                    grnSearchByBarcodeTxt.requestFocusInWindow();
                } else {
                    JOptionPane.showMessageDialog(this, "Please Enter Adding Quantity");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Search Item And Select Batch On List");
        }
    }//GEN-LAST:event_putToGrnTableButtonActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        int row = tableGRN.getSelectedRow();
        if (row != -1) {
            DefaultTableModel m = (DefaultTableModel) tableGRN.getModel();
            m.removeRow(row);
        } else {
            JOptionPane.showMessageDialog(this, "Please Select Row First!");
        }
    }//GEN-LAST:event_jButton15ActionPerformed

    private void onGrnSearchResultComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_onGrnSearchResultComboItemStateChanged
        int index = onGrnSearchResultCombo.getSelectedIndex();
        if (index != -1) {
            Item i = (Item) searchCombModel.getElementAt(index);
            if (i != null) {
                ItemService itemService = (ItemService) context.getBean("ItemService");
                try {
                    List<Batch> allBatches = itemService.getItemsBatchesById(i.getId());
                    listModel3.removeAllElements();
                    listModelForBatchObjects.removeAllElements();
                    for (Batch b : allBatches) {
                        listModel3.addElement(b.getBatch());
                        listModelForBatchObjects.addElement(b);
                    }
                    onGRNLISTBatch.setModel(listModel3);
                    OnGRNBatchItemIDtxt.setText(i.getId() + "");
                    onGRNBarcodetxt.setText(i.getBarcode());
                    onGRNPackSizeTxt.setText(i.getPackSize());
                    onGRNDescriptionTxt.setText(i.getDescription());
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }

            }
        }
    }//GEN-LAST:event_onGrnSearchResultComboItemStateChanged

    private void putToGrnTableButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_putToGrnTableButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String iId = OnGRNBatchItemIDtxt.getText();
            String bId = onGrnBatchIDtxt.getText();
            boolean v1 = Validation.validateEmptyTextFeald(bId);
            boolean v2 = Validation.validateEmptyTextFeald(iId);
            if (!v1 && !v2) {
                String a = onGRNAddingQtyTxt.getText();
                boolean v3 = Validation.validateEmptyTextFeald(a);
                if (!v3) {
                    DefaultTableModel model = (DefaultTableModel) tableGRN.getModel();
                    int rowCount = model.getRowCount();
                    int found = -1;
                    for (int i = rowCount - 1; i >= 0; i--) {
                        Object val = model.getValueAt(i, 1);
                        String batchId = val.toString();
                        if (bId.equalsIgnoreCase(batchId)) {
                            found = i;
                        }
                    }
                    if (found != -1) {
                        Object qty = model.getValueAt(found, 5);
                        String qtyString = qty.toString();
                        Double addedQty = Double.parseDouble(qtyString);
                        Double addingQty = Double.parseDouble(a);
                        Double result = addedQty + addingQty;
                        model.setValueAt(result.toString(), found, 5);
                    } else {
                        model.addRow(new Object[]{
                            iId,
                            bId,
                            onGRNDescriptionTxt.getText(),
                            onGRNPackSizeTxt.getText(),
                            onGRNUnitPriceTxt.getText(),
                            a
                        });
                    }
                    centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                    tableGRN.setDefaultRenderer(String.class, centerRenderer);
                    grnSearchByBarcodeTxt.requestFocusInWindow();
                } else {
                    JOptionPane.showMessageDialog(this, "Please Enter Adding Quantity");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Search Item And Select Batch On List");
            }
        }
    }//GEN-LAST:event_putToGrnTableButtonKeyPressed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        int rowCount = tableGRN.getRowCount();
        if (rowCount > 0) {
            String supplier = suplierNameTxt.getText();
            boolean v1 = Validation.validateEmptyTextFeald(supplier);
            if (!v1) {
                BatchService batchService = (BatchService) context.getBean("BatchService");
                GrnDTO grn = new GrnDTO();
                LocalDate date = new LocalDate(DateLable.getText());
                grn.setDates(date);
                grn.setSupplier(supplier);
                Set<GrnDetailsDTO> list = new HashSet<GrnDetailsDTO>();
                try {
                    DefaultTableModel m = (DefaultTableModel) tableGRN.getModel();
                    for (int i = rowCount - 1; i >= 0; i--) {
                        GrnDetailsDTO grnDetailsDTO = new GrnDetailsDTO();
                        Object batchValue = m.getValueAt(i, 1);
                        Object descriptioValue = m.getValueAt(i, 2);
                        Object qtyValue = m.getValueAt(i, 5);
                        String batchId = batchValue.toString();
                        String desc = descriptioValue.toString();
                        String qty = qtyValue.toString();
                        BatchDTO search = batchService.search(Integer.parseInt(batchId));
                        grnDetailsDTO.setBatch(search);
                        grnDetailsDTO.setDescription(desc);
                        grnDetailsDTO.setQty(Double.parseDouble(qty));
                        list.add(grnDetailsDTO);

                    }
                    grn.setGrnDetails(list);
                    GrnService grnService = (GrnService) context.getBean("GrnService");
                    boolean add = grnService.add(grn);
                    if (add) {
                        for (int i = rowCount - 1; i >= 0; i--) {
                            m.removeRow(i);
                        }
                        onGRNAddingQtyTxt.setText("");
                        onGRNPackSizeTxt.setText("");
                        onGRNDescriptionTxt.setText("");
                        onGRNBarcodetxt.setText("");
                        onGRNBatchEXPDateTxt.setText("");
                        onGRNMFDateTxt.setText("");
                        onGRNBatchTxt.setText("");
                        onGRNBatchEXPDateTxt.setText("");
                        onGRNUnitPriceTxt.setText("");
                        OnGRNBatchItemIDtxt.setText("");
                        onGRNbatchQtyOnHandTxt.setText("");
                        onGRNSearchByDescriptionTxt.setText("");
                        suplierNameTxt.setText("");
                        onGrnBatchIDtxt.setText("");
                        onGRNAddingQtyTxt.setEditable(false);
                        putToGrnTableButton.setEnabled(false);
                        onGrnSearchResultCombo.removeAllItems();
                        searchCombModel.removeAllElements();
                        listModelForBatchObjects.removeAllElements();
                        listModel3.removeAllElements();
                        onGRNLISTBatch.setModel(listModel3);
                        JOptionPane.showMessageDialog(this, "GRN Placed Successfully..!");
                    } else {
                        JOptionPane.showMessageDialog(this, "GRN Placed Faild..!");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Input Suplier Name");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Add Item to GRN Item Table");
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton8KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton8KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String batchId = onUpdateBatchIdtxt.getText();
            boolean v1 = Validation.validateEmptyTextFeald(batchId);
            if (!v1) {
                String Exp = onUpdateBatchEXPtxt.getText();
                String MFD = onUpdateBatchMFDtxt.getText();
                String qty = onUpdateBatchQtyOnHandtxt.getText();
                String unitP = onUpdateBatchUnitPricetxt.getText();
                boolean v2 = Validation.validateEmptyTextFeald(Exp);
                boolean v3 = Validation.validateEmptyTextFeald(MFD);
                boolean v4 = Validation.validateEmptyTextFeald(unitP);
                if (!v2 && !v3 && !v4) {
                    LocalDate MFDD = new LocalDate(MFD);
                    LocalDate EXPD = new LocalDate(Exp);
                    BatchService batchService = (BatchService) context.getBean("BatchService");
                    try {
                        BatchDTO search = batchService.search(Integer.parseInt(batchId));
                        search.setEXPD(EXPD);
                        search.setMFD(MFDD);
                        search.setUnitPrice(Double.parseDouble(unitP));
                        search.setQtyOnHand(Double.parseDouble(qty));
                        boolean update = batchService.update(search);
                        if (update) {
                            onUpdateBatchIdtxt.setText("");
                            onUpdateBatchMFDtxt.setText("");
                            onUpdateBatchEXPtxt.setText("");
                            onUpdateBatchQtyOnHandtxt.setText("");
                            onUpdateBatchItemIdtxt.setText("");
                            onUpdateBatchUnitPricetxt.setText("");
                            onUpdateBatchtxt.setText("");
                            JOptionPane.showMessageDialog(this, "Batch Updated Succefully...");
                        } else {
                            JOptionPane.showMessageDialog(this, "Batch Update Faild");
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Select batch on batch list");
            }
        }
    }//GEN-LAST:event_jButton8KeyPressed

    private void jButton9KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton9KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String itemId = onUpdateItemIdTxt.getText();
            String packSize = onUpdatePackSizeTxt.getText();
            String reOrderLevel = onUpdateReOrderLevelTxt.getText();
            String description = onUpdateDescriptionTxt.getText();
            boolean v1 = Validation.validateEmptyTextFeald(itemId);
            boolean v2 = Validation.validateEmptyTextFeald(packSize);
            boolean v3 = Validation.validateEmptyTextFeald(reOrderLevel);
            boolean v4 = Validation.validateEmptyTextFeald(description);
            if (!v1) {
                if (!v2 && !v3 && !v4) {
                    ItemService itemService = (ItemService) context.getBean("ItemService");
                    try {
                        ItemDTO search = itemService.search(Integer.parseInt(itemId));
                        search.setPackSize(packSize);
                        search.setDescription(description);
                        search.setReOrderLevel(Integer.parseInt(reOrderLevel));
                        boolean update = itemService.update(search);
                        if (update) {
                            onUpdateItemIdTxt.setText("");
                            onUpdatePackSizeTxt.setText("");
                            onUpdateReOrderLevelTxt.setText("");
                            onUpdateDescriptionTxt.setText("");
                            onUpdateBarcodeTxt.setText("");
                            listModel2.removeAllElements();
                            listModelForBatchObjects.removeAllElements();
                            listOnBatchUpdate.setModel(listModel2);
                            onUpdateBatchIdtxt.setText("");
                            onUpdateBatchMFDtxt.setText("");
                            onUpdateBatchEXPtxt.setText("");
                            onUpdateBatchQtyOnHandtxt.setText("");
                            onUpdateBatchItemIdtxt.setText("");
                            onUpdateBatchUnitPricetxt.setText("");
                            onUpdateBatchtxt.setText("");

                            JOptionPane.showMessageDialog(this, "Item Updated Successfully.!");
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Search Item First");
            }
        }
    }//GEN-LAST:event_jButton9KeyPressed

    private void jButton5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton5KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String name = accountsNameTxt.getText().trim();
            String userName = accountsUserNameTxt.getText();
            String type = accountsTypeCombo.getSelectedItem().toString();
            String pass = accountsPassTxt.getText();
            String id = userAccountIdTxt.getText();
            boolean v1 = Validation.validateEmptyTextFeald(name);
            boolean v2 = Validation.validateEmptyTextFeald(userName);
            boolean v3 = Validation.validateEmptyTextFeald(pass);
            boolean v4 = Validation.validateEmptyTextFeald(id);
            if (!v1 && !v2 && !v3 && !v4) {
                UserService userService = (UserService) context.getBean("UserService");
                try {
                    boolean delete = userService.delete(Integer.parseInt(id));
                    if (delete) {
                        accountsNameTxt.setText("");
                        accountsUserNameTxt.setText("");
                        accountsPassTxt.setText("");
                        userAccountIdTxt.setText("");
                        JOptionPane.showMessageDialog(this, "User Deleted Successfully!");
                    } else {
                        accountsNameTxt.setText("");
                        accountsUserNameTxt.setText("");
                        accountsPassTxt.setText("");
                        userAccountIdTxt.setText("");
                        JOptionPane.showMessageDialog(this, "User Deleted Faild!");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Select First User in below table!");
            }
        }
    }//GEN-LAST:event_jButton5KeyPressed

    private void jButton3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton3KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            DefaultTableModel model = (DefaultTableModel) userAccountTable.getModel();
            centerRenderer.setHorizontalAlignment(JLabel.CENTER);
            userAccountTable.setDefaultRenderer(String.class, centerRenderer);
            UserService userService = (UserService) context.getBean("UserService");
            int rowCount = model.getRowCount();
            //Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            try {
                List<UserDTO> all = userService.getAll();
                for (UserDTO u : all) {
                    String type = u.getType();
                    String name = u.getName();
                    String userName = u.getUserName();
                    model.addRow(new Object[]{type, name, userName});
                }
                userAccountTable.setModel(model);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
        }
    }//GEN-LAST:event_jButton3KeyPressed

    private void suplierNameTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_suplierNameTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jButton12.doClick();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            grnSearchByBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            tableGRN.requestFocusInWindow();
        }
    }//GEN-LAST:event_suplierNameTxtKeyPressed

    private void tableGRNKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableGRNKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            jButton15.doClick();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            grnSearchByBarcodeTxt.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            tableGRN.requestFocusInWindow();
        }
        if (evt.getKeyCode() == KeyEvent.VK_END) {
            suplierNameTxt.requestFocusInWindow();
        }
    }//GEN-LAST:event_tableGRNKeyPressed

    private void btn_BackUpPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_BackUpPanelMousePressed
        setColour(btn_BackUpPanel);
        resetColour(btn_Home);
        resetColour(btn_Accounts);
        resetColour(btn_Item);
        resetColour(btn_Returns);
        resetColour(btn_ReorderLevel);
        resetColour(btn_Reports);
        resetColour(btn_GRN);
        navigationLable.setText("Admin/Back Up");
        todayTransactioLable.setText("");
        //RemoveAll on Panel and repaint 
        viewPanel.removeAll();
        viewPanel.repaint();
        viewPanel.revalidate();
        //add Home Panel
        viewPanel.add(BackUpsPanel);
        viewPanel.repaint();
        viewPanel.revalidate();
    }//GEN-LAST:event_btn_BackUpPanelMousePressed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setBackground(Color.WHITE);
        fc.setForeground(new Color(51, 51, 51));
        fc.showOpenDialog(this);
        String today = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
        try {
            File f = fc.getSelectedFile();
            path = f.getAbsolutePath();
            boolean v1 = Validation.validateEmptyTextFeald(path);
            if (!v1) {
                path = path.replace('\\', '/');
                path = path + "_" + today + ".sql";
                pathTxt.setText(path);
            } else {
                JOptionPane.showMessageDialog(this, "Choose back up file path..");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        if (!Validation.validateEmptyTextFeald(path)) {
            Process p = null;
            try {
                Runtime runtime = Runtime.getRuntime();
                p = runtime.exec("C:/Program Files (x86)/MySQL/MySQL Server 5.6/bin/mysqldump.exe -uroot -pmysql --add-drop-database -B mypos -r" + pathTxt.getText());
                int result = p.waitFor();
                if (result == 0) {
                    JOptionPane.showMessageDialog(this, "Back up Successfully...");
                } else {
                    JOptionPane.showMessageDialog(this, "Can't back up..");
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Choose Path Or Click Static Path button.. First");
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        String today = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
        path = DBBackUps.getStaticPath();
        path = path + "_" + today + ".sql";
        try {
            File f = new File(path);
        } catch (Exception e) {
            e.printStackTrace();
        }
        pathTxt.setText(path);
    }//GEN-LAST:event_jButton17ActionPerformed

    private void btn_restoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_restoreActionPerformed
        String backUpFilePath = selectedBackUpFilePathTxt.getText();
        if (!Validation.validateEmptyTextFeald(backUpFilePath)) {
            String userName = "root";
            String pw = "mysql";
            String[] reStoreCmd = new String[]{"C:/Program Files (x86)/MySQL/MySQL Server 5.6/bin/mysql.exe",
                "--user=" + userName, "--password=" + pw, "-e", "source " + backUpFilePath};
            Process process;
            try {
                process = Runtime.getRuntime().exec(reStoreCmd);
                int result = process.waitFor();
                if (result == 0) {
                    JOptionPane.showMessageDialog(this, "Restore Successfully...");
                } else {
                    JOptionPane.showMessageDialog(this, "Restore Faild...");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btn_restoreActionPerformed

    private void btnBrows2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrows2ActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setBackground(Color.WHITE);
        fc.setForeground(new Color(51, 51, 51));
        fc.showOpenDialog(this);
        File f = fc.getSelectedFile();
        path = f.getAbsolutePath();
        boolean v1 = Validation.validateEmptyTextFeald(path);
        if (!v1) {
            path = path.replace('\\', '/');
            selectedBackUpFilePathTxt.setText(path);
        }
    }//GEN-LAST:event_btnBrows2ActionPerformed

    private void onGRNAddingQtyTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_onGRNAddingQtyTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            putToGrnTableButton.doClick();
        }
    }//GEN-LAST:event_onGRNAddingQtyTxtKeyPressed

    private void jButton12KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton12KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jButton12.doClick();
        }
    }//GEN-LAST:event_jButton12KeyPressed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        GetIncomeGivenTwoDaysFrame i = new GetIncomeGivenTwoDaysFrame();
        i.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        i.setVisible(true);
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton18KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton18KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jButton18.doClick();
        }
    }//GEN-LAST:event_jButton18KeyPressed

    private void onReturnLISTBatchValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_onReturnLISTBatchValueChanged
        if (onReturnLISTBatch.getSelectedIndex() == -1) {
            onReturnBatchIDtxt.setText("");
            onReturnMFDateTxt.setText("");
            onReturnBatchEXPDateTxt.setText("");
            onReturnbatchQtyOnHandTxt.setText("");
            onReturnUnitPriceTxt.setText("");
            onReturnBatchTxt.setText("");

        } else {
            Batch selectedBatch = (Batch) listModelForBatchObjects.get(onReturnLISTBatch.getSelectedIndex());
            onReturnBatchIDtxt.setText(selectedBatch.getId() + "");
            onReturnMFDateTxt.setText(selectedBatch.getMFD() + "");
            onReturnBatchEXPDateTxt.setText(selectedBatch.getEXPD() + "");
            onReturnbatchQtyOnHandTxt.setText(selectedBatch.getQtyOnHand() + "");
            onReturnUnitPriceTxt.setText(selectedBatch.getUnitPrice() + "");
            onReturnBatchTxt.setText(selectedBatch.getBatch());
            returnQtyTxt.requestFocusInWindow();

        }
    }//GEN-LAST:event_onReturnLISTBatchValueChanged

    private void returnQtyTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_returnQtyTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnReturnCart.doClick();
        }
    }//GEN-LAST:event_returnQtyTxtKeyPressed

    private void btnReturnCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnCartActionPerformed
        putToReturnCart();
    }//GEN-LAST:event_btnReturnCartActionPerformed

    private void tableReturnsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableReturnsMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableReturnsMousePressed

    private void tableReturnsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableReturnsKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tableReturnsKeyPressed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        DefaultTableModel m = (DefaultTableModel) tableReturns.getModel();
        BatchService batchService = (BatchService) context.getBean("BatchService");
        int rowCount = m.getRowCount();
        
        if (rowCount > -1) {
            for (int i = rowCount - 1; i >= 0; i--) {
                Object batchValue = m.getValueAt(i, 1);
                String batchId = batchValue.toString();
                Object qtyValue = m.getValueAt(i, 5);
                String returnQty = qtyValue.toString();
                try {
                    BatchDTO search = batchService.search(Integer.parseInt(batchId));
                    double qtyOnHand = search.getQtyOnHand();
                    double returns = Double.parseDouble(returnQty);
                    qtyOnHand=qtyOnHand-returns;
                    search.setQtyOnHand(qtyOnHand);
                    batchService.update(search);
                    
                } catch (Exception ex) {
                    Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            for (int i = rowCount - 1; i >= 0; i--) {
                m.removeRow(i);
            }
            onReturnBatchIDtxt.setText("");
            onReturnMFDateTxt.setText("");
            onReturnBatchEXPDateTxt.setText("");
            onReturnbatchQtyOnHandTxt.setText("");
            onReturnUnitPriceTxt.setText("");
            onReturnBatchTxt.setText("");
            onReturnPackSizeTxt.setText("");
            returnQtyTxt.setText("");
            OnReturnBatchItemIDtxt.setText("");
            onReturnDescriptionTxt.setText("");
            returnBarcode.requestFocusInWindow();
            onReturnLISTBatch.removeAll();
        }
    }//GEN-LAST:event_jButton19ActionPerformed

    private void onReturnsComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_onReturnsComboItemStateChanged
        int index = onReturnsCombo.getSelectedIndex();
        if (index != -1) {
            Item i = (Item) searchCombModel.getElementAt(index);
            if (i != null) {
                ItemService itemService = (ItemService) context.getBean("ItemService");
                try {
                    List<Batch> allBatches = itemService.getItemsBatchesById(i.getId());
                    listModel4.removeAllElements();
                    listModelForBatchObjects.removeAllElements();
                    for (Batch b : allBatches) {
                        listModel4.addElement(b.getBatch());
                        listModelForBatchObjects.addElement(b);
                    }
                    onReturnLISTBatch.setModel(listModel4);
                    OnReturnBatchItemIDtxt.setText(i.getId() + "");
                    onReturnPackSizeTxt.setText(i.getPackSize());
                    onReturnDescriptionTxt.setText(i.getDescription());
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }

            }
        }
    }//GEN-LAST:event_onReturnsComboItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }

            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AccountsViewPanel;
    private javax.swing.JPanel BackUpsPanel;
    private javax.swing.JPanel BatchViewPanel;
    private javax.swing.JLabel DateLable;
    private javax.swing.JPanel DeleteItemPanel;
    private javax.swing.JPanel ItemViewPanel;
    private javax.swing.JTextField OnGRNBatchItemIDtxt;
    private javax.swing.JTextField OnReturnBatchItemIDtxt;
    private javax.swing.JComboBox<String> SearchedItemsOnUpdateCombo;
    private javax.swing.JPanel UpdateItemPanel;
    private javax.swing.JPanel ViewAllItemPanel;
    private javax.swing.JTable ViewAllItemTable;
    private javax.swing.JPanel ViewReportsPane;
    private javax.swing.JPanel ViewReturnPanel;
    private javax.swing.JTextField accountsNameTxt;
    private javax.swing.JPasswordField accountsPassTxt;
    private javax.swing.JComboBox<String> accountsTypeCombo;
    private javax.swing.JTextField accountsUserNameTxt;
    private javax.swing.JPanel addBatch;
    private javax.swing.JPanel addBatch1;
    private javax.swing.JPanel addBatch2;
    private javax.swing.JPanel addBatch3;
    private javax.swing.JTextField addItemBatchTxt;
    private javax.swing.JFormattedTextField addItemEXPDateTxt;
    private javax.swing.JFormattedTextField addItemMFDTxt;
    private javax.swing.JFormattedTextField addItemQtyOnHandTxt;
    private javax.swing.JFormattedTextField addItemUnitPriceTxt;
    private javax.swing.JTextField addItembarcodeTxt;
    private javax.swing.JTextField addItemdescriptionTxt;
    private javax.swing.JTextField addItempackSizeTxt;
    private javax.swing.JTextField addItemreOrderLevelTxt;
    private javax.swing.JTable avaibleBatchTableForDeleteItemOrBatch;
    private javax.swing.JList<String> avalableBatchList;
    private javax.swing.JPanel background;
    private javax.swing.JButton btnAddItemForDB;
    private javax.swing.JPanel btnAddNewBatchForItem1;
    private javax.swing.JPanel btnAddNewItem;
    private javax.swing.JPanel btnAddNewItem1;
    private javax.swing.JPanel btnAddNewItem2;
    private javax.swing.JPanel btnAddNewItem3;
    private javax.swing.JPanel btnAddNewItem4;
    private javax.swing.JPanel btnBatchONViewAllItem;
    private javax.swing.JButton btnBrows2;
    private javax.swing.JPanel btnDeleteItemonItem;
    private javax.swing.JButton btnReturnCart;
    private javax.swing.JPanel btnUpdateItem1;
    private javax.swing.JPanel btnUpdateItem2;
    private javax.swing.JPanel btnUpdateItem3;
    private javax.swing.JPanel btnUpdateItem4;
    private javax.swing.JPanel btnUpdateItem5;
    private javax.swing.JPanel btnUpdateItem6;
    private javax.swing.JPanel btnUpdateItem7;
    private javax.swing.JPanel btnViewAllItems;
    private javax.swing.JPanel btnViewAllItems1;
    private javax.swing.JPanel btnViewAllItems2;
    private javax.swing.JPanel btnViewAllItems3;
    private javax.swing.JPanel btn_Accounts;
    private javax.swing.JPanel btn_BackUpPanel;
    private javax.swing.JPanel btn_GRN;
    private javax.swing.JPanel btn_Home;
    private javax.swing.JPanel btn_Item;
    private javax.swing.JPanel btn_ReorderLevel;
    private javax.swing.JPanel btn_Reports;
    private javax.swing.JPanel btn_Returns;
    private javax.swing.JButton btn_restore;
    private javax.swing.JLabel givenDiscountLable;
    private javax.swing.JTextField grnSearchByBarcodeTxt;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JPanel homeViewPanel;
    private javax.swing.JPanel itemSubMenuPanel;
    private javax.swing.JPanel itemSubMenuPanel1;
    private javax.swing.JPanel itemSubMenuPanel2;
    private javax.swing.JPanel itemSubMenuPanel3;
    private javax.swing.JPanel itemSubMenuPanel4;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel100;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel102;
    private javax.swing.JLabel jLabel103;
    private javax.swing.JLabel jLabel104;
    private javax.swing.JLabel jLabel105;
    private javax.swing.JLabel jLabel106;
    private javax.swing.JLabel jLabel107;
    private javax.swing.JLabel jLabel108;
    private javax.swing.JLabel jLabel109;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel110;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel113;
    private javax.swing.JLabel jLabel114;
    private javax.swing.JLabel jLabel115;
    private javax.swing.JLabel jLabel116;
    private javax.swing.JLabel jLabel117;
    private javax.swing.JLabel jLabel118;
    private javax.swing.JLabel jLabel119;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel120;
    private javax.swing.JLabel jLabel121;
    private javax.swing.JLabel jLabel122;
    private javax.swing.JLabel jLabel123;
    private javax.swing.JLabel jLabel124;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel90;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel92;
    private javax.swing.JLabel jLabel93;
    private javax.swing.JLabel jLabel94;
    private javax.swing.JLabel jLabel95;
    private javax.swing.JLabel jLabel96;
    private javax.swing.JLabel jLabel97;
    private javax.swing.JLabel jLabel98;
    private javax.swing.JLabel jLabel99;
    private javax.swing.JPanel jPanel11112;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JLabel jlabeljhjha;
    private javax.swing.JLabel labelMFFDD;
    private javax.swing.JList<String> listOnBatchUpdate;
    private javax.swing.JLabel navigationLable;
    private javax.swing.JFormattedTextField newBatchAddQtyTxt;
    private javax.swing.JFormattedTextField newBatchEXPDatetxt;
    private javax.swing.JFormattedTextField newBatchMFDtxt;
    private javax.swing.JTextField newBatchTxt;
    private javax.swing.JFormattedTextField newBatchUnitPriceTxt;
    private javax.swing.JTextField onBatchBarcodeTxt;
    private javax.swing.JTextField onBatchBatchEXPtxt;
    private javax.swing.JTextField onBatchBatchIdtxt;
    private javax.swing.JTextField onBatchBatchItemIdtxt;
    private javax.swing.JTextField onBatchBatchMFDtxt;
    private javax.swing.JTextField onBatchBatchQtyOnHandtxt;
    private javax.swing.JTextField onBatchBatchUnitPricetxt;
    private javax.swing.JTextField onBatchBatchtxt;
    private javax.swing.JTextField onBatchItemIdTxt;
    private javax.swing.JTextField onBatchPackSizeTxt;
    private javax.swing.JTextField onBatchReOrderLevelTxt;
    private javax.swing.JFormattedTextField onGRNAddingQtyTxt;
    private javax.swing.JTextField onGRNBarcodetxt;
    private javax.swing.JTextField onGRNBatchEXPDateTxt;
    private javax.swing.JTextField onGRNBatchTxt;
    private javax.swing.JTextField onGRNDescriptionTxt;
    private javax.swing.JList<String> onGRNLISTBatch;
    private javax.swing.JTextField onGRNMFDateTxt;
    private javax.swing.JTextField onGRNPackSizeTxt;
    private javax.swing.JTextField onGRNSearchByDescriptionTxt;
    private javax.swing.JTextField onGRNUnitPriceTxt;
    private javax.swing.JTextField onGRNbatchQtyOnHandTxt;
    private javax.swing.JTextField onGrnBatchIDtxt;
    private javax.swing.JComboBox<String> onGrnSearchResultCombo;
    private javax.swing.JTextField onReturnBatchEXPDateTxt;
    private javax.swing.JTextField onReturnBatchIDtxt;
    private javax.swing.JTextField onReturnBatchTxt;
    private javax.swing.JTextField onReturnDescriptionTxt;
    private javax.swing.JList<String> onReturnLISTBatch;
    private javax.swing.JTextField onReturnMFDateTxt;
    private javax.swing.JTextField onReturnPackSizeTxt;
    private javax.swing.JTextField onReturnUnitPriceTxt;
    private javax.swing.JTextField onReturnbatchQtyOnHandTxt;
    private javax.swing.JComboBox<String> onReturnsCombo;
    private javax.swing.JTextField onReturnsSearchDesTxt;
    private javax.swing.JTextField onUpdateBarcodeTxt;
    private javax.swing.JFormattedTextField onUpdateBatchEXPtxt;
    private javax.swing.JTextField onUpdateBatchIdtxt;
    private javax.swing.JTextField onUpdateBatchItemIdtxt;
    private javax.swing.JFormattedTextField onUpdateBatchMFDtxt;
    private javax.swing.JFormattedTextField onUpdateBatchQtyOnHandtxt;
    private javax.swing.JFormattedTextField onUpdateBatchUnitPricetxt;
    private javax.swing.JTextField onUpdateBatchtxt;
    private javax.swing.JTextField onUpdateDescriptionTxt;
    private javax.swing.JTextField onUpdateItemIdTxt;
    private javax.swing.JTextField onUpdateItemPanelSearchItemBarcodeTxt;
    private javax.swing.JTextField onUpdatePackSizeTxt;
    private javax.swing.JTextField onUpdateReOrderLevelTxt;
    private javax.swing.JTextField onUpdateSearchByDescTxt;
    private javax.swing.JTextField onbatchDescriptionTxt;
    private javax.swing.JTextField pathTxt;
    private javax.swing.JButton putToGrnTableButton;
    private javax.swing.JTable reOrderLevelTable;
    private javax.swing.JTextField returnBarcode;
    private javax.swing.JTextField returnQtyTxt;
    private javax.swing.JTextField searchByBarcodeForDeleteItemOrBatchTxt;
    private javax.swing.JTextField searchByBarcodeTxtForBatch;
    private javax.swing.JComboBox<String> searchByDescriptionForBatchCombo;
    private javax.swing.JTextField searchForDeleteItemByDescriptionTxt;
    private javax.swing.JTextField selectedBackUpFilePathTxt;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JTextField suplierNameTxt;
    private javax.swing.JTable tableGRN;
    private javax.swing.JTable tableItemOrBatchDelete;
    private javax.swing.JTable tableReturns;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JTable toDayTransactionTable;
    private javax.swing.JLabel todayIncomeLable;
    private javax.swing.JLabel todayTransactioLable;
    private javax.swing.JLabel totalLable;
    private javax.swing.JTextField userAccountIdTxt;
    private javax.swing.JTable userAccountTable;
    private javax.swing.JLabel validDateFomatLable1;
    private javax.swing.JLabel validDateFormatLable2;
    private javax.swing.JTable viewAllBatchtable;
    private javax.swing.JPanel viewGRNPanel;
    private javax.swing.JPanel viewPanel;
    private javax.swing.JPanel viewReOrderLevelPanel;
    // End of variables declaration//GEN-END:variables

    void setColour(JPanel panel) {
        panel.setBackground(new Color(102, 102, 102));
    }

    void resetColour(JPanel panel) {
        panel.setBackground(new Color(51, 51, 51));
    }

    private void setAllUserAccounts() {
        try {
            UserService userService = (UserService) context.getBean("UserService");
            List<UserDTO> all = userService.getAll();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
        }
    }

    private void setDocumetListner() {
        onUpdateSearchByDescTxt.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                warn();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                warn();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                warn();
            }
        });
        returnBarcode.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                warn10();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                warn10();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                warn10();
            }

        });
        searchForDeleteItemByDescriptionTxt.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                warn1();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                warn1();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                warn1();
            }
        });
        
        onReturnsSearchDesTxt.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                warn8();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                warn8();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                warn8();
            }
        });

        onGRNSearchByDescriptionTxt.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                warn3();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                warn3();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                warn3();
            }
        });
        grnSearchByBarcodeTxt.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                warn7();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                warn7();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                warn7();
            }
        });
    }

    private void warn8() {
        String desc = onReturnsSearchDesTxt.getText();
        boolean v1 = Validation.validateEmptyTextFeald(desc);
        if (!v1) {
            ItemService itemService = (ItemService) context.getBean("ItemService");
            try {
                List<Item> all = itemService.getItemsByDescriptionLike(desc);
                onReturnsCombo.removeAllItems();
                searchCombModel.removeAllElements();
                for (Item i : all) {
                    searchCombModel.addElement(i);
                    onReturnsCombo.addItem(i.getDescription());
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
        }
    }
    private void warn() {
        String desc = onUpdateSearchByDescTxt.getText();
        boolean v1 = Validation.validateEmptyTextFeald(desc);
        if (!v1) {
            ItemService itemService = (ItemService) context.getBean("ItemService");
            try {
                List<Item> all = itemService.getItemsByDescriptionLike(desc);
                SearchedItemsOnUpdateCombo.removeAllItems();
                searchCombModel.removeAllElements();
                for (Item i : all) {
                    searchCombModel.addElement(i);
                    SearchedItemsOnUpdateCombo.addItem(i.getDescription());
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
        }
    }

    private void warn1() {
        String value = searchForDeleteItemByDescriptionTxt.getText();
        boolean v1 = Validation.validateEmptyTextFeald(value);
        if (!v1) {
            ItemService itemService = (ItemService) context.getBean("ItemService");
            try {
                List<Item> list = itemService.getItemsByDescriptionLike(value);
                if (list != null) {
                    DefaultTableModel model = (DefaultTableModel) tableItemOrBatchDelete.getModel();
                    int rowCount = model.getRowCount();
                    for (int i = rowCount - 1; i >= 0; i--) {
                        model.removeRow(i);
                    }
                    for (Item i : list) {
                        model.addRow(new Object[]{i.getId(),
                            i.getBarcode(),
                            i.getDescription(),
                            i.getPackSize(),
                            i.getReOrderLevel()});
                    }
                    tableItemOrBatchDelete.setModel(model);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
        }
    }

    private void warn10() {
        String barcode = returnBarcode.getText();
        if (!Validation.validateEmptyTextFeald(barcode)) {
            ItemService itemService = (ItemService) context.getBean("ItemService");
            try {
                Item itemByBarcode = itemService.getItemByBarcode(barcode);
                if (itemByBarcode == null) {
                    onReturnPackSizeTxt.setText("");
                    onReturnDescriptionTxt.setText("");
                    listModel4.removeAllElements();
                    listModelForBatchObjects.removeAllElements();
                    onReturnLISTBatch.setModel(listModel4);
                    onReturnBatchIDtxt.setText("");
                    onReturnMFDateTxt.setText("");
                    onReturnBatchEXPDateTxt.setText("");
                    onReturnbatchQtyOnHandTxt.setText("");
                    OnReturnBatchItemIDtxt.setText("");
                    onReturnUnitPriceTxt.setText("");
                    onReturnBatchTxt.setText("");

                } else {
                    List<Batch> allBatches = itemService.getItemsBatchesById(itemByBarcode.getId());
                    listModel4.removeAllElements();
                    listModelForBatchObjects.removeAllElements();
                    if (allBatches != null) {
                        for (Batch b : allBatches) {
                            listModel4.addElement(b.getBatch());
                            listModelForBatchObjects.addElement(b);
                        }
                        onReturnLISTBatch.setModel(listModel4);
                        onReturnPackSizeTxt.setText(itemByBarcode.getPackSize());
                        onReturnDescriptionTxt.setText(itemByBarcode.getDescription());
                        OnReturnBatchItemIDtxt.setText(itemByBarcode.getId() + "");
                    }

                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
        }
    }

    private void warn7() {
        String barcode = grnSearchByBarcodeTxt.getText();
        if (!Validation.validateEmptyTextFeald(barcode)) {
            ItemService itemService = (ItemService) context.getBean("ItemService");
            try {
                Item itemByBarcode = itemService.getItemByBarcode(barcode);
                if (itemByBarcode == null) {
                    onGRNPackSizeTxt.setText("");
                    onGRNDescriptionTxt.setText("");
                    listModel3.removeAllElements();
                    listModelForBatchObjects.removeAllElements();
                    onGRNLISTBatch.setModel(listModel2);
                    onGrnBatchIDtxt.setText("");
                    onGRNMFDateTxt.setText("");
                    onGRNBatchEXPDateTxt.setText("");
                    onGRNbatchQtyOnHandTxt.setText("");
                    OnGRNBatchItemIDtxt.setText("");
                    onGRNUnitPriceTxt.setText("");
                    onGRNBatchTxt.setText("");

                } else {
                    List<Batch> allBatches = itemService.getItemsBatchesById(itemByBarcode.getId());
                    listModel3.removeAllElements();
                    listModelForBatchObjects.removeAllElements();
                    if (allBatches != null) {
                        for (Batch b : allBatches) {
                            listModel3.addElement(b.getBatch());
                            listModelForBatchObjects.addElement(b);
                        }
                        onGRNLISTBatch.setModel(listModel3);
                        onGRNBarcodetxt.setText(itemByBarcode.getBarcode());
                        onGRNPackSizeTxt.setText(itemByBarcode.getPackSize());
                        onGRNDescriptionTxt.setText(itemByBarcode.getDescription());
                        OnGRNBatchItemIDtxt.setText(itemByBarcode.getId() + "");
                    }

                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
        }
    }

    private void warn3() {
        String desc = onGRNSearchByDescriptionTxt.getText();
        boolean v1 = Validation.validateEmptyTextFeald(desc);
        if (!v1) {
            ItemService itemService = (ItemService) context.getBean("ItemService");
            try {
                List<Item> all = itemService.getItemsByDescriptionLike(desc);
                onGrnSearchResultCombo.removeAllItems();
                searchCombModel.removeAllElements();
                for (Item i : all) {
                    searchCombModel.addElement(i);
                    onGrnSearchResultCombo.addItem(i.getDescription());
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
        }
    }

    private void setTodayTranstction() {
        OrderService orderService = (OrderService) context.getBean("OrderService");
        DefaultTableModel m = (DefaultTableModel) toDayTransactionTable.getModel();
        int rowCount = m.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            m.removeRow(i);
        }
        LocalDate date = new LocalDate(DateLable.getText());
        double totall = 0;
        double givenDis = 0;
        double income = 0;
        try {
            List<Orders> all = orderService.getTodayTransaction(date);
            if (all != null) {
                for (Orders o : all) {
                    LocalDate date1 = o.getDate();
                    String dd = date1.toString();
                    String time = o.getTime();
                    int id = o.getId();
                    double discounts = o.getDiscounts();
                    double total = o.getTotal();
                    double subTot = o.getSubTot();
                    givenDis = givenDis + discounts;
                    totall = totall + total;
                    income = income + subTot;
                    m.addRow(new Object[]{
                        dd,
                        time,
                        id + "",
                        discounts + "0",
                        total + "0",
                        subTot + "0"
                    });
                }
            }
            todayIncomeLable.setText(income + "0");
            givenDiscountLable.setText(givenDis + "0");
            totalLable.setText(totall + "0");
            toDayTransactionTable.setModel(m);
            centerRenderer.setHorizontalAlignment(JLabel.CENTER);
            toDayTransactionTable.setDefaultRenderer(String.class, centerRenderer);
        } catch (Exception ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex);
        }
    }

    private void setReOrderLevelItems() {
        DefaultTableModel m = (DefaultTableModel) reOrderLevelTable.getModel();
        int rowCount = m.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            m.removeRow(i);
        }
        BatchService batchService = (BatchService) context.getBean("BatchService");
        try {
            List<ReOrderLevelItemDTO> all = batchService.getReOrderLevelItems();
            if (all != null) {
                for (ReOrderLevelItemDTO r : all) {
                    m.addRow(new Object[]{
                        r.getItemId() + "",
                        r.getDescription(),
                        r.getPackSize() + "",
                        r.getAvailabelBatchQty() + "",
                        r.getReorderLevel() + "0",
                        r.getStockQty() + "0"
                    });

                }

                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                reOrderLevelTable.setDefaultRenderer(String.class, centerRenderer);
            }
        } catch (Exception ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex);
        }

    }

    private void putToReturnCart() {
        String iId = OnReturnBatchItemIDtxt.getText();
        String bId = onReturnBatchIDtxt.getText();
        boolean v1 = Validation.validateEmptyTextFeald(bId);
        boolean v2 = Validation.validateEmptyTextFeald(iId);
        if (!v1 && !v2) {
            String a = returnQtyTxt.getText();
            boolean matches = a.matches("\\d+(\\.\\d{1,2})?");
            if (matches) {
                boolean v3 = Validation.validateEmptyTextFeald(a);
                if (!v3) {
                    DefaultTableModel model = (DefaultTableModel) tableReturns.getModel();
                    int rowCount = model.getRowCount();
                    int found = -1;
                    for (int i = rowCount - 1; i >= 0; i--) {
                        Object val = model.getValueAt(i, 1);
                        String batchId = val.toString();
                        if (bId.equalsIgnoreCase(batchId)) {
                            found = i;
                        }
                    }
                    if (found != -1) {
                        Object qty = model.getValueAt(found, 5);
                        String qtyString = qty.toString();
                        Double addedQty = Double.parseDouble(qtyString);
                        Double addingQty = Double.parseDouble(a);
                        Double result = addedQty + addingQty;
                        model.setValueAt(result.toString(), found, 5);
                    } else {
                        model.addRow(new Object[]{
                            iId,
                            bId,
                            onReturnDescriptionTxt.getText(),
                            onReturnPackSizeTxt.getText(),
                            onReturnUnitPriceTxt.getText(),
                            a
                        });
                    }
                    centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                    tableReturns.setDefaultRenderer(String.class, centerRenderer);
                    returnBarcode.requestFocusInWindow();
                } else {
                    JOptionPane.showMessageDialog(this, "Please Enter Return Quantity");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Search Item And Select Batch On List");
        }
    }
}
