/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.alpha.view;

import com.alpha.config.Context;
import com.alpha.dto.ItemDTO;
import com.alpha.model.Batch;
import com.alpha.model.Item;
import com.alpha.service.custom.ItemService;
import com.alpha.utils.Validation;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import org.joda.time.LocalDate;
import org.springframework.context.support.AbstractApplicationContext;

/**
 *
 * @author Harindu.sul
 */
public class AddNewItemFrame extends javax.swing.JFrame {

    
    private AbstractApplicationContext context;
    
    public AddNewItemFrame() {
        initComponents();
        this.context=Context.getInstance();
        validDateFomatLable1.hide();
        validDateFormatLable2.hide();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ItemViewPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        addItembarcodeTxt = new javax.swing.JTextField();
        addItemdescriptionTxt = new javax.swing.JTextField();
        addItempackSizeTxt = new javax.swing.JTextField();
        addItemreOrderLevelTxt = new javax.swing.JTextField();
        btnAddItemForDB = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        labelMFFDD = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        addItemBatchTxt = new javax.swing.JTextField();
        addItemEXPDateTxt = new javax.swing.JFormattedTextField();
        addItemMFDTxt = new javax.swing.JFormattedTextField();
        addItemQtyOnHandTxt = new javax.swing.JFormattedTextField();
        addItemUnitPriceTxt = new javax.swing.JFormattedTextField();
        validDateFomatLable1 = new javax.swing.JLabel();
        validDateFormatLable2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(480, 643));

        ItemViewPanel.setBackground(new java.awt.Color(255, 255, 255));
        ItemViewPanel.setPreferredSize(new java.awt.Dimension(475, 596));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("   Add New Item Form");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(51, 51, 51));
        jLabel12.setText("Barcode");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(51, 51, 51));
        jLabel13.setText("Description");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(51, 51, 51));
        jLabel14.setText("Pack Size");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(51, 51, 51));
        jLabel15.setText("Re-Order Level");

        btnAddItemForDB.setBackground(new java.awt.Color(51, 51, 51));
        btnAddItemForDB.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAddItemForDB.setForeground(new java.awt.Color(255, 255, 255));
        btnAddItemForDB.setText("Add Item");
        btnAddItemForDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemForDBActionPerformed(evt);
            }
        });
        btnAddItemForDB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnAddItemForDBKeyPressed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 51));
        jLabel9.setText("Exp Date");

        labelMFFDD.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelMFFDD.setForeground(new java.awt.Color(51, 51, 51));
        labelMFFDD.setText("Manufacture Date");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(51, 51, 51));
        jLabel17.setText("Quantity");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(51, 51, 51));
        jLabel18.setText("Batch");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(51, 51, 51));
        jLabel19.setText("Unit Price");

        addItemEXPDateTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        addItemEXPDateTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addItemEXPDateTxtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addItemEXPDateTxtFocusLost(evt);
            }
        });

        addItemMFDTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        addItemMFDTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addItemMFDTxtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addItemMFDTxtFocusLost(evt);
            }
        });

        addItemQtyOnHandTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0.00"))));

        addItemUnitPriceTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("0.00"))));

        validDateFomatLable1.setForeground(new java.awt.Color(204, 0, 0));
        validDateFomatLable1.setText("Valid Date Format is \" YYYY-MM-DD \"");

        validDateFormatLable2.setForeground(new java.awt.Color(204, 0, 0));
        validDateFormatLable2.setText("Valid Date Format is \" YYYY-MM-DD \"");

        javax.swing.GroupLayout ItemViewPanelLayout = new javax.swing.GroupLayout(ItemViewPanel);
        ItemViewPanel.setLayout(ItemViewPanelLayout);
        ItemViewPanelLayout.setHorizontalGroup(
            ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ItemViewPanelLayout.createSequentialGroup()
                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ItemViewPanelLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ItemViewPanelLayout.createSequentialGroup()
                                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel12))
                                .addGap(46, 46, 46)
                                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addItembarcodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addItemdescriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addItempackSizeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addItemreOrderLevelTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ItemViewPanelLayout.createSequentialGroup()
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addItemBatchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ItemViewPanelLayout.createSequentialGroup()
                                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(labelMFFDD)
                                    .addComponent(jLabel19)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addItemUnitPriceTxt)
                                    .addGroup(ItemViewPanelLayout.createSequentialGroup()
                                        .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(addItemEXPDateTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                                            .addComponent(addItemMFDTxt)
                                            .addComponent(addItemQtyOnHandTxt))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addComponent(btnAddItemForDB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(validDateFomatLable1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(validDateFormatLable2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ItemViewPanelLayout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(jLabel7)))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        ItemViewPanelLayout.setVerticalGroup(
            ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ItemViewPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel7)
                .addGap(47, 47, 47)
                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(addItembarcodeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(addItemdescriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(addItempackSizeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(addItemreOrderLevelTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addItemBatchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addGap(18, 18, 18)
                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addItemEXPDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(validDateFomatLable1)))
                .addGap(20, 20, 20)
                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMFFDD)
                    .addComponent(addItemMFDTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(validDateFormatLable2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addItemQtyOnHandTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(ItemViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(addItemUnitPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(btnAddItemForDB, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ItemViewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 806, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(ItemViewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddItemForDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemForDBActionPerformed

        //Get Values
        String barcode = addItembarcodeTxt.getText();
        String description = addItemdescriptionTxt.getText();
        String packSize = addItempackSizeTxt.getText();
        String reOrderLevel = addItemreOrderLevelTxt.getText();
        String batch = addItemBatchTxt.getText();
        String EXPtxt = addItemEXPDateTxt.getText();
        String MFDtxt = addItemMFDTxt.getText();
        String qty = addItemQtyOnHandTxt.getText();
        String unitPrice = addItemUnitPriceTxt.getText();
        //Check every Feelds is not null
        
        boolean v2 = Validation.validateEmptyTextFeald(description);
        boolean v3 = Validation.validateEmptyTextFeald(packSize);
        boolean v4 = Validation.validateEmptyTextFeald(reOrderLevel);
        boolean v5 = Validation.validateEmptyTextFeald(batch);
        boolean v6 = Validation.validateEmptyTextFeald(EXPtxt);
        boolean v7 = Validation.validateEmptyTextFeald(MFDtxt);
        boolean v8 = Validation.validateEmptyTextFeald(qty);
        boolean v9 = Validation.validateEmptyTextFeald(unitPrice);

        if ( !v2 && !v3 && !v4 && !v5 && !v6 && !v7 && !v8 && !v9) {
            ItemService itemService = (ItemService) context.getBean("ItemService");
            try {
                Item searchItemIsAlreadyExits = itemService.getItemByDescription(description.trim());
                Item searchItemAlreadyExitsByBarcode = itemService.getItemByBarcode(barcode.trim());
                if (searchItemAlreadyExitsByBarcode == null) {
                    if (searchItemIsAlreadyExits == null) {
                        //Create ITEM
                        ItemDTO i = new ItemDTO();
                        i.setBarcode(barcode);
                        i.setDescription(description);
                        i.setPackSize(packSize);
                        i.setReOrderLevel(Integer.parseInt(reOrderLevel));
                        //Create Batch
                        LocalDate MFD = new LocalDate(MFDtxt);
                        LocalDate EXP = new LocalDate(EXPtxt);

                        Batch batchDto = new Batch();
                        batchDto.setBatch(batch);
                        batchDto.setEXPD(EXP);
                        batchDto.setMFD(MFD);
                        batchDto.setQtyOnHand(Double.parseDouble(qty));
                        batchDto.setUnitPrice(Double.parseDouble(unitPrice));

                        try {
                            boolean add = itemService.add(i);
                            if (add) {
                                Item itemByDescription = itemService.getItemByDescription(description);
                                int searchedId = itemByDescription.getId();
                                List<Batch> allBatch = itemService.getItemsBatchesById(searchedId);
                                if (allBatch == null) {
                                    allBatch = new ArrayList<>();
                                }
                                allBatch.add(batchDto);
                                itemByDescription.setBatch(allBatch);
                                //item for batch added then update item
                                ItemDTO itemDTO1 = new ItemDTO();
                                itemDTO1.setBarcode(itemByDescription.getBarcode());
                                itemDTO1.setBatch(itemByDescription.getBatch());
                                itemDTO1.setDescription(itemByDescription.getDescription());
                                itemDTO1.setId(itemByDescription.getId());
                                itemDTO1.setPackSize(itemByDescription.getPackSize());
                                itemDTO1.setReOrderLevel(itemByDescription.getReOrderLevel());
                                boolean update = itemService.update(itemDTO1);
                                if (update) {
                                    JOptionPane.showMessageDialog(this, "Item Added Successfully..");
                                    addItembarcodeTxt.setText("");
                                    addItemdescriptionTxt.setText("");
                                    addItempackSizeTxt.setText("");
                                    addItemreOrderLevelTxt.setText("");
                                    addItemBatchTxt.setText("");
                                    addItemEXPDateTxt.setText("");
                                    addItemMFDTxt.setText("");
                                    addItemQtyOnHandTxt.setText("");
                                    addItemUnitPriceTxt.setText("");
                                    addItembarcodeTxt.requestFocusInWindow();
                                } else {
                                    JOptionPane.showMessageDialog(this, "Item Added Faild..");
                                    addItembarcodeTxt.setText("");
                                    addItemdescriptionTxt.setText("");
                                    addItempackSizeTxt.setText("");
                                    addItemreOrderLevelTxt.setText("");
                                    addItemBatchTxt.setText("");
                                    addItemEXPDateTxt.setText("");
                                    addItemMFDTxt.setText("");
                                    addItemQtyOnHandTxt.setText("");
                                    addItemUnitPriceTxt.setText("");
                                    addItembarcodeTxt.requestFocusInWindow();
                                }
                            }
                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(this, ex);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "This Item Already Exits...");
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "This Barcode Already Refistered");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please input data first..");
        }
    }//GEN-LAST:event_btnAddItemForDBActionPerformed

    private void btnAddItemForDBKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnAddItemForDBKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //Get Values
            String barcode = addItembarcodeTxt.getText();
            String description = addItemdescriptionTxt.getText();
            String packSize = addItempackSizeTxt.getText();
            String reOrderLevel = addItemreOrderLevelTxt.getText();
            String batch = addItemBatchTxt.getText();
            String EXPtxt = addItemEXPDateTxt.getText();
            String MFDtxt = addItemMFDTxt.getText();
            String qty = addItemQtyOnHandTxt.getText();
            String unitPrice = addItemUnitPriceTxt.getText();
            //Check every Feelds is not null
           
            boolean v2 = Validation.validateEmptyTextFeald(description);
            boolean v3 = Validation.validateEmptyTextFeald(packSize);
            boolean v4 = Validation.validateEmptyTextFeald(reOrderLevel);
            boolean v5 = Validation.validateEmptyTextFeald(batch);
            boolean v6 = Validation.validateEmptyTextFeald(EXPtxt);
            boolean v7 = Validation.validateEmptyTextFeald(MFDtxt);
            boolean v8 = Validation.validateEmptyTextFeald(qty);
            boolean v9 = Validation.validateEmptyTextFeald(unitPrice);

            if (!v2 && !v3 && !v4 && !v5 && !v6 && !v7 && !v8 && !v9) {
                ItemService itemService = (ItemService) context.getBean("ItemService");
                try {
                    Item searchItemIsAlreadyExits = itemService.getItemByDescription(description.trim());
                    Item searchItemAlreadyExitsByBarcode = itemService.getItemByBarcode(barcode.trim());
                    if (searchItemAlreadyExitsByBarcode == null) {
                        if (searchItemIsAlreadyExits == null) {
                            //Create ITEM
                            ItemDTO i = new ItemDTO();
                            i.setBarcode(barcode);
                            i.setDescription(description);
                            i.setPackSize(packSize);
                            i.setReOrderLevel(Integer.parseInt(reOrderLevel));
                            //Create Batch
                            LocalDate MFD = new LocalDate(MFDtxt);
                            LocalDate EXP = new LocalDate(EXPtxt);

                            Batch batchDto = new Batch();
                            batchDto.setBatch(batch);
                            batchDto.setEXPD(EXP);
                            batchDto.setMFD(MFD);
                            batchDto.setQtyOnHand(Double.parseDouble(qty));
                            batchDto.setUnitPrice(Double.parseDouble(unitPrice));

                            try {
                                boolean add = itemService.add(i);
                                if (add) {
                                    Item itemByDescription = itemService.getItemByDescription(description);
                                    int searchedId = itemByDescription.getId();
                                    List<Batch> allBatch = itemService.getItemsBatchesById(searchedId);
                                    if (allBatch == null) {
                                        allBatch = new ArrayList<>();
                                    }
                                    allBatch.add(batchDto);
                                    itemByDescription.setBatch(allBatch);
                                    //item for batch added then update item
                                    ItemDTO itemDTO1 = new ItemDTO();
                                    itemDTO1.setBarcode(itemByDescription.getBarcode());
                                    itemDTO1.setBatch(itemByDescription.getBatch());
                                    itemDTO1.setDescription(itemByDescription.getDescription());
                                    itemDTO1.setId(itemByDescription.getId());
                                    itemDTO1.setPackSize(itemByDescription.getPackSize());
                                    itemDTO1.setReOrderLevel(itemByDescription.getReOrderLevel());
                                    boolean update = itemService.update(itemDTO1);
                                    if (update) {
                                        JOptionPane.showMessageDialog(this, "Item Added Successfully..");
                                        addItembarcodeTxt.setText("");
                                        addItemdescriptionTxt.setText("");
                                        addItempackSizeTxt.setText("");
                                        addItemreOrderLevelTxt.setText("");
                                        addItemBatchTxt.setText("");
                                        addItemEXPDateTxt.setText("");
                                        addItemMFDTxt.setText("");
                                        addItemQtyOnHandTxt.setText("");
                                        addItemUnitPriceTxt.setText("");
                                        addItembarcodeTxt.setRequestFocusEnabled(true);
                                    } else {
                                        JOptionPane.showMessageDialog(this, "Item Added Faild..");
                                        addItembarcodeTxt.setText("");
                                        addItemdescriptionTxt.setText("");
                                        addItempackSizeTxt.setText("");
                                        addItemreOrderLevelTxt.setText("");
                                        addItemBatchTxt.setText("");
                                        addItemEXPDateTxt.setText("");
                                        addItemMFDTxt.setText("");
                                        addItemQtyOnHandTxt.setText("");
                                        addItemUnitPriceTxt.setText("");
                                        addItembarcodeTxt.setRequestFocusEnabled(true);
                                    }
                                }
                            } catch (Exception ex) {
                                JOptionPane.showMessageDialog(this, ex);
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "This Item Already Exits...");
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "This Barcode Already Refistered");
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, ex);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Please input data first..");
            }
        }
    }//GEN-LAST:event_btnAddItemForDBKeyPressed

    private void addItemEXPDateTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addItemEXPDateTxtFocusGained
        validDateFomatLable1.show();
    }//GEN-LAST:event_addItemEXPDateTxtFocusGained

    private void addItemEXPDateTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addItemEXPDateTxtFocusLost
        validDateFomatLable1.hide();
    }//GEN-LAST:event_addItemEXPDateTxtFocusLost

    private void addItemMFDTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addItemMFDTxtFocusGained
        validDateFormatLable2.show();
    }//GEN-LAST:event_addItemMFDTxtFocusGained

    private void addItemMFDTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addItemMFDTxtFocusLost
        validDateFormatLable2.hide();
    }//GEN-LAST:event_addItemMFDTxtFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddNewItemFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddNewItemFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddNewItemFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddNewItemFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddNewItemFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ItemViewPanel;
    private javax.swing.JTextField addItemBatchTxt;
    private javax.swing.JFormattedTextField addItemEXPDateTxt;
    private javax.swing.JFormattedTextField addItemMFDTxt;
    private javax.swing.JFormattedTextField addItemQtyOnHandTxt;
    private javax.swing.JFormattedTextField addItemUnitPriceTxt;
    private javax.swing.JTextField addItembarcodeTxt;
    private javax.swing.JTextField addItemdescriptionTxt;
    private javax.swing.JTextField addItempackSizeTxt;
    private javax.swing.JTextField addItemreOrderLevelTxt;
    private javax.swing.JButton btnAddItemForDB;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel labelMFFDD;
    private javax.swing.JLabel validDateFomatLable1;
    private javax.swing.JLabel validDateFormatLable2;
    // End of variables declaration//GEN-END:variables
}
